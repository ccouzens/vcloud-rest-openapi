openapi: 3.1.0
info:
  title: vCloud Director OpenAPI
  version: '2019-09-12T10:07:17.587-07:00'
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    AccessibleLocation:
      type: object
      description: A location accessible to this session.
      properties:
        locationId:
          type: string
        site:
          $ref: '#/components/schemas/EntityReference'
        org:
          $ref: '#/components/schemas/EntityReference'
        restApiEndpoint:
          type: string
        uiEndpoint:
          type: string
        apiVersion:
          type: string
    AllocatedIpAddress:
      type: object
      description: 'Describes an allocated IP address for a network. IP addresses
        can be allocated

        to a vApp VM, an edge gateway interface or may be used in a NAT routed environment.

        If the address is allocated to an edge gateway, the name of the entity will
        be ''Edge Gateway''.'
      properties:
        id:
          type: string
          description: Unique identifier for record. This is to support UI operations.
        entityId:
          type: string
          description: Id of the entity to which the IP address is allocated such
            as a VM.
        entityName:
          type: string
          description: Name of the entity to which the IP address is allocated.
        vAppName:
          type: string
          description: Name of the vApp whose VM is using allocated IP address.
        ipAddress:
          type: string
          description: The allocated IP address.
        deployed:
          type: boolean
          description: Whether the entity using this IP address is currently deployed.
        allocationType:
          $ref: '#/components/schemas/AllocatedIpAddressAllocationType'
          description: The possible allocation types for allocated network address
            like VSM allocated, VM allocated or NAT routed.
        networkRef:
          $ref: '#/components/schemas/EntityReference'
          description: The vApp network or Org vDC network to which this entity is
            connected.
        orgRef:
          $ref: '#/components/schemas/EntityReference'
          description: The organization that this entity belongs to.
    AllocatedIpAddressAllocationType:
      type: string
      description: 'The possible allocation types for allocated network address.

        VM_ALLOCATED means that the IP address is allocated by a VM,

        NAT_ROUTED means that the IP address is used in a NAT routed environment and

        VSM_ALLOCATED means that the IP address is allocated to an NSX edge gateway
        interface.'
      enum:
        - VM_ALLOCATED
        - NAT_ROUTED
        - VSM_ALLOCATED
    ApplicationPortList:
      type: object
      description: A set of ports and the protocol supported by a application port
        profile.
      properties:
        name:
          type: string
          description: The display name.
        protocol:
          $ref: '#/components/schemas/ApplicationPortsProtocolType'
          description: The protocol this services applies to.
        destinationPorts:
          type: array
          description: The set of ports on the destination that the profile applies
            to. Valid values include single ports and a range of ports.
          items:
            type: string
    ApplicationPortProfileScopeType:
      type: string
      description: 'The definition scope of an Application Port Profile.

        SYSTEM profiles are available to all tenants. They are default profiles from
        the backing networking provider.

        PROVIDER profiles are available to all tenants. They are defined by the provider
        at a system level.

        TENANT profiles are available only to the specific tenant organization. They
        are defined by the tenant or by a provider on behalf of a tenant.'
      enum:
        - SYSTEM
        - PROVIDER
        - TENANT
    ApplicationPortsProtocolType:
      type: string
      description: The supported protocols for an application port profile.
      enum:
        - TCP
        - UDP
        - ICMPv4
        - ICMPv6
    Association:
      type: object
      description: Site association information for an entity
      properties:
        entityId:
          type: string
          description: ID of the entity.
        associationId:
          type: string
          description: ID of the association.
    AuditTrailEvent:
      type: object
      description: AuditTrailEvent
      properties:
        eventId:
          type: string
        description:
          type: string
        operatingOrg:
          $ref: '#/components/schemas/EntityReference'
        user:
          $ref: '#/components/schemas/EntityReference'
        eventEntity:
          $ref: '#/components/schemas/EntityReference'
        taskId:
          type: string
        taskCellId:
          type: string
        cellId:
          type: string
        eventType:
          type: string
        serviceNamespace:
          type: string
        eventStatus:
          type: string
        timestamp:
          type: string
          format: date-time
        external:
          type: boolean
        additionalProperties:
          type: object
    AvailableIpPoolSubnet:
      type: object
      description: Describes an available IP address.
      properties:
        gateway:
          type: string
          description: The gateway for the subnet on which IPs are available.
        prefixLength:
          type: integer
          description: The netmask prefix length of the subnet.
        enabled:
          type: boolean
          description: Indicates whether the network subnet is currently enabled.
          default: false
        ipRanges:
          $ref: '#/components/schemas/IpRanges'
          description: Range of IPs which are available for use.
        totalIpCount:
          type: integer
          description: The total number of available IP addresses.
    AvailableIpPoolSubnets:
      type: object
      description: List of available IP addresses.
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/AvailableIpPoolSubnet'
    BackingNetworkType:
      type: string
      description: The backing network type.
      enum:
        - DV_PORTGROUP
        - VIRTUAL_WIRE
        - IMPORTED_T_LOGICAL_SWITCH
        - OPAQUE_NETWORK
        - NSXT_FIXED_SEGMENT
        - NSXT_FLEXIBLE_SEGMENT
    BackingRef:
      type: object
      description: Backing Id for an entity not owned by VCD.
      properties:
        id:
          type: string
          description: The id/moref of the backing entity.
        name:
          type: string
          description: The name of backing entity.
    Capability:
      type: object
      description: Describes a capability of an entity.
      properties:
        name:
          type: string
          description: The name of the capability.
          readOnly: true
        description:
          type: string
          description: Description of the capability as it relates to the entity.
          readOnly: true
        value:
          type: object
          description: The value of the capability.
        type:
          $ref: '#/components/schemas/CapabilityValueType'
          description: The type of the value.
        category:
          $ref: '#/components/schemas/CapabilityCategory'
          description: The category of the capabilities listed.
    CapabilityCategory:
      type: string
      description: Describes the category of the capbilitiy
      enum:
        - EdgeGateway
        - VAppNetwork
        - OrgVdcNetwork
        - Infra
    CapabilityValueType:
      type: string
      description: Describes the object type of the capability value.
      enum:
        - Boolean
        - String
    Cell:
      type: object
      description: A vCloud Director cell.
      properties:
        id:
          type: string
          description: The unique id of the cell.
        productBuildDate:
          type: string
          format: date-time
          description: The build date for the version of the product installed on
            this cell.
        isActive:
          type: boolean
          description: Cell active state.
        name:
          type: string
          description: The name of the cell.
        primaryIP:
          type: string
          description: The primary ip address of the cell.
        productVersion:
          type: string
          description: The product version of the cell.
    CommonNsxTRouterFields:
      type: object
      description: Common fields that all Tier-0 or Tier-1 routers have.
      properties:
        id:
          type: string
          description: The unique id of the router. Field is sortable.
        description:
          type: string
          description: The description of the router.
        displayName:
          type: string
          description: Name used in NSX-T's logs or GUI. Field is sortable.
    ConnectorInitiationMode:
      type: string
      description: This is used by a local endpoint to establish ike connection with
        the remote site.
      enum:
        - INITIATOR
        - RESPOND_ONLY
        - ON_DEMAND
    Constraint:
      type: object
      properties:
        constraintType:
          type: string
      required:
        - constraintType
      discriminator: constraintType
    CreateCustomEntityTypeAction:
      type: object
      properties:
        workflowId:
          type: string
          description: uuid of workflow.
        workflowInputParameter:
          type: string
          description: Name of input parameter of given workflow to which this custom
            entity type should be mapped.
      required:
        - workflowId
        - workflowInputParameter
    CustomEntities:
      type: object
      properties:
        entities:
          type: array
          items:
            $ref: '#/components/schemas/CustomEntity'
    CustomEntity:
      type: object
      properties:
        id:
          type: string
          description: UUID of custom entity
        name:
          type: string
        customEntityTypeId:
          type: string
          description: This refers to UUID of custom entity type
      required:
        - name
    CustomEntityType:
      type: object
      properties:
        id:
          type: string
          description: UUID for custom entity type. This is immutable.
        vroId:
          type: string
        vroDynamicType:
          type: string
          description: This refers to VRO's dynamic type.
        name:
          type: string
          description: Display name.
        nss:
          type: string
          description: This refers to a unique namespace specific string.
        description:
          type: string
          default: ''
        tenantScoped:
          type: boolean
          default: true
        providerScoped:
          type: boolean
          default: true
        publishAll:
          type: boolean
          description: Read-only value indicating publishAll state
          default: false
    CustomEntityTypeAction:
      type: object
      properties:
        name:
          type: string
          description: Name of workflow
        workflowId:
          type: string
          description: UUID of workflow.
        workflowInputParameter:
          type: string
          description: Name of input parameter of given workflow to which this custom
            entity type should be mapped.
      required:
        - name
        - workflowId
    CustomEntityTypeActions:
      type: object
      properties:
        actions:
          type: array
          items:
            $ref: '#/components/schemas/CustomEntityTypeAction'
    Decorator:
      type: object
      properties:
        decoratorType:
          type: string
      required:
        - decoratorType
      discriminator: decoratorType
    DfPolicyType:
      type: string
      description: 'Defragmentation Policy helps to handle defragmentation bits present
        in the inner packet. COPY copies the defragmentation bit from the inner IP
        packet

        into the outer packet. CLEAR ignores the defragmentation bit present in the
        inner packet.'
      enum:
        - COPY
        - CLEAR
    DhGroupType:
      type: string
      description: 'The type of Diffie-Helman group. Diffie-Helman groups represent
        the algorithm used to derive shared keys between the IPSec VPN initiator and
        responder over

        an unsecured network.'
      enum:
        - GROUP2
        - GROUP5
        - GROUP14
        - GROUP15
        - GROUP16
        - GROUP19
        - GROUP20
        - GROUP21
    DistributedPortGroup:
      type: object
      description: Distributed portgroup.
      properties:
        backingRef:
          $ref: '#/components/schemas/BackingRef'
          description: Contains the backing id and name of the distributed portgroup.
        virtualCenter:
          $ref: '#/components/schemas/EntityReference'
          description: The entity reference for the vCenter that contains this distributed
            portgroup.
        vlan:
          type: string
          description: The VLAN associated with this distributed portgroup. This can
            be a single number or a numerical range(1-10).
        dvSwitch:
          $ref: '#/components/schemas/DvSwitch'
          description: The distributed virtual switch on which this distributed virtual
            portgroup was created.
    DpdConfig:
      type: object
      description: 'Specifies the Dead Peer Detection Profile. This configurations
        determines the number of seconds to wait in time between probes

        to detect if an IPSec peer is alive or not. The default value for the DPD
        probe interval is 60 seconds.'
      properties:
        probeInterval:
          type: integer
          description: The value of the probe interval in seconds. This defines a
            periodic interval for DPD probes. The minimum is 3 seconds and the maximum
            is 60 seconds.
          minimum: 3
          maximum: 60
      required:
        - probeInterval
    DvSwitch:
      type: object
      description: Distributed virtual switch.
      properties:
        backingRef:
          $ref: '#/components/schemas/BackingRef'
          description: Contains the backing id and name of the distributed virtual
            switch.
        virtualCenter:
          $ref: '#/components/schemas/EntityReference'
          description: The entity reference for the vCenter that contains this distributed
            virtual switch.
    EdgeCluster:
      type: object
      description: An Edge Cluster object.
      properties:
        id:
          type: string
          description: The id of the Edge Cluster in URN format.
        name:
          type: string
          description: The name of the Edge Cluster. Names for Edge Clusters must
            be unique across the system.
        description:
          type: string
        resourcePool:
          $ref: '#/components/schemas/ResourcePool'
          description: The Resource Pool in vCenter where the Edge VM will be deployed.
        storageProfileName:
          type: string
          description: Name of the Storage Profile. This will define the set of datastores
            where the edge vm will be deployed.
      required:
        - name
        - storageProfileName
    EdgeDnsConfig:
      type: object
      description: Specifies the DNS forwarder configuration for an edge gateway backed
        by NSX-T.
      properties:
        enabled:
          type: boolean
          description: True means that the forwarder is enabled. False means it's
            disabled.
          default: false
        listenerIp:
          type: string
          description: The IP on which the DNS forwarder listens.
          readOnly: true
        defaultForwarderZone:
          $ref: '#/components/schemas/NsxtDnsForwarderZoneConfig'
          description: The default forwarder zone to use if there's no matching domain
            in the conditional forwarder zone.
        conditionalForwarderZones:
          type: array
          description: The list of forwarder zones with its matching DNS domains.
          items:
            $ref: '#/components/schemas/NsxtDnsForwarderZoneConfig'
          minItems: 0
          maxItems: 5
        version:
          $ref: '#/components/schemas/ObjectVersion'
    EdgeFirewallRule:
      type: object
      description: Specifies the Firewall rule for an edge gateway backed by NSX-T.
      properties:
        id:
          type: string
          description: 'The unique id of this firewall rule. If a rule with the ruleId

            is not already present, a new rule will be created. If it already

            exists, the rule will be updated.'
        name:
          type: string
          description: Name for the rule.
        description:
          type: string
        sourceFirewallGroups:
          type: array
          description: 'List of source groups for firewall rule. It specifies the
            sources of network traffic for the firewall rule.

            Null value or an empty list will be treated as "ANY" which means traffic
            from any source.'
          items:
            $ref: '#/components/schemas/EntityReference'
          maxItems: 128
        destinationFirewallGroups:
          type: array
          description: 'List of source groups for firewall rule. It specifies the
            destinations of network traffic for the firewall rule.

            Null value or an empty list will be treated as "ANY" which means traffic
            to any destination.'
          items:
            $ref: '#/components/schemas/EntityReference'
          maxItems: 128
        applicationPortProfiles:
          type: array
          description: 'The list of application ports where this firewall rule is
            applicable.

            Null value or an empty list will be treated as "ANY" which means rule
            applies to all ports.'
          items:
            $ref: '#/components/schemas/EntityReference'
          maxItems: 128
        ipProtocol:
          $ref: '#/components/schemas/FirewallRuleIpProtocol'
          description: 'Type of IP packet that should be matched while enforcing the
            rule.

            Default value is IPV4_IPV6.'
        action:
          $ref: '#/components/schemas/FirewallRuleAction'
          description: 'The action to be applied to all the traffic that meets the
            firewall rule criteria.

            It determines if the rule permits or blocks traffic.'
        direction:
          $ref: '#/components/schemas/FirewallRuleDirection'
          description: 'Specifies the direction of the network traffic.

            Default value is IN_OUT.'
        enabled:
          type: boolean
          description: Whether the firewall rule is enabled.
          default: true
        logging:
          type: boolean
          description: Whether packet logging is enabled for firewall rule.
          default: false
        version:
          $ref: '#/components/schemas/ObjectVersion'
      required:
        - action
        - name
    EdgeGatewayBacking:
      type: object
      description: The backing details of the edge gateway
      properties:
        backingId:
          type: string
          description: The identifier of the edge gateways backing router.
        gatewayType:
          $ref: '#/components/schemas/EdgeGatewayType'
          description: The type of the gateway. Describes if this is an NSX-T edge
            gateway or an NSX-V edge gateway.
        networkProvider:
          $ref: '#/components/schemas/EntityReference'
          description: The backing network provider, either NSX-T or NSX-V.
    EdgeGatewaySubnets:
      type: object
      description: List of Subnets of an edge gateway
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/EdgeGatewaySubnet'
    EdgeGatewayType:
      type: string
      description: The type of the edge gateway.
      enum:
        - NSXV_BACKED
        - NSXT_BACKED
        - NSXT_IMPORTED
    EdgeGatewayUplink:
      type: object
      description: The uplink (i.e. external network) that the edge gateway is connected
        to. This also contains the external network IPs that are allocated to the
        edge.
      properties:
        uplinkId:
          type: string
          description: The identifier of the external network this edge gateway is
            connected to.
        uplinkName:
          type: string
          description: The name of the external network this edge gateway is connected
            to.
        subnets:
          $ref: '#/components/schemas/EdgeGatewaySubnets'
          description: Set of subnets this edge will have access to.
        connected:
          type: boolean
          description: Whether or not the gateway is connected to this uplink. This
            value defaults to true if it is not set. When filtering by this field,
            if the filter is false, all gateways that have 0 connected uplinks will
            be returned, while if it is true, all gateways with at least one connected
            uplink will be returned.
          default: true
        quickAddAllocatedIpCount:
          type: integer
          description: If set on create or update api calls, the specified number
            of IP addresses will be additionally allocated for this uplink. IPs will
            be allocated from multiple subnets if needed.
    EdgeIpSecVpnTunnel:
      type: object
      description: Specifies the IPSec VPN tunnel configuration.
      properties:
        id:
          type: string
          description: The unique id of this IPSec VPN tunnel. On updates, the id
            is required for the tunnel, while for create a new id will be generated.
        name:
          type: string
          description: Name for the tunnel.
        description:
          type: string
        enabled:
          type: boolean
          description: Described whether the tunnel is enabled or not. The default
            is true.
          default: true
        localEndpoint:
          $ref: '#/components/schemas/LocalEndpoint'
          description: 'The Local Endpoint which corresponds to the Edge Gateway the
            tunnel is being configured on. Local Endpoint requires an IP. That IP
            must be suballocated to the

            edge gateway.'
        remoteEndpoint:
          $ref: '#/components/schemas/RemoteEndpoint'
          description: The Remote Endpoints correspoinds to the device on the remote
            site terminating the VPN tunnel.
        preSharedKey:
          type: string
          description: This is the Pre-shared key used for authentication.
        connectorInitiationMode:
          $ref: '#/components/schemas/ConnectorInitiationMode'
          description: This is the mode used by the local endpoint to establish an
            IKE Connection with the remote site. The default is INITIATOR.
        securityType:
          $ref: '#/components/schemas/TunnelSecurityType'
          description: 'This is the security type used for the IPSec Tunnel. If nothing
            is specified, this will be set to default in which the default settings
            in NSX will be used.

            For custom settings, one should use the connectionProperties endpoint
            to specify custom settings. The security type will then appropriately
            reflect itself as

            CUSTOM.'
        logging:
          type: boolean
          description: Whether logging for the tunnel is enabled or not. The default
            is false.
          default: false
        version:
          $ref: '#/components/schemas/ObjectVersion'
      required:
        - localEndpoint
        - name
        - preSharedKey
        - remoteEndpoint
    EdgeIpSecVpnTunnelConnectionProperties:
      type: object
      description: 'This includes the IPSec tunnel configuration, IKE Configuration,
        and other advanced properties that can be set once a tunnel is created. If

        nothing is explictly set by the user, the defaults in NSX-T will be used.'
      properties:
        ikeConfiguration:
          $ref: '#/components/schemas/IkeConfig'
          description: The IKE Configuration to be used for the tunnel. If nothing
            is explictly set, the system defaults will be used.
        tunnelConfiguration:
          $ref: '#/components/schemas/TunnelConfig'
          description: The Tunnel Configuration, which contains parameters such as
            encryption algorithm to be used. If nothing is explicitly set, the system
            defaults will be used.
        dpdConfiguration:
          $ref: '#/components/schemas/DpdConfig'
          description: The Dead Peer Detection configuration. If nothing is explictly
            set, the system defaults will be used.
    EdgeIpSecVpnTunnelStatistics:
      type: object
      description: Specifies the statistics for the given IPSec VPN Tunnel.
      properties:
        localSubnet:
          type: string
          description: Local subnet to which a tunnel belongs.
        peerSubnet:
          type: string
          description: Peer subnet to which a tunnel belongs.
        packetsIn:
          type: integer
          format: int64
          description: Number of packets received.
        packetsOut:
          type: integer
          format: int64
          description: Number of packets sent.
        bytesIn:
          type: integer
          format: int64
          description: Number of bytes received.
        bytesOut:
          type: integer
          format: int64
          description: Number of bytes sent.
        packetsSentError:
          type: integer
          format: int64
          description: Number of packets sent with errors.
        packetsReceivedError:
          type: integer
          format: int64
          description: Number of packets reveived with errors.
        packetsInDropped:
          type: integer
          format: int64
          description: Number of packets dropped while receiving.
        packetsOutDropped:
          type: integer
          format: int64
          description: Number of packets dropped while sending.
        encryptionErrors:
          type: integer
          format: int64
          description: Number of encryption errors.
        decryptionErrors:
          type: integer
          format: int64
          description: Number of decryption errors.
        overflowErrors:
          type: integer
          format: int64
          description: Number of errors due to overflow.
        replayErrors:
          type: integer
          format: int64
          description: Number of replay errors.
        integrityErrors:
          type: integer
          format: int64
          description: Number of integrity check errors.
        saMismatchInErrors:
          type: integer
          format: int64
          description: Number of SA mismatch errors while receiving.
        saMismatchOutErrors:
          type: integer
          format: int64
          description: Number of SA mismatch errors while sending.
        noMatchingPolicyErrors:
          type: integer
          format: int64
          description: Number of packets dropped because of no matching policy is
            available.
    EdgeIpSecVpnTunnelStatus:
      type: object
      description: This includes the IPSec Tunnel status such as whether the tunnel
        is up or down and the IKE Session status.
      properties:
        tunnelStatus:
          $ref: '#/components/schemas/TunnelStatus'
          description: Gives the overall IPSec VPN Tunnel Status. If IKE is properly
            set and the tunnel is up, the tunnel status will be UP.
        ikeStatus:
          $ref: '#/components/schemas/IkeStatus'
          description: Status for the actual IKE Session for the given tunnel.
    EdgeNatRule:
      type: object
      description: The configuration for a given NAT Rule.
      properties:
        id:
          type: string
          description: The unique id of the NAT Rule. This must be supplied when updating
            a given NAT Rule. On creation, an unique id is generated for the NAT Rule.
        name:
          type: string
          description: User friendly name for the NAT Rule. Name must be provided.
        description:
          type: string
        enabled:
          type: boolean
          description: A flag indicating whether the individual nat rule is enabled
            or not. The default is true.
          default: true
        ruleType:
          $ref: '#/components/schemas/NatRuleType'
          description: 'Represents the type of NAT Rule. SNAT translates an internal
            IP to an external ip and is used for outbound traffic.

            DNAT translates the external IP to an internal IP and is used for inbound
            traffic.'
        applicationPortProfile:
          $ref: '#/components/schemas/EntityReference'
          description: 'Represents the application ports on which the NAT Rule will
            be applied. An application port profile id in the form of URN format must
            be provided.

            If not provided then the port will be considered as "ANY".'
        externalAddresses:
          type: string
          description: 'The external addresses for the NAT Rule. This must be supplied
            as a single ip or Network CIDR. For a DNAT rule, this is the external
            facing IP Address for incoming traffic.

            For an SNAT rule, this is the external facing IP Address for outgoing
            traffic. These ips are typically allocated/suballocated IP Addresses on

            the Edge Gateway.'
        internalAddresses:
          type: string
          description: 'The internal addresses for the NAT Rule. This must be supplied
            as a single ip or Network CIDR. For a DNAT rule, this is the internal
            IP Address for incoming traffic.

            For an SNAT rule, this is the internal IP Address for outgoing traffic.
            These ips are typically the Private IPs that are allocated to workloads.'
        internalPort:
          type: string
          description: Port number or port range for incoming network traffic. If
            Any Traffic is selected for the Service, the default internal port is
            "ANY".
        logging:
          type: boolean
          description: A flag indicating whether logging for the individual nat rule
            is enabled or not. The default is false.
          default: false
        systemRule:
          type: boolean
          description: A flag indicating whether this NAT rule is managed by the system.
            This is not user editable
          default: false
        version:
          $ref: '#/components/schemas/ObjectVersion'
      required:
        - externalAddresses
        - internalAddresses
        - name
        - ruleType
    EgressPoint:
      type: object
      description: An Egress Point.
      properties:
        id:
          type: string
          description: The unique ID for the Universal Egress Point (read-only).
        vdcRef:
          $ref: '#/components/schemas/EntityReference'
          description: The Org vDC the Universal Egress Point belongs to.
        gatewayRef:
          $ref: '#/components/schemas/EntityReference'
          description: The Edge Gateway the Egress Point is referring to.
        networkProviderScope:
          type: string
          description: Read-only field that specifies the network provider scope of
            the Universal Egress Point (inherited from the Org vDC).
        isUsedForRouting:
          type: boolean
          description: Specifies whether the egress point is being used for Universal
            Routing. This is a read-only field.
        status:
          $ref: '#/components/schemas/VdcGroupEntityStatus'
          description: The status of the Universal Egress Point.
        errorMessage:
          type: string
    EgressPointReference:
      type: object
      description: An EgressPoint reference object for use in universal routing.
      properties:
        egressPointId:
          type: string
          description: The id of the Universal Egress Point reference.
        vdcRef:
          $ref: '#/components/schemas/EntityReference'
          description: The Org vDC of the Universal Egress Point reference.
        gatewayRef:
          $ref: '#/components/schemas/EntityReference'
          description: The Edge Gateway of the Universal Egress Point reference.
    EgressPoints:
      type: object
      description: List of Egress Points.
      properties:
        values:
          type: array
          description: The list of Universal Egress Points.
          items:
            $ref: '#/components/schemas/EgressPoint'
    EmailSettings:
      type: object
      description: Email related settings for a system
      properties:
        defaultSmtpServer:
          type: boolean
          description: Flag indicating if the smtp server settings are system default
            (true) or a particular organization (false)
        defaultOrgEmail:
          type: boolean
          description: Flag indicating if the email settings are system default (true)
            or for a particular organization (false)
        smtpServer:
          $ref: '#/components/schemas/SmtpServerSpec'
        senderEmailAddress:
          type: string
          description: Sender email address in an email notification or alert
        defaultEmailSubjectPrefix:
          type: string
          description: The prefix used in the email subject line for all email notifications
            and alerts from the system
        alertEmailToAllAdmins:
          type: boolean
          description: 'A flag to indicate the choice between sending alert emails
            to all system

            administrators in the system and designated list of email recipients'
        alertEmailTo:
          type: string
          description: A comma separated email addresses to send all alert messages
            to
    EntityReference:
      type: object
      description: Entity reference used to describe VCD entities
      properties:
        name:
          type: string
        id:
          type: string
    Error:
      type: object
      description: Error type format displayed to users for exceptions emerging from
        openapi endpoints.
      properties:
        minorErrorCode:
          type: string
        message:
          type: string
        stackTrace:
          type: string
      required:
        - message
        - minorErrorCode
    ExecutionContext:
      type: object
      properties:
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/WsParameter'
    ExecutionState:
      type: string
      enum:
        - canceled
        - completed
        - running
        - suspended
        - waiting
        - waiting-signal
        - failed
        - initializing
    ExecutionSummary:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        startDate:
          type: string
        endDate:
          type: string
        startedBy:
          type: string
        state:
          $ref: '#/components/schemas/ExecutionState'
    ExtensionPoint:
      type: object
      description: Extension Point of a UI Plugin
      properties:
        extensionPointId:
          type: string
        pluginId:
          type: string
        name:
          type: string
        enabled:
          type: boolean
      required:
        - enabled
        - extensionPointId
        - pluginId
    ExtensionPointSummary:
      type: object
      description: A map of extension Points and an ordered list of items registered
        with that extension point
      properties:
        extensionPointRegistrations:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/ExtensionPoint'
    ExternalNetworkBacking:
      type: object
      description: Information about an external network backing.
      properties:
        backingId:
          type: string
          description: Unique identifier for the network backing in NSX/vCenter.
        backingType:
          $ref: '#/components/schemas/ExternalNetworkBackingType'
          description: Type of network backing.
        networkProvider:
          $ref: '#/components/schemas/EntityReference'
          description: The Network Provider for the backing, either a vCenter Server
            or NSX-T Manager.
        name:
          type: string
          description: The name of this external network backing, if it exists.
    ExternalNetworkBackingType:
      type: string
      description: The type of the external network backing.
      enum:
        - PORTGROUP
        - DV_PORTGROUP
        - NSXT_TIER0
        - UNKNOWN
    ExternalNetworkBackings:
      type: object
      description: List of External Network backings.
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/ExternalNetworkBacking'
    FirewallGroupScope:
      type: object
      description: Describes the scope and relationship that this firewall group has
        with other VCD entities.
      properties:
        orgRef:
          $ref: '#/components/schemas/EntityReference'
          description: The organization that this firewall group belongs to. This
            property is read-only and cannot be updated.
        edgeGatewayRef:
          $ref: '#/components/schemas/EntityReference'
          description: 'The edge gateway that this firewall group is scoped to. This
            means that this firewall group can be used when configuring firewall rules
            for the edge gateway.

            This property is required and cannot be updated.'
        networkProviderScope:
          type: string
          description: The network provider scope that this object belongs to. This
            is a read-only property and is determined by the input context entity
            ID during object creation.
    FirewallRuleAction:
      type: string
      description: Defines the firewall rule action to be applied.
      enum:
        - ALLOW
        - DROP
    FirewallRuleDirection:
      type: string
      description: Defines direction of traffic for firewall rule.
      enum:
        - IN
        - OUT
        - IN_OUT
    FirewallRuleIpProtocol:
      type: string
      description: 'Specifies the IP protocol for the network packet that should be
        matched while enforcing the rule.

        IPV4_IPV6 means both IPV4 and IPV6 packet type.'
      enum:
        - IPV4
        - IPV6
        - IPV4_IPV6
    GatewayUsedIpAddress:
      type: object
      description: Describes an IP address currently be used by the edge gateway.
        The IP belongs to the IPs allocated to the edge.
      properties:
        networkRef:
          $ref: '#/components/schemas/EntityReference'
          description: The external network that this IP Address belongs to.
        ipAddress:
          type: string
          description: The IP address in used.
        category:
          $ref: '#/components/schemas/GatewayUsedIpAddressCategory'
          description: The catagory that an IP can be used for.
    GatewayUsedIpAddressCategory:
      type: string
      description: The categories that an IP can be used for.
      enum:
        - SNAT
        - DNAT
        - Load_Balancer
        - IPsec_VPN
        - SSL_VPN
        - L2_VPN
        - PRIMARY_IP
    HardwareVersions:
      type: object
      description: Set of supported ESXi virtual hardware versions.
      properties:
        versions:
          type: array
          items:
            type: string
    IkeConfig:
      type: object
      description: This configuration captures the IKE and phase one negotiation parameters.
        This configuration can be set for peering properly with remote peers.
      properties:
        ikeVersion:
          $ref: '#/components/schemas/IkeVersionType'
          description: IKE Protocol Version to use. The default is IKE_V2.
        dhGroups:
          type: array
          description: The list of Diffie-Helman groups to be used is PFS is enabled.
            Default is GROUP14.
          items:
            $ref: '#/components/schemas/DhGroupType'
          minItems: 1
        digestAlgorithms:
          type: array
          description: The list of Digest algorithms for IKE. This is used during
            IKE negotiation. Default is SHA2_256.
          items:
            $ref: '#/components/schemas/IkeDigestAlgorithmType'
        encryptionAlgorithms:
          type: array
          description: The list of Encryption algorithms for IKE. This is used during
            IKE negotiation. Default is AES_128.
          items:
            $ref: '#/components/schemas/IkeEncryptionAlgorithmType'
          minItems: 1
        saLifeTime:
          type: integer
          description: The Security Association life time in seconds. Default is 86400
            seconds (1 day).
          minimum: 21600
          maximum: 31536000
      required:
        - dhGroups
        - encryptionAlgorithms
        - ikeVersion
    IkeDigestAlgorithmType:
      type: string
      description: Digest Algorithms are used to verify message integrity during IKE
        negotiation.
      enum:
        - SHA1
        - SHA2_256
        - SHA2_384
        - SHA2_512
    IkeEncryptionAlgorithmType:
      type: string
      description: Encryption algorithms are used to ensure confidentiality of messages
        exchanged during IKE negotiations.
      enum:
        - AES_128
        - AES_256
        - AES_GCM_128
        - AES_GCM_192
        - AES_GCM_256
    IkeServiceStatus:
      type: string
      description: The service status for the IKE Session.
      enum:
        - UP
        - DOWN
        - NEGOTIATING
    IkeStatus:
      type: object
      description: The status for the IPSec VPN IKE Session/Tunnel. The values are
        UP, DOWN, and NEGOTIATING. A fail reason is also provided if the Service Status
        is down.
      properties:
        ikeServiceStatus:
          $ref: '#/components/schemas/IkeServiceStatus'
          description: The overall IKE Session service status.
        failReason:
          type: string
          description: The reason for the IKE Session establishment failure. This
            will only be set if the status is DOWN.
    IkeVersionType:
      type: string
      description: The IKE Protocol version type.
      enum:
        - IKE_V1
        - IKE_V2
        - IKE_FLEX
    IpRange:
      type: object
      description: An IpRange
      properties:
        startAddress:
          type: string
          description: Starting IP address in the range.
        endAddress:
          type: string
          description: Ending IP address in the range.
    IpRanges:
      type: object
      description: List of IpRange
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/IpRange'
    LdapConnectionTestResult:
      type: object
      description: Provides LDAP connection test results
      properties:
        successful:
          type: boolean
          description: Flag for whether connection test was successful
        error:
          $ref: '#/components/schemas/Error'
      required:
        - successful
    LdapGroupAttributesType:
      type: object
      description: Defines how a group is imported from LDAP.
      properties:
        objectClass:
          type: string
        objectIdentifier:
          type: string
        groupName:
          type: string
        membership:
          type: string
        membershipIdentifier:
          type: string
        backLinkIdentifier:
          type: string
    LdapSettings:
      type: object
      description: LDAP Settings Specification
      properties:
        hostName:
          type: string
        port:
          type: integer
        isSsl:
          type: boolean
        isSslAcceptAll:
          type: boolean
        realm:
          type: string
        pagedSearchDisabled:
          type: boolean
        pageSize:
          type: integer
        maxResults:
          type: integer
        maxUserGroups:
          type: integer
        searchBase:
          type: string
        userName:
          type: string
        password:
          type: string
        authenticationMechanism:
          type: string
          enum:
            - SIMPLE
            - KERBEROS
            - M5DIGEST
            - NTLM
        groupSearchBase:
          type: string
        isGroupSearchBaseEnabled:
          type: boolean
        connectorType:
          type: string
          enum:
            - ACTIVE_DIRECTORY
            - OPEN_LDAP
        userAttributes:
          $ref: '#/components/schemas/LdapUserAttributesType'
        groupAttributes:
          $ref: '#/components/schemas/LdapGroupAttributesType'
        useExternalKerberos:
          type: boolean
    LdapSettingsTestResult:
      type: object
      description: Provides test attribute, result, and success boolean
      properties:
        attribute:
          type: string
          description: LDAP attribute being tested
          enum:
            - USER_OBJECT_IDENTIFIER
            - USERNAME
            - USER_EMAIL
            - USER_DISPLAY_NAME
            - USER_GIVEN_NAME
            - USER_SURNAME
            - USER_TELEPHONE
            - GROUP_NAME
            - GROUP_OBJECT_IDENTIFIER
        attributeValue:
          type: string
          description: Value of LDAP user attribute being tested
        result:
          type: string
          description: Result of LADP user attribute being tested (what LDAP server
            returned)
        successful:
          type: boolean
          description: Flag to indicate if the attribute is successful or not
      required:
        - successful
    LdapTestResult:
      type: object
      description: Provides LDAP connection and settings test results
      properties:
        connectionTest:
          $ref: '#/components/schemas/LdapConnectionTestResult'
        settingsTest:
          type: array
          items:
            $ref: '#/components/schemas/LdapSettingsTestResult'
    LdapUserAttributesType:
      type: object
      description: Defines how LDAP attributes are used when importing a user.
      properties:
        objectClass:
          type: string
        objectIdentifier:
          type: string
        userName:
          type: string
        email:
          type: string
        fullName:
          type: string
        givenName:
          type: string
        surname:
          type: string
        telephone:
          type: string
        groupMembershipIdentifier:
          type: string
        groupBackLinkIdentifier:
          type: string
    Link:
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/WsAttribute'
        href:
          type: string
        rel:
          type: string
        type:
          type: string
        name:
          type: string
    LocalEndpoint:
      type: object
      description: This represents the endpoint/IP Address on the Edge Gateway where
        the tunnel needs to be terminated.
      properties:
        localId:
          type: string
          description: The local identifier for the endpoint.
        localAddress:
          type: string
          description: The IPV4 Address for the endpoint. This has to be a suballocated
            IP on the Edge Gateway. This is required.
        localNetworks:
          type: array
          description: List of local networks. These must be specified in normal Network
            CIDR format. Specifying no value is interpreted as 0.0.0.0/0.
          items:
            type: string
          minItems: 1
          maxItems: 128
      required:
        - localAddress
        - localNetworks
    LogicalVmGroup:
      type: object
      properties:
        id:
          type: string
          description: UUID for LogicalVmGroup. This is immutable.
        description:
          type: string
          default: ''
        name:
          type: string
          description: Display name.
        namedVmGroupReferences:
          type: array
          description: List of named vm groups associated with logical vm group.
          items:
            $ref: '#/components/schemas/EntityReference'
        pvdcId:
          type: string
          description: URN for Provider vDC.
      required:
        - name
    NatRuleType:
      type: string
      description: The Nat Rule Type for a given NAT rule.
      enum:
        - DNAT
        - SNAT
    Network:
      type: object
      description: A network Object.
      properties:
        id:
          type: string
          description: The unique ID for the network. This field is read-only.
        name:
          type: string
          description: The name of the network.
        description:
          type: string
          description: The description of the network.
        subnets:
          $ref: '#/components/schemas/Subnets'
          description: List of subnets configured for the network.
    NetworkPoolBacking:
      type: object
      description: 'Describes the backing information for a network pool. A network
        pool is backed by

        vSphere network resources such as VLAN Ids, portgroups, Transport Zones, etc.'
      properties:
        vlanIdRanges:
          $ref: '#/components/schemas/VlanIdRanges'
          description: 'The range of backing VLAN Id''s. This information is available

            only for VLAN backed network pools.'
        vdsRefs:
          type: array
          description: 'The information about virtual distributed switches. This information
            is

            available only for VLAN, VXLAN and Universal VXLAN backed network pools.'
          items:
            $ref: '#/components/schemas/BackingRef'
        portGroupRefs:
          type: array
          description: 'All the vSphere port groups that will be used by this network
            pool. This information is

            available only for Portgroup backed network pools.'
          items:
            $ref: '#/components/schemas/BackingRef'
        transportZoneRef:
          $ref: '#/components/schemas/BackingRef'
          description: The Id of the backing transport zone in NSX.
        providerRef:
          $ref: '#/components/schemas/EntityReference'
          description: The Id of vCenter server or the NSX-T manager that owns this
            backing entity.
    NetworkPoolBackingType:
      type: string
      description: Represents the network pool's backing type.
      enum:
        - VLAN
        - VXLAN
        - GENEVE
        - PORTGROUP_BACKED
        - UNIVERSAL_VXLAN
        - UNKNOWN
    NetworkProviderContext:
      type: object
      description: Describes the network provider context of the network object.
      properties:
        orgRef:
          $ref: '#/components/schemas/EntityReference'
          description: The organization that this object belongs to. This property
            is required during creation and cannot be updated.
        contextEntityId:
          type: string
          description: 'The context under which this object is created. The context
            can the id of either the organization vDC or the network provider.

            This field is required on object creation and is unset on object reads.
            This same context ID can be used in the context filter field

            when querying for the list of objects.'
        networkProviderScope:
          type: string
          description: The network provider scope that this object belongs to. This
            is a read-only property and is determined by the input context entity
            ID during object creation.
    NetworkingObjectStatus:
      type: object
      description: Represents status of a networking entity.
      properties:
        status:
          $ref: '#/components/schemas/NetworkingObjectStatusType'
          description: Represents current status of the networking object.
    NetworkingObjectStatusType:
      type: string
      description: 'Represents status type of a networking entity. This value will
        be PENDING if the entity is waiting to be realized,

        CONFIGURING if the entity realization is currently in-progress, REALIZED if
        the entity is fully realized successfully,

        or REALIZED_FAILED if the realization has failed such as failure to create
        the entity.'
      enum:
        - PENDING
        - CONFIGURING
        - REALIZED
        - REALIZATION_FAILED
    NsxTTransportZone:
      type: object
      description: 'Information about a configured transport zone on an NSX-T manager.

        NSX uses transport zones to provide connectivity between hypervisors.'
      properties:
        id:
          type: string
          description: The unique id of the transport zone on the NSX-T manager.
        name:
          type: string
          description: Name of Transport Zone in NSX-T Manager.
        type:
          $ref: '#/components/schemas/NsxTTransportZoneType'
          description: Type of a transport zone.
    NsxTTransportZoneType:
      type: string
      description: Represents an NSX-T transport zone's traffic type.
      enum:
        - GENEVE
    NsxTTransportZones:
      type: object
      description: List of transport zones configured on an NSX-T manager.
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/NsxTTransportZone'
    NsxVTransportZone:
      type: object
      description: 'Information about a configured transport zone on an NSX-V manager.

        NSX uses transport zones to provide connectivity between hypervisors.'
      properties:
        id:
          type: string
          description: The unique id of the transport zone on the NSX manager.
        name:
          type: string
          description: Name of Transport Zone in NSX Manager.
        type:
          $ref: '#/components/schemas/NsxVTransportZoneType'
          description: Type of a transport zone.
    NsxVTransportZoneType:
      type: string
      description: Represents an NSX-V transport zone's traffic type.
      enum:
        - VXLAN
        - UNIVERSAL_VXLAN
    NsxVTransportZones:
      type: object
      description: List of transport zones configured on an NSX-V manager.
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/NsxVTransportZone'
    NsxtDnsForwarderZoneConfig:
      type: object
      description: Specifies the list of domains and the DNS servers that handle those
        domains.
      properties:
        id:
          type: string
          description: 'The unique id of the DNS forwarder zone. If value is unset,
            a new zone is created.

            If value is set, an update is done on the zone.'
        displayName:
          type: string
          description: User friendly name for the zone.
        dnsDomainNames:
          type: array
          description: 'List of domain names on which conditional forwarding is based.
            This field is required if the DNS Zone is

            being used for a conditional forwarder. This field will also be used for
            conditional reverse lookup.

            This field should not be set if the zone is used as default forwarder
            zone.'
          items:
            type: string
        upstreamServers:
          type: array
          description: DNS servers to which the DNS request needs to be forwarded.
          items:
            type: string
          minItems: 0
          maxItems: 3
    ObjectVersion:
      type: object
      description: 'This property describes the current version of the entity. To
        prevent clients from overwriting each other''s changes, update operations
        must include

        the version which can be obtained by issuing a GET operation. If the version
        number on an update call is missing, the operation will be rejected. This
        is only needed

        on update calls.'
      properties:
        version:
          type: integer
          description: version number for the given entity.
      required:
        - version
    OrgVdcNetworkStatus:
      type: string
      description: 'Represents status of a Org Vdc network. This value will be PENDING
        if the network has been recorded by VCD but has not been fully configured,

        CONFIGURING if the network is in transition, REALIZED if the existing state
        of the network has been fully realized, or REALIZED_FAILED if there

        was an error creating the network.'
      enum:
        - PENDING
        - CONFIGURING
        - REALIZED
        - REALIZATION_FAILED
    OverallStatus:
      type: string
      description: Overall status of the entity
      enum:
        - GRAY
        - RED
        - YELLOW
        - GREEN
    Page:
      type: object
      description: 'Collection of paging-related metadata to be included by composition
        via allOf. This type

        should be included in pageable responses to avoid duplicating these common
        properties. It

        is intended to be included by composition rather than inheritance. Because
        of this, it has

        no discriminator and should be embedded via allOf. See QueryResults for a
        reference usage.'
      properties:
        resultTotal:
          type: integer
          description: How many results there are in total (i.e., considering all
            pages).
        pageCount:
          type: integer
          description: How many pages there are in total.
        page:
          type: integer
          description: The page that was fetched, 1-indexed.
        pageSize:
          type: integer
          description: Result count for page that was fetched.
        associations:
          type: array
          description: Association info for each result.
          items:
            $ref: '#/components/schemas/Association'
    Parameter:
      type: object
      properties:
        inputType:
          type: string
      required:
        - inputType
      discriminator: inputType
    ParameterTypes:
      type: object
      properties:
        sdkObject:
          $ref: '#/components/schemas/SdkObject'
        string:
          $ref: '#/components/schemas/StringParam'
        secureString:
          $ref: '#/components/schemas/SecureString'
        number:
          $ref: '#/components/schemas/NumberParam'
        mimeAttachment:
          $ref: '#/components/schemas/MimeAttachment'
        properties:
          $ref: '#/components/schemas/Properties'
        date:
          $ref: '#/components/schemas/DateParam'
        boolean:
          $ref: '#/components/schemas/BooleanParam'
        composite:
          $ref: '#/components/schemas/CompositeType'
        regex:
          $ref: '#/components/schemas/Regex'
        encryptedString:
          $ref: '#/components/schemas/EncryptedString'
        keyValuePair:
          $ref: '#/components/schemas/KeyValuePair'
        compositeValue:
          $ref: '#/components/schemas/CompositeValue'
        array:
          $ref: '#/components/schemas/ArrayParam'
    ParticipatingVdcReference:
      type: object
      description: A participating vDC
      properties:
        vdcRef:
          $ref: '#/components/schemas/EntityReference'
          description: The reference to the vDC that is part of this a vDC group.
        orgRef:
          $ref: '#/components/schemas/EntityReference'
          description: Read-only field that specifies what organization this vDC is
            in.
        siteRef:
          $ref: '#/components/schemas/EntityReference'
          description: The site ID that this vDC belongs to.
        networkProviderScope:
          type: string
          description: Read-only field that specifies the network provider scope of
            the vDC.
        remoteOrg:
          type: boolean
          description: Read-only field that specifies whether the vDC is local to
            this VCD cell cluster.
        status:
          $ref: '#/components/schemas/VdcGroupEntityStatus'
          description: The status that the vDC can be in. An example is if the vDC
            has been deleted from the system but is still part of the group.
      required:
        - siteRef
        - vdcRef
    PortGroup:
      type: object
      description: Standard portgroup.
      properties:
        backingRef:
          $ref: '#/components/schemas/BackingRef'
          description: Contains the backing id and name of the standard portgroup.
        virtualCenter:
          $ref: '#/components/schemas/EntityReference'
          description: The entity reference for the vCenter that contains this portgroup.
    Preference:
      type: object
      properties:
        classifier:
          type: string
          description: 'unique indetifier for this preference definition. It will
            be of type <scope>:<name>.

            e.g vrops:myworkflow. This is immutable'
        name:
          type: string
          description: Display name. This is same as preference definition name and
            is immutable.
        value:
          type: string
      required:
        - classifier
        - name
        - value
    PreferenceDefinition:
      type: object
      description: The Preference Definition is immutable.
      properties:
        id:
          type: string
          description: UUID for preference definition. This is immutable.
        name:
          type: string
          description: Display name.
        description:
          type: string
          description: Description for user preference
          default: ''
        classifier:
          type: string
          description: 'unique indetifier for this preference definition. It should
            be of type <scope>:<name>.

            e.g vrops:myworkflow. This is immutable.'
        dataType:
          type: string
          description: user preference value data type. This is immutable.
          enum:
            - BOOLEAN
            - INTEGER
            - STRING
        constrained:
          type: boolean
          description: true if user preference is selected from list of values (dataType
            should be number or string), false otherwise. This is immutable.
        minValue:
          type: number
          description: minimum value for user preference. Only valid if user preference
            type is number. This is immutable.
        maxValue:
          type: number
          description: maximum value for user preference. Only valid if user preference
            type is number. This is immutable.
        defaultValue:
          type: string
        allowedValues:
          type: array
          description: array of allowed values to select from when constrained is
            true.. This is immutable after creation.
          items:
            type: string
      required:
        - classifier
        - constrained
        - dataType
        - defaultValue
        - name
    Presentation:
      type: object
      properties:
        description:
          type: string
        id:
          type: string
        vroId:
          type: string
        inputParameters:
          type: array
          items:
            $ref: '#/components/schemas/WsParameter'
        name:
          type: string
        outputParameters:
          type: array
          items:
            $ref: '#/components/schemas/WsParameter'
        steps:
          type: array
          items:
            $ref: '#/components/schemas/StepInfo'
    PresentationElement:
      type: object
      properties:
        elementType:
          type: string
        description:
          type: string
        displayName:
          type: string
        hidden:
          type: boolean
        id:
          type: string
        messages:
          type: array
          items:
            $ref: '#/components/schemas/PresentationMessageInfo'
      required:
        - elementType
      discriminator: elementType
    PresentationExecution:
      type: object
      properties:
        description:
          type: string
        id:
          type: string
        name:
          type: string
        objectId:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/WsParameter'
        startDate:
          type: string
          format: date-time
        startedBy:
          type: string
        steps:
          type: array
          items:
            $ref: '#/components/schemas/StepInfo'
        valid:
          type: boolean
    PresentationExecutionsList:
      type: object
      properties:
        total:
          type: integer
          format: int32
        executions:
          type: array
          items:
            $ref: '#/components/schemas/ExecutionSummary'
        start:
          type: integer
          format: int32
    PresentationMessageInfo:
      type: object
      properties:
        code:
          type: string
        details:
          type: string
        severity:
          type: string
          enum:
            - INFO
            - WARNING
            - ERROR
        summary:
          type: string
    ProviderVdc:
      type: object
      description: A provider vdc.
      properties:
        id:
          type: string
          description: A unique identifier for the pvdc.
        name:
          type: string
          description: The name of the pvdc.
        description:
          type: string
          description: The description of the pvdc.
        isEnabled:
          type: boolean
          description: Whether the pvdc is enabled or not.
        maxSupportedHwVersion:
          type: string
          description: The maximum hardware version this pvdc supports.
        nsxTManager:
          $ref: '#/components/schemas/EntityReference'
          description: The NSX-T manager of the pvdc, if any.
        vimServer:
          $ref: '#/components/schemas/EntityReference'
          description: The vCenter server the pvdc belongs to.
    Proxy:
      type: object
      description: proxy configuration. This configures the vCD proxying capability
        for one specific server within the vSphere/NSX/ESX estate known to vCD.
      properties:
        name:
          type: string
          examples:
            - Proxy Sample Name
          pattern: .*[\S].*
        id:
          type: string
        parentId:
          type: string
          description: URN of the parent VSPHERE. This is not editable once the proxy
            has been created.
          examples:
            - urn:vcloud:vimserver:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        enabled:
          type: boolean
          description: 'True if the proxy is enabled. Proxy can only be enabled/disabled
            by privileged users.

            A disabled proxy cannot be activated and thus, cannot be used.

            When a proxy is disabled, all active sessions are terminated.'
          default: true
        tenantVisible:
          type: boolean
          description: Whether this proxy has been published to tenants.
          default: false
        targetHost:
          type: string
          description: IP address or FQDN of the host being proxied. This is not editable
            once the proxy has been created.
          examples:
            - sampleVc.vmware.com
        active:
          type: boolean
          description: 'True if the proxy is currently active for the user session
            associated with the

            request made to get the proxy. An inactive proxy cannot be used.'
          default: false
        token:
          type: string
          description: 'The generated read-only token that should be used as the password
            when using this proxy.

            To generate a new token, activate the proxy. The token is tied to the
            user session that activated the proxy.

            If the proxy is inactive, this value will be null.'
        defaultProxy:
          type: boolean
          description: 'True if this is the default proxy for the parent VSPHERE.
            A proxy being the default for the

            VSPHERE means that this proxy''s UI will be launched when the VSPHERE
            tile is clicked in the

            H5 Tenant UI of VCD. If no default proxy is set, clicking the VSPHERE
            tile will be a no-op.'
          default: false
        parentProxyId:
          type: string
          description: 'The URN of the parent proxy. If a proxy has a parent, the
            proxy is activated along with

            its parent and shares the token with its parent. Each proxy may only have
            one parent.

            A parent proxy cannot have a parent of its own.'
          examples:
            - urn:vcloud:proxy:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        uiUrl:
          type: string
          format: uri
          description: "The URL of the proxied component's UI endpoint. This is the\
            \ URL that the browser tab\n will be pointed to when the proxy is launched\
            \ via the H5 UI of VCD."
          examples:
            - https://sampleVc.vmware.com
          default: ''
        proxyType:
          type: string
          enum:
            - VC
            - SSO
            - NSX
            - ESX
            - GENERIC
      required:
        - name
        - parentId
        - targetHost
    PvdcComputePolicy:
      type: object
      properties:
        id:
          type: string
          description: UUID for pVDC compute policy. This is immutable.
        name:
          type: string
          description: Display name.
          minLength: 1
          maxLength: 128
        description:
          type: string
          default: ''
          minLength: 1
          maxLength: 256
        pvdcId:
          type: string
          description: URN for Provider VDC.
        namedVmGroupReferences:
          type: array
          description: 'This field cannot be updated and is a read-only field in the
            client after creation.

            Deprecated in Api 33.0, this property will be removed in future release.'
          items:
            $ref: '#/components/schemas/EntityReference'
        namedVmGroups:
          type: array
          description: 'List of list of vmGroups grouped together in a meaningful
            manner.

            A group of vmGroups would consist of one functionally equal vmGroup picked
            from each cluster of the pvdc.'
          items:
            type: string
        logicalVmGroupReferences:
          type: array
          description: This field cannot be updated and is a read-only field after
            creation.
          items:
            $ref: '#/components/schemas/EntityReference'
      required:
        - name
        - pvdcId
    Relations:
      type: object
      properties:
        total:
          type: integer
          format: int32
        link:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        start:
          type: integer
          format: int32
    RemoteEndpoint:
      type: object
      description: This represents the remote endpoint i.e. the endpoint which the
        tunnel from the Edge Gateway will connect to.
      properties:
        remoteId:
          type: string
          description: 'This Remote ID is needed to uniquely identify the peer site.
            The Remote ID is the public IP Address of the remote device terminating
            the VPN Tunnel.

            When NAT is configured on the Remote ID, enter the private IP Address
            of the Remote Site. If remote ID is not set, VCD will set the remote Id
            to the

            remote address.'
        remoteAddress:
          type: string
          description: IPV4 Address of the remote endpoint on the remote site. This
            is the Public IPv4 Address of the remote device terminating the VPN connection.
        remoteNetworks:
          type: array
          description: List of remote networks. These must be specified in normal
            Network CIDR format. Specifying no value is interpreted as 0.0.0.0/0
          items:
            type: string
          minItems: 0
          maxItems: 128
      required:
        - remoteAddress
    ResourcePool:
      type: object
      description: A vCenter Resource Pool.
      properties:
        moref:
          type: string
          description: The vCenter Id of the Resource Pool. It must be in the format
            (resgroup-#).
        name:
          type: string
          description: The name of the Resource Pool.
        vcId:
          type: string
          description: The vCenter the Resource Pool belongs to.
        eligible:
          type: boolean
          description: 'Used in resource pool tree navigation.

            Indicates whether the resource pool is eligible or not.'
    Right:
      type: object
      description: Right
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 128
        id:
          type: string
          maxLength: 128
        description:
          type: string
          minLength: 1
          maxLength: 256
        bundleKey:
          type: string
          minLength: 1
          maxLength: 128
        category:
          type: string
          minLength: 1
          maxLength: 128
        serviceNamespace:
          type: string
          minLength: 1
          maxLength: 128
        rightType:
          type: string
          enum:
            - VIEW
            - MODIFY
        impliedRights:
          type: array
          description: The set of implied rights.
          items:
            $ref: '#/components/schemas/EntityReference'
      required:
        - name
    RightsCategoryNode:
      type: object
      description: RightsCategoryNode
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 128
        id:
          type: string
        bundleKey:
          type: string
          minLength: 1
          maxLength: 128
        parent:
          type: string
        rightsCount:
          $ref: '#/components/schemas/RightsCount'
        subCategories:
          type: array
          items:
            type: string
      required:
        - bundleKey
        - name
    RightsCount:
      type: object
      description: RightsCount - A count of rights in a given category by type
      properties:
        view:
          type: integer
        modify:
          type: integer
    RightsMapping:
      type: object
      description: RightsMapping
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 128
        id:
          type: string
          maxLength: 128
        description:
          type: string
          minLength: 1
          maxLength: 256
        bundleKey:
          type: string
          minLength: 1
          maxLength: 128
        readOnly:
          type: boolean
      required:
        - description
        - name
    RouterComponentHealth:
      type: object
      description: A ComponentHealth object
      properties:
        component:
          type: string
        status:
          $ref: '#/components/schemas/RouterComponentStatus'
        message:
          type: string
        action:
          type: string
        code:
          type: integer
    RouterComponentStatus:
      type: string
      description: Status of a router component.
      enum:
        - UP
        - DOWN
    RouterConnection:
      type: object
      description: Describes the connection between a routed network and an edge gateway.
        This must be set if converting from an isolated to a routed network.
      properties:
        routerRef:
          $ref: '#/components/schemas/EntityReference'
          description: The edge gateway that this network is attached to.
        connectionType:
          $ref: '#/components/schemas/VdcNetworkConnectionType'
          description: How the network is connected to the edge gateway. This field
            is updatable to allow conversions between different types.
        connected:
          type: boolean
          description: Whether network is marked as connected in NSX.
          default: true
    RouterDnsConfig:
      type: object
      description: A RouterDnsConfig object
      properties:
        enabled:
          type: boolean
        nameServers:
          type: array
          items:
            type: string
    RouterHealthReport:
      type: object
      description: Health Report of a Router
      properties:
        nsxManagersHealth:
          type: array
          description: Status of all the nsx managers spanned by the universal router.
          items:
            $ref: '#/components/schemas/RouterComponentHealth'
        controlVmHealth:
          type: array
          description: 'Status of all the universal router control VMs within each
            network provider scope.

            This also includes status of egress points and routes configured for the
            universal router.'
          items:
            $ref: '#/components/schemas/RouterComponentHealth'
        controlPlaneHealth:
          $ref: '#/components/schemas/RouterComponentHealth'
          description: Status of the nsx controller cluster associated with the nsx
            managers.
        vdcReachabilityStatus:
          type: array
          description: 'Reachability status for local and remote participating vDC''s
            of referenced vDC group.

            States whether a vDC is reachable from this local site.'
          items:
            $ref: '#/components/schemas/RouterComponentHealth'
    Sddc:
      type: object
      description: Software-defined data center
      properties:
        name:
          type: string
          examples:
            - SDDC Sample Name
        id:
          type: string
        description:
          type: string
          examples:
            - SDDC Sample Description
          default: ''
        enabled:
          type: boolean
          default: false
        vcId:
          type: string
          description: URN of the associated vCenter. This is not editable once the
            SDDC has been created.
          examples:
            - urn:vcloud:vimserver:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        version:
          type: string
          description: Version of the associated vCenter. This is not editable.
          examples:
            - 6.7.0
        overallStatus:
          $ref: '#/components/schemas/OverallStatus'
          description: Overall status of the associated vCenter. This is not editable.
        stats:
          $ref: '#/components/schemas/SddcStats'
          description: Associated read-only statistics.
        defaultProxy:
          $ref: '#/components/schemas/SddcProxy'
          description: 'Default proxy for the SDDC. This field is read-only. To set
            a new default, edit the proxy

            you wish to make the new default by modifying its defaultProxy flag.'
        defaultEndpoint:
          $ref: '#/components/schemas/SddcEndpoint'
          description: 'Default endpoint for the SDDC. There is an endpoint available
            for an SDDC even if there are

            no proxies configured for the SDDC. This indicates that an endpoint is
            available that doesn''t

            require proxying, either because it is publicly accessible or because
            it assumes an established

            VPM connection. The field is read-only.'
      required:
        - name
        - vcId
    SddcEndpoint:
      type: object
      description: An available network connections exposed by the SDDC
      properties:
        endpoint:
          type: string
          format: uri
          description: A network endpoint that the SDDC exposes for communication
        proxyId:
          type: string
          description: An optional identifier to an SDDC proxy that can be used to
            establish a connection to the endpoint
    SddcProxy:
      type: object
      description: SDDC proxy configuration
      properties:
        name:
          type: string
          examples:
            - SDDC Proxy Sample Name
          pattern: .*[\S].*
        id:
          type: string
        sddcId:
          type: string
          description: URN of the parent SDDC. This is not editable once the proxy
            has been created.
          examples:
            - urn:vcloud:sddc:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        enabled:
          type: boolean
          description: 'True if the proxy is enabled. Proxy can only be enabled/disabled
            by privileged users.

            A disabled proxy cannot be activated and thus, cannot be used.

            When a proxy is disabled, all active sessions are terminated.'
          default: true
        tenantVisible:
          type: boolean
          description: Whether this proxy has been published to tenants.
          default: false
        targetHost:
          type: string
          description: IP address or FQDN of the host being proxied. This is not editable
            once the proxy has been created.
          examples:
            - sampleVc.vmware.com
        active:
          type: boolean
          description: 'True if the proxy is currently active for the user session
            associated with the

            request made to get the proxy. An inactive proxy cannot be used.'
          default: false
        token:
          type: string
          description: 'The generated read-only token that should be used as the password
            when using this proxy.

            To generate a new token, activate the proxy. The token is tied to the
            user session that activated the proxy.

            If the proxy is inactive, this value will be null.'
        defaultProxy:
          type: boolean
          description: 'True if this is the default proxy for the parent SDDC. A proxy
            being the default for the

            SDDC means that this proxy''s UI will be launched when the SDDC tile is
            clicked in the

            H5 Tenant UI of VCD. If no default proxy is set, clicking the SDDC tile
            will be a no-op.'
          default: false
        parentProxyId:
          type: string
          description: 'The URN of the parent proxy. If a proxy has a parent, the
            proxy is activated along with

            its parent and shares the token with its parent. Each proxy may only have
            one parent.

            A parent proxy cannot have a parent of its own.'
          examples:
            - urn:vcloud:sddcProxy:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        uiUrl:
          type: string
          format: uri
          description: "The URL of the proxied component's UI endpoint. This is the\
            \ URL that the browser tab\n will be pointed to when the proxy is launched\
            \ via the H5 UI of VCD."
          examples:
            - https://sampleVc.vmware.com
          default: ''
      required:
        - name
        - sddcId
        - targetHost
    SddcStat:
      type: object
      description: A collection of measurements for the SDDC resource
      properties:
        numTotal:
          type: integer
          format: int64
          description: Total resource allocation.
          minimum: 0
        numUsed:
          type: integer
          format: int64
          description: Used resource allocation.
          minimum: 0
        numReserved:
          type: integer
          format: int64
          description: Reserved resource allocation.
          minimum: 0
    SddcStats:
      type: object
      description: A read-only list of resource allocations for the associated SDDC
      properties:
        totalVMs:
          type: integer
          description: Number of VMs within the SDDC.
        poweredOnVMs:
          type: integer
          description: Number of powered on VMs within the SDDC.
        cpu:
          $ref: '#/components/schemas/SddcStat'
          description: CPUs statistics of the SDDC (values in MHz).
        memory:
          $ref: '#/components/schemas/SddcStat'
          description: Memory statistics of the SDDC (values in MB).
        storage:
          $ref: '#/components/schemas/SddcStat'
          description: Storage statistics of the SDDC (values in MB).
    Service:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          default: ''
        iconMimeType:
          type: string
        iconData:
          type: string
        id:
          type: string
    ServiceApp:
      type: object
      description: A VMware service application
      properties:
        id:
          type: string
          description: The unique ID for the service application. This field is read-only.
        name:
          type: string
          description: The name of the service application
        clientId:
          type: string
          description: The client ID
        clientSecret:
          type: string
          description: The client secret
        orgId:
          type: string
          description: The external organization id of the service application
        serviceScope:
          $ref: '#/components/schemas/ServiceAppScope'
          description: The scope of the service application
        accessTokenTTL:
          type: integer
          description: The read-only time-to-live of the access token in seconds.
        accessTokenExpiration:
          type: string
          format: date-time
          description: The read-only expiration date of the access token.
        enabled:
          type: boolean
          description: Whether the application is currently enabled.
          default: true
      required:
        - clientId
        - clientSecret
        - name
        - serviceScope
    ServiceAppScope:
      type: string
      description: 'Describes the type of service application.

        VMC_REFRESH_TOKEN: The application authtenticates to VMC via a refresh token

        VMC_CLIENT_CREDENTIAL: The application authenticates to VMC using client credentials

        VMC: Deprecated. Defaults to VMC_REFRESH_TOKEN.'
      enum:
        - VMC
        - VMC_REFRESH_TOKEN
        - VMC_CLIENT_CREDENTIAL
    ServiceItem:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        serviceItemType:
          type: string
        description:
          type: string
        canExecute:
          type: boolean
        serviceName:
          type: string
        serviceId:
          type: string
        iconMimeType:
          type: string
        iconData:
          type: string
        tenantScoped:
          type: boolean
          default: true
        providerScoped:
          type: boolean
          default: true
        publishAll:
          type: boolean
          description: Read-only value indicating publishAll state
          default: false
      required:
        - serviceItemType
      discriminator: serviceItemType
    Session:
      type: object
      description: Session
      properties:
        id:
          type: string
          maxLength: 128
        user:
          $ref: '#/components/schemas/EntityReference'
        org:
          $ref: '#/components/schemas/EntityReference'
        location:
          type: string
        roles:
          type: array
          items:
            type: string
    SmtpServerSpec:
      type: object
      description: Represent the settings of an SMTP Server which the system uses
        to send email notifications and alerts
      properties:
        useAuthentication:
          type: boolean
          description: 'A flag to indicate if the SMTP requires login authentication.
            If this

            flag is set to true, caller must provide user name and password'
        secureMode:
          type: string
          description: Security mode used to connect to the SMTP server
          enum:
            - NONE
            - START_TLS
            - SSL
        url:
          $ref: '#/components/schemas/Url'
        sslTrustStore:
          type: string
          description: The custom ssl trust certs if ssl is enabled
        userName:
          type: string
          description: Username to login to server
        password:
          type: string
          description: Password to login to the server
        description:
          type: string
          description: A human readable description of the entity
        name:
          type: string
          description: A human readable name of the entity
    StorageProfile:
      type: object
      description: A Storage Profile.
      properties:
        moref:
          type: string
          description: The Moref of the Storage Profile.
        name:
          type: string
          description: The name of the Storage Profile.
    Subnet:
      type: object
      description: A network subnet defined by its gateway,
      properties:
        gateway:
          type: string
          description: The gateway for the subnet.
        prefixLength:
          type: integer
          description: The prefix length of the subnet.
        dnsSuffix:
          type: string
          description: The DNS suffix that VMs attached to this network will use.
        dnsServer1:
          type: string
          description: The first DNS server that VMs attached to this network will
            use.
        dnsServer2:
          type: string
          description: The second DNS server that VMs attached to this network will
            use.
        ipRanges:
          $ref: '#/components/schemas/IpRanges'
          description: Range of IPs within the subnet that can be used in this network.
            A VM attached to this network is assigned one of these IPs.
        enabled:
          type: boolean
          description: Indicates whether the external network subnet is currently
            enabled.
          default: true
        totalIpCount:
          type: integer
          description: The number of IP addresses defined by the static IP ranges.
        usedIpCount:
          type: integer
          description: The number of IP address used from the static IP ranges.
      required:
        - gateway
        - prefixLength
    Subnets:
      type: object
      description: List of Subnets of a network
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/Subnet'
    SupportedConstraints:
      type: object
      properties:
        constraint:
          $ref: '#/components/schemas/Constraint'
        mandatory:
          $ref: '#/components/schemas/Mandatory'
        restrictDuplicates:
          $ref: '#/components/schemas/RestrictDuplicates'
        customValidator:
          $ref: '#/components/schemas/CustomValidator'
        numberRange:
          $ref: '#/components/schemas/NumberRange'
        regexp:
          $ref: '#/components/schemas/Regexp'
        numberFormat:
          $ref: '#/components/schemas/NumberFormat'
    SupportedDecorators:
      type: object
      properties:
        decorator:
          $ref: '#/components/schemas/Decorator'
        refreshOnChange:
          $ref: '#/components/schemas/RefreshOnChange'
        multiLine:
          $ref: '#/components/schemas/MultiLine'
        chooser:
          $ref: '#/components/schemas/Chooser'
        dropDown:
          $ref: '#/components/schemas/DropDown'
    SupportedPresentationElements:
      type: object
      properties:
        presentationElement:
          $ref: '#/components/schemas/PresentationElement'
        stepInfo:
          $ref: '#/components/schemas/StepInfo'
        group:
          $ref: '#/components/schemas/Group'
        field:
          $ref: '#/components/schemas/Field'
        primaryField:
          $ref: '#/components/schemas/PrimaryField'
    TestEmailRequest:
      type: object
      properties:
        emailSettings:
          $ref: '#/components/schemas/EmailSettings'
        destination:
          type: string
    Tier0Routers:
      type: object
      description: List of NSX-T's Tier-0 routers.
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/Tier0Router'
    Token:
      type: object
      description: "Specifies a user, the user's organization, and the user assigned\
        \ token that can be used to\n access proxies as well as the expiration timestamp\
        \ of the token (in UTC). Parameters cannot\n be edited once a token is created."
      properties:
        id:
          type: string
          description: ID of this token. Sorting on this field is not supported.
        token:
          type: string
          description: User specific token that can be used to access proxies. Sorting
            on this field is not supported.
        expirationTimeUtc:
          type: string
          format: date-time
          description: Time stamp representing when the token will expire (in UTC).
        username:
          type: string
          description: Name of the user that this token is assigned to.
        userId:
          type: string
          description: "ID of the user that this token is assigned to. Sorting on\
            \ this field is not supported.\n Can not be updated."
        orgName:
          type: string
          description: Name of the organization that the assigned user belongs to.
            Sorting and filtering on this field is not supported.
      required:
        - id
        - userId
    TunnelConfig:
      type: object
      description: This configuration captures phase two negotiation parameters and
        tunnel properties.
      properties:
        perfectForwardSecrecyEnabled:
          type: boolean
          description: If true, perfect forward secrecy is enabled. The default value
            is true.
          default: true
        dfPolicy:
          $ref: '#/components/schemas/DfPolicyType'
          description: Policy for handling degragmentation bit. The default is COPY.
        dhGroups:
          type: array
          description: The list of Diffie-Helman groups to be used is PFS is enabled.
            Default is GROUP14.
          items:
            $ref: '#/components/schemas/DhGroupType'
          minItems: 1
        digestAlgorithms:
          type: array
          description: The list of Digest algorithms to be used for message digest.
            The default digest algorithm is implictly covered by default encrpyption
            algorithm AES_GCM_128.
          items:
            $ref: '#/components/schemas/TunnelDigestAlgorithmType'
        encryptionAlgorithms:
          type: array
          description: 'The list of Encryption algorithms to use in IPSec tunnel establishment.
            Default is AES_GCM_128. NO_ENCRYPTION_AUTH_AES_GMAC_* enables authentication
            on input

            data without encryption. If one of these options is used, digest algorithm
            should be empty.'
          items:
            $ref: '#/components/schemas/TunnelEncryptionAlgorithmType'
          minItems: 1
        saLifeTime:
          type: integer
          description: The Security Association life time in seconds. Default is 3600
            seconds.
          minimum: 900
          maximum: 31536000
      required:
        - dhGroups
        - encryptionAlgorithms
    TunnelDigestAlgorithmType:
      type: string
      description: This is the algorithm used to verify message integruty during tunnel
        establishment.
      enum:
        - SHA1
        - SHA2_256
        - SHA2_384
        - SHA2_512
    TunnelEncryptionAlgorithmType:
      type: string
      description: Encryption algorithm to use in IPSec tunnel establishment.
      enum:
        - AES_128
        - AES_256
        - AES_GCM_128
        - AES_GCM_192
        - AES_GCM_256
        - NO_ENCRYPTION_AUTH_AES_GMAC_128
        - NO_ENCRYPTION_AUTH_AES_GMAC_192
        - NO_ENCRYPTION_AUTH_AES_GMAC_256
        - NO_ENCRYPTION
    TunnelSecurityType:
      type: string
      description: This indicates the security type used for the IPSec Tunnel. For
        custom settings, one should use the connectionProperties endpoint.
      enum:
        - DEFAULT
        - CUSTOM
    TunnelStatus:
      type: string
      description: 'The overall tunnel status which is consolidated using the Tunnel
        Status and IKE Status. If the tunnel is up, the status is UP. If the tunnel

        is down, the status is DOWN. The tunnel may also be in a DEGRADED state due
        to other issues.'
      enum:
        - UP
        - DOWN
        - DEGRADED
    UiBranding:
      type: object
      description: A branding object with the portal name, portal color, selected
        theme and custom URLs.
      properties:
        portalName:
          type: string
        portalColor:
          type: string
          description: 'A custom color defined by the administrator and used to theme
            the site.

            The color should be in rgb hex color format such as "FFFFFF" all capitalized.

            Can be set to an empty string to use the selected theme''s default colors.'
        selectedTheme:
          $ref: '#/components/schemas/UiTheme'
        customLinks:
          type: array
          items:
            $ref: '#/components/schemas/UiBrandingMenuItem'
      required:
        - customLinks
        - portalName
    UiBrandingMenuItem:
      type: object
      description: 'An ordered list of menu items which can be customized and used
        in the application. Can be defined as a

        link,

        override (well known links that can be overridden, Default values are About,
        Help, VMRC),

        section,

        separator(section without a name) of the drop down menu.'
      properties:
        name:
          type: string
        menuItemType:
          type: string
          enum:
            - link
            - section
            - override
            - separator
        url:
          type: string
      required:
        - menuItemType
    UiPluginMetadata:
      type: object
      description: Meta information about a UI Plugin
      properties:
        pluginName:
          type: string
        vendor:
          type: string
        description:
          type: string
        version:
          type: string
        license:
          type: string
        link:
          type: string
        tenant_scoped:
          type: boolean
        provider_scoped:
          type: boolean
        enabled:
          type: boolean
      required:
        - license
        - link
        - pluginName
        - vendor
        - version
    UiTheme:
      type: object
      description: A theme supported by vCloud Director.
      properties:
        themeType:
          type: string
        name:
          type: string
      required:
        - name
        - themeType
    UniversalEgressRoutes:
      type: object
      description: Object consisting of Egress Points and Universal Routes for a Universal
        Router.
      properties:
        egressPoints:
          $ref: '#/components/schemas/EgressPoints'
          description: The list of Egress Points for routing configuration. This is
            read-only.
        universalRoutes:
          $ref: '#/components/schemas/UniversalRoutes'
          description: The list of Universal Routes for routing configuration.
    UniversalRoute:
      type: object
      description: A Route for a Universal Router.
      properties:
        defaultEgress:
          $ref: '#/components/schemas/EgressPointReference'
          description: For a given route, routing by default will go through the default
            egress point. Every valid/configured route will have a default egress
            point.
        standbyEgress:
          $ref: '#/components/schemas/EgressPointReference'
          description: A standby egress point can be configured for failover of routes
            in case there is an issue routign to the default egress point.
        networkProviderScope:
          type: string
          description: The network provider scope for the given route. There can only
            be one route per fault domain for a Universal Route.
        status:
          $ref: '#/components/schemas/UniversalRoutingStatus'
          description: The status of the route (whether it's realized, failed, etc.).
        errorMessage:
          type: string
      required:
        - networkProviderScope
    UniversalRouter:
      type: object
      description: A UniversalRouter object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        vdcGroupRef:
          $ref: '#/components/schemas/EntityReference'
        localEgress:
          type: boolean
        status:
          $ref: '#/components/schemas/VdcGroupEntityStatus'
        errorMessage:
          type: string
      required:
        - name
        - vdcGroupRef
    UniversalRouterDhcpConfig:
      type: object
      description: A UniversalRouterDhcpConfig object.
      properties:
        enabled:
          type: boolean
        servers:
          type: array
          items:
            $ref: '#/components/schemas/UniversalRouterDhcpServer'
    UniversalRouterDhcpServer:
      type: object
      description: 'List of Dhcp servers for universal router.

        Either egressRef or serverAddress is required to identify Dhcp server.'
      properties:
        egressRef:
          $ref: '#/components/schemas/EntityReference'
        serverAddress:
          type: string
    UniversalRouters:
      type: object
      description: List of Universal Routers
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/UniversalRouter'
    UniversalRoutes:
      type: object
      description: List of routes associated with a Universal Router.
      properties:
        keepAliveTimer:
          type: integer
          description: The Keep Alive Timer is the frequency (in seconds) at which
            the Universal Router seeds Keep Alive messages to its egress peers.
        values:
          type: array
          description: The list of Universal Routes.
          items:
            $ref: '#/components/schemas/UniversalRoute'
        providerScopesToForceUnconfigure:
          type: array
          description: 'The list network provider scopes whose route will be unconfigure
            forcefully. This means that a route that is in state that normally shouldn''t
            be

            unconfigurable (i.e. NSX or remote vCD site is down) will still be unconfigured.
            Errors may be ignored. Note that this force option also affects any route

            update where a network provider''s egress point is modified/changed. vCD
            will first unconfigure any existing egress point before configuring the
            new egress

            point.'
          items:
            type: string
    UniversalRoutingStatus:
      type: string
      description: Represents status of given routing configuration, such as realized,
        universal router routing configuration failed, egress routing configuration
        failed, etc.
      enum:
        - SAVING
        - SAVED
        - CONFIGURING
        - REALIZED
        - REALIZATION_FAILED
        - CONFIGURATION_FAILED_UNIVERSAL_ROUTER
        - CONFIGURATION_FAILED_UNIVERSAL_EGRESS_POINT
        - UNCONFIGURED
        - DELETING
        - DELETION_FAILED_UNIVERSAL_ROUTER
        - DELETION_FAILED_UNIVERSAL_EGRESS_POINT
    UploadMetadataResponse:
      allOf:
        - type: object
          properties:
            id:
              type: string
            plugin_status:
              type: string
              enum:
                - unavailable
                - ready
            resourcePath:
              type: string
      description: Description of an upload (in progress or complete)
    UploadSpec:
      type: object
      description: Information about upload
      properties:
        fileName:
          type: string
        size:
          type: integer
          format: int64
        checksum:
          type: string
        checksumAlgo:
          type: string
          enum:
            - sha1
            - sha256
          default: sha1
      required:
        - fileName
        - size
    Url:
      type: object
      properties:
        host:
          type: string
        port:
          type: integer
          minimum: 0
          maximum: 65535
        ssl:
          type: boolean
    UsedIpAddress:
      type: object
      description: Describes a used IP address for a network.
      properties:
        entityId:
          type: string
          description: Id of the entity using the IP address, such as a VM.
        entityName:
          type: string
          description: Name of the entity using the IP address.
        vAppName:
          type: string
          description: Name of the vApp whose VM is using this IP address.
        ipAddress:
          type: string
          description: The IP address in use.
        deployed:
          type: boolean
          description: Whether the entity using this IP address is currently deployed.
        allocationType:
          $ref: '#/components/schemas/UsedIpAddressAllocationType'
          description: The possible allocation types for network address like VSM
            allocated, VM allocated or NAT routed.
        networkRef:
          $ref: '#/components/schemas/EntityReference'
          description: The vApp network or Org vDC network to which this entity is
            connected.
        orgRef:
          $ref: '#/components/schemas/EntityReference'
          description: The organization that this entity belongs to.
    UsedIpAddressAllocationType:
      type: string
      description: 'The possible allocation types for allocated network IP address.

        VM_ALLOCATED means that the IP address is used by a VM,

        EDGE means that the IP address is in use by an NSX edge gateway interface.'
      enum:
        - VM_ALLOCATED
        - EDGE
    User:
      type: object
      description: User Spec object
      properties:
        username:
          type: string
        description:
          type: string
        orgEntityRef:
          $ref: '#/components/schemas/EntityReference'
        fullname:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        im:
          type: string
        external:
          type: boolean
        nameInSource:
          type: string
        sourceEntityRef:
          $ref: '#/components/schemas/EntityReference'
        enabled:
          type: boolean
        locked:
          type: boolean
        alertEmailPrefix:
          type: string
        alertEmail:
          type: string
        roleEntityRef:
          $ref: '#/components/schemas/EntityReference'
        roleInherited:
          type: boolean
        delayAfterPowerOnSeconds:
          type: integer
        storedVMQuota:
          type: integer
        deployedVMQuota:
          type: integer
        inSync:
          type: boolean
    UserGroup:
      type: object
      description: Group Spec object
      properties:
        name:
          type: string
        description:
          type: string
        orgEntityRef:
          $ref: '#/components/schemas/EntityReference'
        sourceEntityRef:
          $ref: '#/components/schemas/EntityReference'
        roleEntityRef:
          $ref: '#/components/schemas/EntityReference'
        nameInSource:
          type: string
        providerType:
          type: string
          enum:
            - UNKNOWN
            - INTEGRATED
            - SAML
            - OAUTH
    VROServiceInfo:
      type: object
      description: Response type with meta information about a vRealize Orchestrator
        Service
      properties:
        id:
          type: string
          description: This is a read-only field in the client. Values set on this
            field will be ignored by the server.
        name:
          type: string
        description:
          type: string
        vroEndpoint:
          type: string
          format: uri
        username:
          type: string
        password:
          type: string
          description: 'The password is hidden using a Password Mask represented by
            a series of 6 asterisks ("******") in the response.

            The Password Mask is not an acceptable password during VRO Server registration.

            During an update, the Password Mask set for the ''password'' field is
            interpreted as no change to the field and is ignored.'
        version:
          type: string
        trustAnchor:
          type: string
          description: SSL Certificate chain for the VRO endpoint
    VdcComputePolicy:
      type: object
      properties:
        id:
          type: string
          description: UUID for vDC compute policy. This is immutable.
        description:
          type: string
          default: A vDC compute policy.
          minLength: 1
          maxLength: 256
        name:
          type: string
          description: Display name.
          minLength: 1
          maxLength: 128
        cpuSpeed:
          type: integer
          format: int64
          description: 'The CPU speed in MHz of this VM. This is optional. When provided,

            VMs with this policy cannot have more than CPU speed defined by this field.'
        memory:
          type: integer
          format: int64
          description: 'The maximum memory in MB allowed for a VM. This is optional.
            When provided, VMs with

            this policy cannot have configured memory more than defined by this field.'
        cpuCount:
          type: integer
          format: int32
          description: 'The maximum number of CPUs allowed for a VM. This is optional.
            When provided,

            VMs with this policy cannot have more than number of CPUs defined by this
            field.'
        coresPerSocket:
          type: integer
          format: int32
          description: The cores per socket to be configured for the VM where this
            policy is applied.
        memoryReservationGuarantee:
          type: number
          format: double
          description: The factor of the configured memory reserved for the VM on
            which this policy is applied.
          minimum: 0
          maximum: 1
        cpuReservationGuarantee:
          type: number
          format: double
          description: The factor of the configured CPU reserved for the VM on which
            this policy is applied.
          minimum: 0
          maximum: 1
        cpuLimit:
          type: integer
          format: int64
          description: 'The limit of CPU in MHz for the VM on which this policy is
            applied. -1 means unlimited. This

            is optional. If not provided, limit would be equal to the vCPUSpeed multiplied
            by numCPU.'
        memoryLimit:
          type: integer
          format: int64
          description: 'The limit of memory in MB for the VM on which this policy
            is applied. -1 means unlimited. This

            is optional. If not provided, limit would be equal to the configured memory
            of the VM.'
        cpuShares:
          type: integer
          format: int32
          description: 'The number of CPU shares for the VM on which this policy is
            applied. This is optional. If

            not provided, Normal shares would be applied to the VM.'
        memoryShares:
          type: integer
          format: int32
          description: 'The number of memory shares for the VM on which this policy
            is applied. This is optional. If

            not provided, Normal shares would be applied to the VM.'
        extraConfigs:
          type: object
          description: Map of extra configs to be set on the VM with this policy.
          additionalProperties:
            type: string
        pvdcComputePolicyRef:
          $ref: '#/components/schemas/EntityReference'
          description: Deprecated in Api 32.0, this property will be removed in future
            release.
        pvdcComputePolicy:
          $ref: '#/components/schemas/EntityReference'
          description: This field cannot be updated and is a read-only field in the
            client after creation.
        compatibleVdcTypes:
          type: array
          description: A list of read-only compatible vDC types for this policy.
          items:
            type: string
        isSizingOnly:
          type: boolean
          description: 'This field cannot be updated and is a read-only field in the
            client after creation. It defines whether

            the policy is SIZING_ONLY or if it also contains affinity information.'
        pvdcId:
          type: string
          description: URN for Provider VDC.
        namedVmGroups:
          type: array
          description: 'List of list of vmGroups grouped together in a meaningful
            manner.

            A group of vmGroups would consist of one functionally equal vmGroup picked
            from each cluster of the pvdc.'
          items:
            type: string
        logicalVmGroupReferences:
          type: array
          description: List of logical vm group references. This value is set at creation
            time and cannot be edited later.
          items:
            $ref: '#/components/schemas/EntityReference'
        isAutoGenerated:
          type: boolean
          description: 'This field cannot be updated and is a read-only field in the
            client. It defines if the policy

            is auto-generated.'
      required:
        - name
    VdcGroup:
      type: object
      description: A vCD Group.
      properties:
        id:
          type: string
          description: The unique ID for the vDC Group (read-only).
        orgId:
          type: string
          description: The organization that this group belongs to.
        name:
          type: string
          description: The name of this group. The name must be unique.
        description:
          type: string
          description: The description of this group.
        participatingOrgVdcs:
          type: array
          description: The list of organization vDCs that are participating in this
            group.
          items:
            $ref: '#/components/schemas/ParticipatingVdcReference'
        universalNetworkingEnabled:
          type: boolean
          description: True means that universal routers can be created. This field
            cannot be updated.
        networkPoolUniversalId:
          type: string
          description: 'The universal network pool that is common to all the participating
            vDCs. This field is read-only and

            is derived from the list of participating vDCs.'
        status:
          $ref: '#/components/schemas/VdcGroupEntityStatus'
          description: The status that the group can be in.
        errorMessage:
          type: string
          description: If the group has an error status, a more detailed error message
            is set here.
      required:
        - name
        - orgId
        - participatingOrgVdcs
    VdcGroupEntityStatus:
      type: string
      description: 'Represents status of vDC group components such as participating
        vdc''s

        configured routing, egress points, etc.'
      enum:
        - SAVING
        - SAVED
        - CONFIGURING
        - REALIZED
        - REALIZATION_FAILED
        - DELETING
        - DELETE_FAILED
        - OBJECT_NOT_FOUND
        - UNCONFIGURED
    VdcNetworkConnectionType:
      type: string
      description: Describes how a network is connected to a gateway.
      enum:
        - DISTRIBUTED
        - INTERNAL
        - SUBINTERFACE
    VdcNetworkDhcpConfig:
      type: object
      description: Configuration for the DHCP service that runs on the network.
      properties:
        enabled:
          type: boolean
          description: Whether the DHCP service is currently enabled on network
        dhcpPools:
          type: array
          description: Range of DHCP IP addresses
          items:
            $ref: '#/components/schemas/VdcNetworkDhcpPool'
    VdcNetworkDhcpPool:
      type: object
      description: A range of DHCP ip addresses and its lease time configuration.
      properties:
        enabled:
          type: boolean
          description: Whether the DHCP address pool is currently enabled
        ipRange:
          $ref: '#/components/schemas/IpRange'
        maxLeaseTime:
          type: integer
          description: Max lease time in seconds
          minimum: 0
        defaultLeaseTime:
          type: integer
          description: Default lease time in seconds
          minimum: 0
    VdcNetworkFenceType:
      type: string
      description: The network type.
      enum:
        - DIRECT
        - DIRECT_UPLINK
        - ISOLATED
        - OPAQUE
        - NAT_ROUTED
        - CROSS_VDC
    VdcNetworkProfile:
      type: object
      description: A vDC Network Profile object.
      properties:
        primaryEdgeCluster:
          $ref: '#/components/schemas/EntityReference'
          description: The Edge Cluster where the primary appliance for an NSX-V Edge
            Gateway will be deployed.
        secondaryEdgeCluster:
          $ref: '#/components/schemas/EntityReference'
          description: The Edge Cluster where the secondary appliance for an NSX-V
            Edge Gateway will be deployed if HA is enabled on the Edge.
    VlanIdRange:
      type: object
      description: An object representing VLAN Id range.
      properties:
        startId:
          type: integer
          description: Starting VLAN Id in the range.
        endId:
          type: integer
          description: Ending VLAN Id in the range.
    VlanIdRanges:
      type: object
      description: List of IpRange
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/VlanIdRange'
    VmcSddc:
      type: object
      description: A VMware Cloud on AWS SDDC
      properties:
        id:
          type: string
          description: The unique ID for the VMC SDDC.
        name:
          type: string
          description: The name of the VMC SDDC. This field is read-only.
    VroRemoteInventoryItem:
      type: object
      description: Meta information about an inventory item on a vRealize Orchestrator
        server
      properties:
        href:
          type: string
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/WsAttribute'
        relations:
          $ref: '#/components/schemas/Relations'
    VroRemoteItem:
      type: object
      description: Information about various objects in vRealize Orchestrator server
      properties:
        name:
          type: string
        description:
          type: string
        id:
          type: string
        vroServerId:
          type: string
        dunesId:
          type: string
        type:
          type: string
        selectable:
          type: boolean
        canHaveChildren:
          type: boolean
        href:
          type: string
        rel:
          type: string
    VroRemoteItems:
      type: object
      description: A list of objects in vRealize orchestrator server
      properties:
        remoteItems:
          type: array
          items:
            $ref: '#/components/schemas/VroRemoteItem'
        resultTotal:
          type: integer
        pageCount:
          type: integer
    VroRemotePluginItem:
      type: object
      description: A plugin namespaces for whom type information can be retrieved
      properties:
        name:
          type: string
        typeHref:
          type: string
        selectable:
          type: boolean
        canHaveChildren:
          type: boolean
    VroRemotePluginItems:
      type: object
      description: List of plugin namespaces
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/VroRemotePluginItem'
    VroRemotePluginType:
      type: object
      description: Type definition for a plugin namespace
      properties:
        name:
          type: string
        selectable:
          type: boolean
        canHaveChildren:
          type: boolean
    VroRemotePluginTypes:
      type: object
      description: A list of defined types for a particular plugin namespace
      properties:
        types:
          type: array
          items:
            $ref: '#/components/schemas/VroRemotePluginType'
        namespace:
          type: string
    VroRemoteWorkflowItem:
      type: object
      description: Meta information about a workflow on a vRealize Orchestrator server
      properties:
        name:
          type: string
        description:
          type: string
        categoryName:
          type: string
        canExecute:
          type: boolean
        id:
          type: string
        vroServerId:
          type: string
    WsAttribute:
      type: object
      properties:
        displayValue:
          type: string
        name:
          type: string
        value:
          type: string
    WsParameter:
      type: object
      properties:
        description:
          type: string
        encryptValue:
          type: boolean
        name:
          type: string
        scope:
          type: string
          enum:
            - local
            - token
        type:
          type: string
        updated:
          type: boolean
        value:
          $ref: '#/components/schemas/Parameter'
    WsWorkflowExecution:
      type: object
      properties:
        businessState:
          type: string
        contentException:
          type: string
        currentItemDisplayName:
          type: string
        endDate:
          type: string
          format: date-time
        id:
          type: string
        inputParameters:
          type: array
          items:
            $ref: '#/components/schemas/WsParameter'
        name:
          type: string
        outputParameters:
          type: array
          items:
            $ref: '#/components/schemas/WsParameter'
        relations:
          $ref: '#/components/schemas/Relations'
        startDate:
          type: string
          format: date-time
        startedBy:
          type: string
        state:
          $ref: '#/components/schemas/ExecutionState'
    AccessibleLocations:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              description: The current page of accessible locations.
              items:
                $ref: '#/components/schemas/AccessibleLocation'
      description: A list of locations accessible to this session.
    AllocatedIpAddresses:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/AllocatedIpAddress'
      description: List of allocated IP addresses.
    ApplicationPortProfile:
      allOf:
        - $ref: '#/components/schemas/NetworkProviderContext'
        - $ref: '#/components/schemas/NetworkingObjectStatus'
        - type: object
          properties:
            id:
              type: string
              description: The id of the Application Port Profile in URN format.
            name:
              type: string
              description: The name of the Application Port Profile.
            description:
              type: string
            scope:
              $ref: '#/components/schemas/ApplicationPortProfileScopeType'
              description: The scope of the application port profile definition.
            applicationPorts:
              type: array
              description: A list of protocol and ports supported by this application
                port profile.
              items:
                $ref: '#/components/schemas/ApplicationPortList'
            usableForNAT:
              type: boolean
              description: 'True means that the port profile can be used for NAT configuration.  A
                port profile can be used for NAT if there is only 1 application port

                with at most 1 destination port.'
      description: An Application Port Profile object. The application port profile
        represents a set of ports and protocols that can be used when defining network
        service rules.
    ApplicationPortProfiles:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/ApplicationPortProfile'
      description: List of Application Port Profiles.
    ArrayParam:
      allOf:
        - $ref: '#/components/schemas/Parameter'
        - type: object
          properties:
            value:
              type: array
              items:
                $ref: '#/components/schemas/Parameter'
    AuditTrailEvents:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              description: The current page of audit trail events.
              items:
                $ref: '#/components/schemas/AuditTrailEvent'
      description: A list of audit trail events.
    BooleanParam:
      allOf:
        - $ref: '#/components/schemas/Parameter'
        - type: object
          properties:
            value:
              type: boolean
    Capabilities:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/Capability'
      description: List of read-only capabilities.
    Cells:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/Cell'
      description: A paginated list of vCloud Director cells.
    Chooser:
      allOf:
        - $ref: '#/components/schemas/Decorator'
        - type: object
          properties:
            sdkObject:
              $ref: '#/components/schemas/SdkObject'
            type:
              type: string
    CompositeType:
      allOf:
        - $ref: '#/components/schemas/Parameter'
        - type: object
          properties:
            property:
              type: array
              items:
                $ref: '#/components/schemas/CompositeValue'
            type:
              type: string
    CompositeValue:
      allOf:
        - $ref: '#/components/schemas/Parameter'
        - type: object
          properties:
            id:
              type: string
            property:
              $ref: '#/components/schemas/Parameter'
    CrossVdcNetwork:
      allOf:
        - $ref: '#/components/schemas/Network'
        - type: object
          properties:
            vdcGroupRef:
              $ref: '#/components/schemas/EntityReference'
              description: The vDC group that this network belongs to.
            routerRef:
              $ref: '#/components/schemas/EntityReference'
              description: The router that this network is attached to.
            status:
              $ref: '#/components/schemas/VdcGroupEntityStatus'
              description: The status of the network.
            errorMessage:
              type: string
              description: If the network has an error status, a more detailed error
                message is set here.
      description: A CrossVdcNetwork object
    CrossVdcNetworks:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/CrossVdcNetwork'
      description: List of cross vDC networks
    CustomEntityTypes:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              description: The current page of custom entity types.
              items:
                $ref: '#/components/schemas/CustomEntityType'
      description: A list of custom entity types.
    CustomValidator:
      allOf:
        - $ref: '#/components/schemas/Constraint'
    DateParam:
      allOf:
        - $ref: '#/components/schemas/Parameter'
        - type: object
          properties:
            value:
              type: string
              format: date-time
    DistributedPortGroups:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/DistributedPortGroup'
      description: List of distributed portgroups.
    DropDown:
      allOf:
        - $ref: '#/components/schemas/Decorator'
        - type: object
          properties:
            array:
              $ref: '#/components/schemas/ArrayParam'
    DvSwitches:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/DvSwitch'
      description: List of distributed virtual switches.
    EdgeClusters:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/EdgeCluster'
      description: List of Edge Clusters.
    EdgeFirewallRules:
      allOf:
        - $ref: '#/components/schemas/NetworkingObjectStatus'
        - type: object
          properties:
            systemRules:
              type: array
              description: 'The ordered list of system defined edge firewall rules.
                System rules are

                applied before user defined rules in the order in which they are returned.'
              items:
                $ref: '#/components/schemas/EdgeFirewallRule'
            userDefinedRules:
              type: array
              description: 'The ordered list of user defined edge firewall rules.

                Users are allowed to add/modify/delete rules only to this list.'
              items:
                $ref: '#/components/schemas/EdgeFirewallRule'
              maxItems: 1000
            defaultRules:
              type: array
              description: 'The ordered list of default edge firewall rules. Default
                rules are

                applied after the user defined rules in the order in which they are
                returned.'
              items:
                $ref: '#/components/schemas/EdgeFirewallRule'
      description: 'Firewall rules for an edge gateway. This contains an ordered list
        of system,

        user defined and default firewall rules. All the rules are returned in the
        order of type and precedence.'
    EdgeGateway:
      allOf:
        - $ref: '#/components/schemas/NetworkingObjectStatus'
        - type: object
          properties:
            id:
              type: string
              description: The unique identifier of the edge gateway.
            name:
              type: string
              description: The name of the edge gateway.
            description:
              type: string
              description: The description of the edge gateway(optional).
            edgeGatewayUplinks:
              type: array
              description: The uplink connections for the edge gateway.
              items:
                $ref: '#/components/schemas/EdgeGatewayUplink'
            distributedRoutingEnabled:
              type: boolean
              description: A flag indicating whether distributed routing is enabled
                or not. The default is false.
              default: false
            orgVdcNetworkCount:
              type: integer
              description: The number of Org vDC networks connected to the gateway.
            gatewayBacking:
              $ref: '#/components/schemas/EdgeGatewayBacking'
              description: The backing details of the edge gateway; only required
                if importing an NSX-T router.
            orgVdc:
              $ref: '#/components/schemas/EntityReference'
              description: The organization vDC which the gateway belongs to.
            orgRef:
              $ref: '#/components/schemas/EntityReference'
              description: The organization to which the gateway belongs.
            serviceNetworkDefinition:
              type: string
              description: 'The network definition in CDIR form that DNS and DHCP
                service on an NSX-T edge will run on. The subnet prefix length must
                be 27.

                This property applies to creating or importing an NSX-T Edge. This
                is not supported for VMC.

                If nothing is set, the default is 192.168.255.225/27.  The DHCP listener
                IP network is on 192.168.255.225/30.

                The DNS listener IP network is on 192.168.255.228/32.  This field
                cannot be updated.'
      description: An edge gateway object
    EdgeGatewaySubnet:
      allOf:
        - $ref: '#/components/schemas/Subnet'
        - type: object
          properties:
            primaryIp:
              type: string
              description: 'The primary IP address allocated for this subnet. If not
                specified, this IP is auto-allocated.  This IP belongs to the external
                network

                and can be used for system-configured NAT rules such as DNS forwarder
                configuration.'
            autoAllocateIpRanges:
              type: boolean
              description: Used for create and update api calls. If set to true, IP
                Ranges are automatically generated based on totalIpCount.
              default: false
      description: Subnet for edge gateway that contains the IPs from the external
        network that are allocated to the edge.
    EdgeGateways:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              description: A list of EdgeGateways.
              items:
                $ref: '#/components/schemas/EdgeGateway'
      description: List of edge gateways
    EdgeIpSecVpnTunnels:
      allOf:
        - $ref: '#/components/schemas/NetworkingObjectStatus'
        - type: object
          properties:
            values:
              type: array
              description: The list of IPSec VPN tunnels.
              items:
                $ref: '#/components/schemas/EdgeIpSecVpnTunnel'
              maxItems: 1000
      description: List of configured IPSec VPN tunnels.
    EdgeNatRules:
      allOf:
        - $ref: '#/components/schemas/NetworkingObjectStatus'
        - type: object
          properties:
            values:
              type: array
              description: The list of NAT Rules.
              items:
                $ref: '#/components/schemas/EdgeNatRule'
      description: List of configured NAT Rules.
    EncryptedString:
      allOf:
        - $ref: '#/components/schemas/Parameter'
        - type: object
          properties:
            value:
              type: string
    EntityReferences:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              description: The current page of entity references.
              items:
                $ref: '#/components/schemas/EntityReference'
      description: A list of entity references.
    ExternalNetwork:
      allOf:
        - $ref: '#/components/schemas/Network'
        - $ref: '#/components/schemas/NetworkingObjectStatus'
        - type: object
          properties:
            networkBackings:
              $ref: '#/components/schemas/ExternalNetworkBackings'
              description: 'Backings for this external network. Describes if this
                external network

                is backed by port groups, vCenter standard switch or an NSX-T Tier-0
                router.'
            totalIpCount:
              type: integer
              description: The number of IP addresses defined by the static ip pools.
                If the network contains any IpV6 subnets, the total ip count will
                be null.
            usedIpCount:
              type: integer
              description: The number of IP address used from the static ip pools.
      description: An external network.
    ExternalNetworks:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/ExternalNetwork'
      description: List of External Networks
    Field:
      allOf:
        - $ref: '#/components/schemas/PresentationElement'
        - type: object
          properties:
            decorators:
              type: array
              items:
                $ref: '#/components/schemas/Decorator'
            constraints:
              type: array
              items:
                $ref: '#/components/schemas/Constraint'
            type:
              type: string
            affectedFieldsIds:
              type: array
              items:
                type: string
    FirewallGroupSummary:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: The id of the firewall group.
            name:
              type: string
              description: The name of the firewall group.
            description:
              type: string
              description: The description of the firewall group.
        - $ref: '#/components/schemas/FirewallGroupScope'
        - $ref: '#/components/schemas/NetworkingObjectStatus'
      description: A Firewall Group object.
    FirewallGroups:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/FirewallGroupSummary'
      description: List of Firewall Groups
    GatewayUsedIpAddresses:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/GatewayUsedIpAddress'
      description: List of IP addresses used by an edge gateway.
    GlobalRoles:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              description: The current page of global roles.
              items:
                $ref: '#/components/schemas/GlobalRole'
      description: A list of global roles.
    Group:
      allOf:
        - $ref: '#/components/schemas/PresentationElement'
        - type: object
          properties:
            fields:
              type: array
              items:
                $ref: '#/components/schemas/PrimaryField'
    KeyValuePair:
      allOf:
        - $ref: '#/components/schemas/Parameter'
        - type: object
          properties:
            key:
              type: string
            value:
              $ref: '#/components/schemas/Parameter'
    LogicalVmGroups:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              description: The current page of LogicalVmGroups.
              items:
                $ref: '#/components/schemas/LogicalVmGroup'
      description: A list of LogicalVmGroups.
    Mandatory:
      allOf:
        - $ref: '#/components/schemas/Constraint'
    MimeAttachment:
      allOf:
        - $ref: '#/components/schemas/Parameter'
        - type: object
          properties:
            content:
              type: string
            name:
              type: string
            mimeType:
              type: string
    MultiLine:
      allOf:
        - $ref: '#/components/schemas/Decorator'
    NetworkPoolSummary:
      allOf:
        - $ref: '#/components/schemas/NetworkingObjectStatus'
        - type: object
          properties:
            id:
              type: string
              description: The id of the Network Pool in URN format.
            name:
              type: string
              description: The name of the Network Pool. Names for Network Pools must
                be unique across the system.
            description:
              type: string
            poolType:
              $ref: '#/components/schemas/NetworkPoolBackingType'
              description: The network pool backing type.
            promiscuousMode:
              type: boolean
              description: Whether promiscuous mode is enabled on the network pool.
                This is only applicable for VLAN network pools.
            totalBackingsCount:
              type: integer
              description: The number of backings available for use.
              readOnly: true
            usedBackingsCount:
              type: integer
              description: The number of network pool backings in use.
              readOnly: true
            managingOwnerRef:
              $ref: '#/components/schemas/EntityReference'
              description: The Id of vCenter server or the NSX-T manager that manages
                backings for this network pool.
      description: Common fields that NetworkPoolSummary and NetworkPool have.
    NetworkPoolsSummary:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/NetworkPoolSummary'
      description: List of Network Pool Summary Objects.
    NumberFormat:
      allOf:
        - $ref: '#/components/schemas/Constraint'
        - type: object
          properties:
            value:
              type: string
    NumberParam:
      allOf:
        - $ref: '#/components/schemas/Parameter'
        - type: object
          properties:
            value:
              type: number
    NumberRange:
      allOf:
        - $ref: '#/components/schemas/Constraint'
        - type: object
          properties:
            min:
              type: number
            max:
              type: number
    PortGroups:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/PortGroup'
      description: List of standard portgroups.
    PreferenceDefinitions:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              description: The current page for preference definitions.
              items:
                $ref: '#/components/schemas/PreferenceDefinition'
      description: A list of preference definitions
    Preferences:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              description: The list of user preferences.
              items:
                $ref: '#/components/schemas/Preference'
      description: A list of user preferences
    Properties:
      allOf:
        - $ref: '#/components/schemas/Parameter'
        - type: object
          properties:
            property:
              type: array
              items:
                $ref: '#/components/schemas/KeyValuePair'
    ProviderVdcs:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/ProviderVdc'
      description: List of Provider VDCs.
    Proxies:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/Proxy'
      description: A paginated list of proxies
    PublishableRightsMapping:
      allOf:
        - $ref: '#/components/schemas/RightsMapping'
        - type: object
          properties:
            publishAll:
              type: boolean
              description: Read-only value indicating publishAll state
              default: false
      description: RightsMapping that can be published to tenants
    PvdcComputePolicies:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              description: The current page of provider VDC compute policies.
              items:
                $ref: '#/components/schemas/PvdcComputePolicy'
      description: A list of provider VDC compute policies.
    RefreshOnChange:
      allOf:
        - $ref: '#/components/schemas/Decorator'
    Regex:
      allOf:
        - $ref: '#/components/schemas/Parameter'
        - type: object
          properties:
            value:
              type: string
    Regexp:
      allOf:
        - $ref: '#/components/schemas/Constraint'
        - type: object
          properties:
            expression:
              type: string
    ResourcePools:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/ResourcePool'
      description: A list of Resource Pools
    RestrictDuplicates:
      allOf:
        - $ref: '#/components/schemas/Constraint'
    Rights:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              description: The current page of rights.
              items:
                $ref: '#/components/schemas/Right'
      description: A list of rights.
    RightsBundles:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              description: The current page of rights bundles.
              items:
                $ref: '#/components/schemas/RightsBundle'
    RightsCategoryNodes:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              description: The current page of rights category nodes.
              items:
                $ref: '#/components/schemas/RightsCategoryNode'
      description: A list of rights category nodes.
    Role:
      allOf:
        - $ref: '#/components/schemas/RightsMapping'
        - type: object
          properties:
            id:
              type: string
              maxLength: 128
    Roles:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              description: The current page of roles.
              items:
                $ref: '#/components/schemas/Role'
      description: A list of roles.
    SddcProxies:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/SddcProxy'
      description: A paginated list of SDDC proxies
    Sddcs:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/Sddc'
      description: A paginated list of software-defined data centers
    SdkObject:
      allOf:
        - $ref: '#/components/schemas/Parameter'
        - type: object
          properties:
            type:
              type: string
            href:
              type: string
            id:
              type: string
            displayValue:
              type: string
    SecureString:
      allOf:
        - $ref: '#/components/schemas/Parameter'
        - type: object
          properties:
            value:
              type: string
            isPlainText:
              type: boolean
    ServiceApps:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/ServiceApp'
      description: List of VMware service applications
    ServiceItems:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              description: The current page of service items.
              items:
                $ref: '#/components/schemas/ServiceItem'
      description: A list of service items.
    Services:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              description: The current page of services.
              items:
                $ref: '#/components/schemas/Service'
      description: A list of services.
    Sessions:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              description: The current page of sessions.
              items:
                $ref: '#/components/schemas/Session'
      description: A list of sessions.
    StepInfo:
      allOf:
        - $ref: '#/components/schemas/PresentationElement'
        - type: object
          properties:
            readOnly:
              type: boolean
            elements:
              type: array
              items:
                $ref: '#/components/schemas/PresentationElement'
    StorageProfiles:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/StorageProfile'
      description: A list of Storage Profiles
    StringParam:
      allOf:
        - $ref: '#/components/schemas/Parameter'
        - type: object
          properties:
            value:
              type: string
    Tier0Router:
      allOf:
        - $ref: '#/components/schemas/CommonNsxTRouterFields'
      description: An NSX-T's Tier-0 router.
    Tokens:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/Token'
      description: A paginated list of user specific tokens used for accessing proxies.
    UiPluginMetadataResponse:
      allOf:
        - $ref: '#/components/schemas/UiPluginMetadata'
        - $ref: '#/components/schemas/UploadMetadataResponse'
    UsedIpAddresses:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/UsedIpAddress'
      description: List of used IP addresses.
    VdcComputePolicies:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              description: The current page of VDC compute policies.
              items:
                $ref: '#/components/schemas/VdcComputePolicy'
      description: A list of VDC compute policies.
    VdcGroups:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/VdcGroup'
      description: List of vDC Groups.
    VdcNetwork:
      allOf:
        - $ref: '#/components/schemas/Network'
        - type: object
          properties:
            backingNetworkId:
              type: string
              description: The NSX id of the backing network.
            backingNetworkType:
              $ref: '#/components/schemas/BackingNetworkType'
              description: The object type of the backing network.
            parentNetworkId:
              $ref: '#/components/schemas/EntityReference'
              description: The parent network if the network is a direct network,
                otherwise it will be null.
            networkType:
              $ref: '#/components/schemas/VdcNetworkFenceType'
              description: 'The type of network. Changing the network type allows
                converting between an isolated and routed network.

                Note that the "connection" field must also be set if converting from
                isolated to routed network.'
            orgVdc:
              $ref: '#/components/schemas/EntityReference'
              description: The organization vDC the network belongs to.
            connection:
              $ref: '#/components/schemas/RouterConnection'
              description: The edge gateway that the network is attached to.
            isDefaultNetwork:
              type: boolean
              description: Deprecated unused field, this property will be removed
                in future release.
            shared:
              type: boolean
              description: Whether this network is shared with other organization
                vDCs.
            status:
              $ref: '#/components/schemas/OrgVdcNetworkStatus'
              description: Description of the network's status.
            lastTaskFailureMessage:
              type: string
              description: 'Brief failure message if the last configuration task failed.

                Deprecated in Api 33.0, this property will be removed in next release.'
              readOnly: true
            guestVlanTaggingAllowed:
              type: boolean
              description: Whether guest VLAN tagging is allowed.
            retainNicResources:
              type: boolean
              description: Whether network resources such as IP/MAC Addresses are
                to be retained.
            crossVdcNetworkId:
              type: string
              description: The id of the cross vdc network if this is a stretched
                network, otherwise it will be null.
              readOnly: true
            crossVdcNetworkLocationId:
              type: string
              description: The id of the org from which this network can be managed
                if this is a stretched network, otherwise it will be null.
              readOnly: true
            totalIpCount:
              type: integer
              description: The number of IP addresses defined by the static ip pools.
                If the network contains any IpV6 subnets, the total ip count will
                be null.
              readOnly: true
            usedIpCount:
              type: integer
              description: The number of IP address used from the static ip pools.
              readOnly: true
      description: An organization vDC network.
    VdcNetworks:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/VdcNetwork'
      description: List of Org vDC networks
    VmcSddcs:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/VmcSddc'
      description: List of VMware Cloud on AWS SDDCs
    VroRemoteWorkflowItems:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            values:
              type: array
              description: The current page of remove VRO workflows.
              items:
                $ref: '#/components/schemas/VroRemoteWorkflowItem'
      description: A list of remote VRO workflows.
    VroWorkflowServiceItem:
      allOf:
        - $ref: '#/components/schemas/ServiceItem'
        - type: object
          properties:
            vroWorkflowId:
              type: string
            vroServerId:
              type: string
    FirewallGroupDetails:
      allOf:
        - $ref: '#/components/schemas/FirewallGroupSummary'
        - type: object
          properties:
            ipAddresses:
              type: array
              description: Ip Addresses included in the group. This can support IPv4
                and IPv6 addresses in single, range, and CIDR formats.
              items:
                type: string
      description: A Firewall Group object.
    GlobalRole:
      allOf:
        - $ref: '#/components/schemas/PublishableRightsMapping'
        - type: object
          properties:
            id:
              type: string
              maxLength: 128
    NetworkPool:
      allOf:
        - $ref: '#/components/schemas/NetworkPoolSummary'
        - type: object
          properties:
            backing:
              $ref: '#/components/schemas/NetworkPoolBacking'
              description: The network pool backing information.
      description: 'A network pool is a group of undifferentiated networks that is
        available

        for use within an organization vDC to create certain type of vDC networks

        such as Organization vDC and Cross vDC networks.'
    PrimaryField:
      allOf:
        - $ref: '#/components/schemas/Field'
        - type: object
          properties:
            fields:
              type: array
              items:
                $ref: '#/components/schemas/Field'
            value:
              $ref: '#/components/schemas/Parameter'
    RightsBundle:
      allOf:
        - $ref: '#/components/schemas/PublishableRightsMapping'
        - type: object
          properties:
            id:
              type: string
              maxLength: 128
tags:
  - name: ApplicationPortProfile
  - name: ApplicationPortProfiles
  - name: AuditTrail
  - name: AuditTrailUnimplemented
  - name: Branding
  - name: Capabilities
  - name: Cell
  - name: CloudApiBase
  - name: CodegenPlaceholder
  - name: CrossVdcNetwork
  - name: CrossVdcNetworks
  - name: CustomEntities
  - name: EdgeCluster
  - name: EdgeClusters
  - name: EdgeGateway
  - name: EdgeGatewayDns
  - name: EdgeGatewayFirewallRule
  - name: EdgeGatewayFirewallRules
  - name: EdgeGatewayIpSecVpnTunnel
  - name: EdgeGatewayIpSecVpnTunnelConnectionProperties
  - name: EdgeGatewayIpSecVpnTunnels
  - name: EdgeGatewayNatRule
  - name: EdgeGatewayNatRules
  - name: EdgeGateways
  - name: EgressPoint
  - name: EgressPoints
  - name: EmailSettings
  - name: Entity
  - name: ExternalNetwork
  - name: ExternalNetworks
  - name: FirewallGroup
  - name: FirewallGroups
  - name: GlobalRoles
  - name: LDAP
  - name: LogicalVmGroups
  - name: NetworkPool
  - name: NetworkPools
  - name: NsxTResources
  - name: NsxVResources
  - name: OrgVdcNetwork
  - name: OrgVdcNetworkDhcp
  - name: OrgVdcNetworks
  - name: Preferences
  - name: ProviderVdc
  - name: Proxy
  - name: PvdcComputePolicies
  - name: Rights
  - name: RightsBundles
  - name: RightsCategories
  - name: Roles
  - name: SddcProxy
  - name: Sddcs
  - name: ServiceApp
  - name: ServiceApps
  - name: Services
  - name: Sessions
  - name: Token
  - name: UiPlugin
  - name: UiPluginResource
  - name: UiPluginTenants
  - name: UiPlugins
  - name: UniversalRouter
  - name: UniversalRouterDhcp
  - name: UniversalRouterDns
  - name: UniversalRouterHealth
  - name: UniversalRouters
  - name: UniversalRouting
  - name: VCenterResources
  - name: VRealizeOrchestrator
  - name: VRealizeOrchestrators
  - name: Vdc
  - name: VdcComputePolicies
  - name: VdcGroup
  - name: VdcGroups
  - name: VdcNetworkProfile
  - name: VirtualCenter
  - name: VmcSddcs
  - name: VrealizeBrowse
  - name: VrealizeWorkflows
  - name: VroWorkflowExecution
  - name: VroWorkflowPresentation
paths:
  /1.0.0/applicationPortProfiles/{applicationPortProfileId}:
    parameters:
      - name: applicationPortProfileId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Deletes a specific user-defined Application Port Profile
    get:
      tags: []
      description: Retrieves a specific user-defined Application Port Profile
    put:
      tags: []
      description: Updates a specific user-defined Application Port Profile
  /1.0.0/applicationPortProfiles:
    parameters: []
    post:
      tags: []
      description: Create a user-defined application port profile.
    get:
      tags: []
      description: Get all Application Port Profiles.
  /1.0.0/applicationPortProfiles/sync:
    parameters: []
    post:
      tags: []
      description: Sync the application port profiles from the network provider to
        VCD.
  /1.0.0/auditTrail:
    parameters: []
    get:
      tags: []
      description: Get list of audit trail events
  /1.0.0/auditTrail/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieve an individual audit trail event.
  /branding/themes:
    parameters: []
    post:
      tags: []
      description: Create a new custom theme
    get:
      tags: []
      description: Get a list of themes
  /branding/themes/{name}:
    parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Delete an existing custom theme
    get:
      tags: []
      description: Retrieve a specified theme identified by name
    put:
      tags: []
      description: Update an existing custom theme
  /branding/themes/{name}/contents:
    parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Delete an existing custom theme's contents
    post:
      tags: []
      description: Upload the contents for this theme
  /branding/icon:
    parameters: []
    delete:
      tags: []
      description: Delete system level icon
    get:
      tags: []
      description: Gets the system level browser icon
    put:
      tags: []
      description: Sets the system level icon
  /branding/logo:
    parameters: []
    delete:
      tags: []
      description: Delete system level logo
    get:
      tags: []
      description: Gets the system level logo
    put:
      tags: []
      description: Sets the system level logo
  /branding/tenant/{org}/icon:
    parameters:
      - name: org
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Delete system level icon
    get:
      tags: []
      description: Gets the system level browser icon
    put:
      tags: []
      description: Sets the system level icon
  /branding/tenant/{org}/logo:
    parameters:
      - name: org
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Delete the org-specific logo
    get:
      tags: []
      description: Gets the org-specific logo
    put:
      tags: []
      description: Sets the org-specific logo
  /branding/themes/{name}/css:
    parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieve the custom CSS for this theme, if any
  /branding:
    parameters: []
    get:
      tags: []
      description: Gets the system level branding
    put:
      tags: []
      description: Sets default branding
  /branding/tenant/{org}:
    parameters:
      - name: org
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Gets org-specific branding
    put:
      tags: []
      description: Sets org-specific branding
    delete:
      tags: []
      description: Remove org-specific branding
  /1.0.0/vdcs/{orgVdcId}/capabilities:
    parameters:
      - name: orgVdcId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieves capabilities for a given entity.
  /1.0.0/cells/{cellUrn}:
    parameters:
      - name: cellUrn
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Deletes a specified cell.
    get:
      tags: []
      description: Get cell.
  /1.0.0/cells:
    parameters: []
    get:
      tags: []
      description: Get cells.
  /:
    parameters: []
    get:
      tags: []
      description: Get base navigation links
  /query/page:
    parameters: []
    get:
      tags: []
      description: This endpoint will not produce results. It is a placeholder to
        enforce code generation of Page.
  /1.0.0/crossVdcNetworks/{crossVdcNetworkId}:
    parameters:
      - name: crossVdcNetworkId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Deletes a specific Cross vDC network
    get:
      tags: []
      description: Retrieves a specific Cross vDC network.
    put:
      tags: []
      description: Updates a specific Cross vDC network.
  /1.0.0/crossVdcNetworks/{crossVdcNetworkId}/sync:
    parameters:
      - name: crossVdcNetworkId
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Sync/repair a specific Cross vDC network.
  /1.0.0/crossVdcNetworks:
    parameters: []
    post:
      tags: []
      description: Creates a Cross vDC network.
    get:
      tags: []
      description: Get all Cross vDC networks in the system.
  /1.0.0/vdcGroups/{vdcGroupId}/crossVdcNetworks:
    parameters:
      - name: vdcGroupId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Get all Cross vDC networks of a vDC group.
  /customEntityTypes:
    parameters: []
    post:
      tags: []
      description: Creates a new custom entity type
    get:
      tags: []
      description: Get list of all custom entity types
  /customEntityTypes/{customEntityTypeId}/actions:
    parameters:
      - name: customEntityTypeId
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Creates a new custom entity type action.
    get:
      tags: []
      description: Get all actions associated with this custom entity type
  /customEntityTypes/{customEntityTypeId}:
    parameters:
      - name: customEntityTypeId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Delete specified custom entity type.
    get:
      tags: []
      description: Get specified custom entity type
    put:
      tags: []
      description: Update specified custom entity type
  /customEntityTypes/{customEntityTypeId}/actions/{workflowId}:
    parameters:
      - name: customEntityTypeId
        in: path
        required: true
        schema:
          type: string
      - name: workflowId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Delete specified custom entity type action
  /customEntities:
    parameters: []
    get:
      tags: []
      description: Get list of all custom entities
  /customEntities/{customEntityId}:
    parameters:
      - name: customEntityId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Get specified custom entity
  /customEntities/{customEntityId}/sdkObject:
    parameters:
      - name: customEntityId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Get specified custom entity represented as on Sdk-Object
  /customEntityTypes/{customEntityTypeId}/tenants:
    parameters:
      - name: customEntityTypeId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieves list of tenants for whom the custom entity type is explicitly
        published
    put:
      tags: []
      description: Resets list of tenants for whom the custom entity type is explicitly
        published
  /customEntityTypes/{customEntityTypeId}/tenants/publish:
    parameters:
      - name: customEntityTypeId
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Publishes the custom entity type to the specified tenants
  /customEntityTypes/{customEntityTypeId}/tenants/publishAll:
    parameters:
      - name: customEntityTypeId
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Publishes the custom entity type to all tenants
  /customEntityTypes/{customEntityTypeId}/tenants/unpublish:
    parameters:
      - name: customEntityTypeId
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Revokes publication of the custom entity type to the specified
        tenants
  /customEntityTypes/{customEntityTypeId}/tenants/unpublishAll:
    parameters:
      - name: customEntityTypeId
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Unpublishes the custom entity type from all tenants
  /1.0.0/edgeClusters/{edgeClusterId}:
    parameters:
      - name: edgeClusterId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Deletes a specific Edge Cluster
    get:
      tags: []
      description: Retrieves a specific Edge Cluster
    put:
      tags: []
      description: Updates a specific Edge Cluster
  /1.0.0/edgeClusters:
    parameters: []
    post:
      tags: []
      description: Create a new Edge Cluster
    get:
      tags: []
      description: Get all Edge Clusters in the system
  /1.0.0/edgeGateways/{gatewayId}:
    parameters:
      - name: gatewayId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Deletes a specific Edge Gateway
    get:
      tags: []
      description: Retrieves a specific Edge Gateway
    put:
      tags: []
      description: Updates a specific Edge Gateway
  /1.0.0/edgeGateways/{gatewayId}/usedIpAddresses:
    parameters:
      - name: gatewayId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieve the list of IP addresses which are being used by the edge
        gateway.
  /1.0.0/edgeGateways/{gatewayId}/dns:
    parameters:
      - name: gatewayId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Deletes DNS configuration of the edge gateway.
    get:
      tags: []
      description: Retrieves DNS configuration of the edge gateway.
    put:
      tags: []
      description: Updates DNS configuration of the edge gateway.
  /1.0.0/edgeGateways/{gatewayId}/firewall/rules/{ruleId}:
    parameters:
      - name: gatewayId
        in: path
        required: true
        schema:
          type: string
      - name: ruleId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Deletes a specific firewall rule for a given edge gateway.
    get:
      tags: []
      description: Retrieves a specific firewall rule for a given edge gateway.
    put:
      tags: []
      description: Updates a specific firewall rule for a given edge gateway.
  /1.0.0/edgeGateways/{gatewayId}/firewall/rules:
    parameters:
      - name: gatewayId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Deletes all the firewall rules for a given edge gateway.
    get:
      tags: []
      description: Retrieves all firewall rules for a given edge gateway.
    put:
      tags: []
      description: Updates firewall rules for a given edge gateway.
  /1.0.0/edgeGateways/{gatewayId}/ipsec/tunnels/{tunnelId}:
    parameters:
      - name: gatewayId
        in: path
        required: true
        schema:
          type: string
      - name: tunnelId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Deletes a specific IPSec tunnel for a given edge gateway.
    get:
      tags: []
      description: Retrieves a specific IPSec tunnel for a given edge gateway.
    put:
      tags: []
      description: Updates a specific IPSec tunnel for a given edge gateway.
  /1.0.0/edgeGateways/{gatewayId}/ipsec/tunnels/defaultConnectionProperties:
    parameters:
      - name: gatewayId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieves the default connection properties that are used for a
        given IPSec Tunnel in NSX-T when default is set or no security type is specified.
  /1.0.0/edgeGateways/{gatewayId}/ipsec/tunnels/{tunnelId}/statistics:
    parameters:
      - name: gatewayId
        in: path
        required: true
        schema:
          type: string
      - name: tunnelId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieves connection statistics for a given IPSec VPN Tunnel configured
        on an Edge Gateway.
  /1.0.0/edgeGateways/{gatewayId}/ipsec/tunnels/{tunnelId}/status:
    parameters:
      - name: gatewayId
        in: path
        required: true
        schema:
          type: string
      - name: tunnelId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieves status of a given IPSec VPN Tunnel configured on an Edge
        Gateway.
  /1.0.0/edgeGateways/{gatewayId}/ipsec/tunnels/{tunnelId}/connectionProperties:
    parameters:
      - name: gatewayId
        in: path
        required: true
        schema:
          type: string
      - name: tunnelId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieves connection properties for a given IPSec VPN Tunnel configured
        on an Edge Gateway.
    put:
      tags: []
      description: Updates the connection properties for a given IPSec VPN Tunnel
        configured on an Edge Gateway.
  /1.0.0/edgeGateways/{gatewayId}/ipsec/tunnels:
    parameters:
      - name: gatewayId
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Creates an IPSec tunnel on the Edge Gateway.
    get:
      tags: []
      description: Retrieves all IPSec tunnels for a given edge gateway.
  /1.0.0/edgeGateways/{gatewayId}/nat/rules/{ruleId}:
    parameters:
      - name: gatewayId
        in: path
        required: true
        schema:
          type: string
      - name: ruleId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Deletes a specific NAT Rule configuration of the edge gateway based
        on the rule id passed in.
    get:
      tags: []
      description: Retrieves a specific NAT Rule configuration of the edge gateway
        based on the rule id passed in.
    put:
      tags: []
      description: Update a specific NAT Rule configuration of the edge gateway based
        on the rule id passed in.
  /1.0.0/edgeGateways/{gatewayId}/nat/rules:
    parameters:
      - name: gatewayId
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Creates a NAT Rule on the Edge Gateway.
    get:
      tags: []
      description: Retrieves all NAT Rules on the edge gateway.  Pagination is supported
        to get the next page in the header response.
  /1.0.0/edgeGateways:
    parameters: []
    post:
      tags: []
      description: Create a new edge gateway
    get:
      tags: []
      description: Get all the edge gateways
  /1.0.0/universalRouters/{universalRouterId}/routing/egressPoints/{egressPointId}:
    parameters:
      - name: universalRouterId
        in: path
        required: true
        schema:
          type: string
      - name: egressPointId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Deletes a specific Universal Egress Point.
    get:
      tags: []
      description: Retrieves a specific Universal Egress Point.
  /1.0.0/universalRouters/{universalRouterId}/routing/egressPoints/{egressPointId}/sync:
    parameters:
      - name: universalRouterId
        in: path
        required: true
        schema:
          type: string
      - name: egressPointId
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Sync/repair the egress point.
  /1.0.0/universalRouters/{universalRouterId}/routing/egressPoints:
    parameters:
      - name: universalRouterId
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Creates a new Universal Egress Point from a specified Edge Gateway
        and Org vDC.
    get:
      tags: []
      description: Get a list of Universal Egress Points for a Universal Router.
  /1.0.0/smtp/test:
    parameters: []
    post:
      tags: []
      description: Tests Email Settings and Connection
  /1.0.0/entity/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Get specified entity object
  /1.0.0/externalNetworks:
    parameters: []
    post:
      tags: []
      description: Create an external network
    get:
      tags: []
      description: Get all external networks.
  /1.0.0/externalNetworks/{externalNetworkId}:
    parameters:
      - name: externalNetworkId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Deletes a specific external network.
    get:
      tags: []
      description: Retrieves a specific external network.
    put:
      tags: []
      description: Updates a specific external network.
  /1.0.0/externalNetworks/{externalNetworkId}/availableIpAddresses:
    parameters:
      - name: externalNetworkId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieve the list of IP addresses available for use on the network.
  /1.0.0/externalNetworks/{externalNetworkId}/usedIpAddresses:
    parameters:
      - name: externalNetworkId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieve the list of IP addresses which are being used from the
        network.
  /1.0.0/firewallGroups/{firewallGroupId}:
    parameters:
      - name: firewallGroupId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Deletes a Firewall Group.
    get:
      tags: []
      description: Retrieves a specific firewall group.
    put:
      tags: []
      description: Updates the Firewall Group.
  /1.0.0/firewallGroups:
    parameters: []
    post:
      tags: []
      description: Create a firewall group
  /1.0.0/firewallGroups/summaries:
    parameters: []
    get:
      tags: []
      description: Retrieves the Firewall Groups.
  /1.0.0/globalRoles/{id}/rights:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Adds the specified rights to a global role.
    get:
      tags: []
      description: Gets a paged list of rights (as references) contained by a particular
        global role
    put:
      tags: []
      description: Replaces the existing set of rights in global role with the rights
        (as references) supplied.
  /1.0.0/globalRoles:
    parameters: []
    post:
      tags: []
      description: Creates a new global role
    get:
      tags: []
      description: Get list of global roles
  /1.0.0/globalRoles/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Delete specified global role
    get:
      tags: []
      description: Get specified global role
    put:
      tags: []
      description: Update specified global role
  /1.0.0/globalRoles/{id}/tenants/publish:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Publishes the global role to the specified tenants
  /1.0.0/globalRoles/{id}/tenants/publishAll:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Publishes the global role to all tenants
  /1.0.0/globalRoles/{id}/tenants/unpublish:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Revokes publication of the global role to the specified tenants
  /1.0.0/globalRoles/{id}/tenants/unpublishAll:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Unpublishes the global role from all tenants
  /1.0.0/globalRoles/{id}/tenants:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieves list of tenants for whom the global role is explicitly
        published
    put:
      tags: []
      description: Resets list of tenants for whom the global role is explicitly published
  /1.0.0/ldap/search/group:
    parameters: []
    get:
      tags: []
      description: Search LDAP Groups
  /1.0.0/ldap/search/user:
    parameters: []
    get:
      tags: []
      description: Search LDAP Users
  /1.0.0/ldap/sync:
    parameters: []
    post:
      tags: []
      description: Synchronize LDAP users/settings
  /1.0.0/ldap/test:
    parameters: []
    post:
      tags: []
      description: Tests LDAP Connection and Settings
  /1.0.0/logicalVmGroups/{logicalVmGroupId}/namedVmGroups:
    parameters:
      - name: logicalVmGroupId
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Assign named vm groups to logical vm group.
    get:
      tags: []
      description: Get all named vm groups associated with logical vm group
  /1.0.0/logicalVmGroups:
    parameters: []
    post:
      tags: []
      description: Creates a new logical vm group
    get:
      tags: []
      description: Get list of logical vm groups.
  /1.0.0/logicalVmGroups/{logicalVmGroupId}:
    parameters:
      - name: logicalVmGroupId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Delete specified logical vm group.
    get:
      tags: []
      description: Get specified logical vm group
    put:
      tags: []
      description: Update specified logical vm group
  /1.0.0/logicalVmGroups/{logicalVmGroupId}/pvdcPolicies:
    parameters:
      - name: logicalVmGroupId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Get all pvdc policies associated with logical vm group
  /1.0.0/networkPools/{networkPoolId}:
    parameters:
      - name: networkPoolId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Deletes a specific network pool.
    get:
      tags: []
      description: Retrieves a specific Network Pool.
    put:
      tags: []
      description: Updates a specific network pool.
  /1.0.0/networkPools/{networkPoolId}/sync:
    parameters:
      - name: networkPoolId
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Synchronize the VXLAN network pool.
  /1.0.0/networkPools:
    parameters: []
    post:
      tags: []
      description: Create a new network pool.
  /1.0.0/networkPools/networkPoolSummaries:
    parameters: []
    get:
      tags: []
      description: Get summary of all the Network Pools in the system.
  /1.0.0/nsxTResources/importableTier0Routers:
    parameters: []
    get:
      tags: []
      description: Get all importable Tier-0 routers that are accessible to an organization
        vDC.
  /1.0.0/nsxTResources/importableTransportZones:
    parameters: []
    get:
      tags: []
      description: Get all importable overlay transport zones that are configured
        on an NSX-T manager.
  /1.0.0/nsxVResources/importableTransportZones:
    parameters: []
    get:
      tags: []
      description: Get all importable vxlan transport zones that are configured on
        a vCenter backed by a NSX-V manager.
  /1.0.0/orgVdcNetworks/{vdcNetworkId}:
    parameters:
      - name: vdcNetworkId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Deletes a specific Org vDC network.
    get:
      tags: []
      description: Retrieves a specific Org vDC network.
    put:
      tags: []
      description: Updates a specific Org vDC network.
  /1.0.0/orgVdcNetworks/{vdcNetworkId}/allocatedIpAddresses:
    parameters:
      - name: vdcNetworkId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieve the list of IP addresses allocated to the network.
  /1.0.0/orgVdcNetworks/{vdcNetworkId}/reset:
    parameters:
      - name: vdcNetworkId
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Reset a specific isolated Org vDC network.
  /1.0.0/orgVdcNetworks/{vdcNetworkId}/syncSyslog:
    parameters:
      - name: vdcNetworkId
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Synchronize syslog server settings for a Org vDC network.
  /1.0.0/orgVdcNetworks/{vdcNetworkId}/dhcp:
    parameters:
      - name: vdcNetworkId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Removes Dhcp configuration on a specific Org vDC network.
    get:
      tags: []
      description: Retrieves Dhcp configuration of a specific Org vDC network.
    put:
      tags: []
      description: Updates Dhcp configuration of a specific Org vDC network.
  /1.0.0/orgVdcNetworks:
    parameters: []
    post:
      tags: []
      description: Create an organization vDC network.
    get:
      tags: []
      description: Get all Org vDC networks.
  /1.0.0/preferences/{classifier}:
    parameters:
      - name: classifier
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Get specified user preference.
    put:
      tags: []
      description: Update specified user preference
  /1.0.0/definitions/preferences/{preferenceDefinitionId}:
    parameters:
      - name: preferenceDefinitionId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Get specified preference definition.
  /1.0.0/definitions/preferences:
    parameters: []
    get:
      tags: []
      description: Get list of preference definitions.
  /1.0.0/preferences:
    parameters: []
    get:
      tags: []
      description: Query user preferences.
  /1.0.0/providerVdcs:
    parameters: []
    get:
      tags: []
      description: Get all provider VDCs.
  /1.0.0/providerVdcs/{pvdcUrn}/infra/resourcePools/browse/{moref}:
    parameters:
      - name: pvdcUrn
        in: path
        required: true
        schema:
          type: string
      - name: moref
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Browse valid root resource pools hierarchy to back a Provider VDC.
  /1.0.0/providerVdcs/{pvdcUrn}/infra/resourcePools/browse/:
    parameters:
      - name: pvdcUrn
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Browse valid root resource pools hierarchy to back a Provider VDC.
  /1.0.0/proxies:
    parameters: []
    post:
      tags: []
      description: Creates a proxy.
    get:
      tags: []
      description: Gets a paged list of proxies for a tenant.
  /1.0.0/proxies/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Delete a specific proxy. Will not delete an enabled proxy unless
        force is specified.
    get:
      tags: []
      description: Retrieves a specific proxy.
    put:
      tags: []
      description: Update a specific proxy.
  /1.0.0/proxies/{id}/crl:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieve a proxy certificate revocation list in PEM format.
    put:
      tags: []
      description: Update a proxy certificate revocation list in PEM format.
  /1.0.0/proxies/{id}/cert:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieve a proxy SSL certificate chain in PEM format.
    put:
      tags: []
      description: Update a proxy certificate chain in PEM format.
  /1.0.0/proxies/{id}/thumbprint:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieve a Proxy SSL certificate thumbprint. The thumbprint is
        the SHA-1 hash of the DER encoding of the certificate.
  /1.0.0/pvdcComputePolicies:
    parameters: []
    post:
      tags: []
      description: Creates a new provider vDC compute policy
    get:
      tags: []
      description: Get list of provider vDC compute policies.
  /1.0.0/pvdcComputePolicies/{pvdcComputePolicyId}:
    parameters:
      - name: pvdcComputePolicyId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Delete specified provider vDC compute policy.
    get:
      tags: []
      description: Get specified provider vDC compute policy
    put:
      tags: []
      description: Update specified provider vDC compute policy
  /1.0.0/pvdcComputePolicies/{pvdcComputePolicyId}/vms:
    parameters:
      - name: pvdcComputePolicyId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Get all VMs associated with this pVDC compute policy
  /1.0.0/rights/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieve an individual right.
  /1.0.0/rights:
    parameters: []
    get:
      tags: []
      description: Get list of rights visible to logged-in user
  /1.0.0/rightsBundles/{id}/rights:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Adds the specified rights to a rights bundle.
    get:
      tags: []
      description: Gets a paged list of rights (as references) contained by a particular
        bundle
    put:
      tags: []
      description: Replaces the existing set of rights in bundle with the rights (as
        references) supplied.
  /1.0.0/rightsBundles:
    parameters: []
    post:
      tags: []
      description: Creates a new rights bundle
    get:
      tags: []
      description: Get list of rights bundles
  /1.0.0/rightsBundles/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Delete specified rights bundle
    get:
      tags: []
      description: Get specified rights bundle
    put:
      tags: []
      description: Update specified rights bundle
  /1.0.0/rightsBundles/{id}/tenants/publish:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Publishes the rights bundle to the specified tenants
  /1.0.0/rightsBundles/{id}/tenants/publishAll:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Publishes the rights bundle to all tenants
  /1.0.0/rightsBundles/{id}/tenants/unpublish:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Revokes publication of the rights bundle to the specified tenants
  /1.0.0/rightsBundles/{id}/tenants/unpublishAll:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Unpublishes the rights bundle from all tenants
  /1.0.0/rightsBundles/{id}/tenants:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieves list of tenants for whom the rights bundle is explicitly
        published
    put:
      tags: []
      description: Resets list of tenants for whom the rights bundle is explicitly
        published
  /1.0.0/rightsCategories/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieve an individual Right category.
  /1.0.0/rightsCategories:
    parameters: []
    get:
      tags: []
      description: Get a list of Rights Categories visible to the logged in user
  /1.0.0/roles/{id}/rights:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Adds the specified rights to a role.
    get:
      tags: []
      description: Gets a paged list of rights (as references) contained by a particular
        role
    put:
      tags: []
      description: Replaces the existing set of rights in role with the rights (as
        references) supplied.
  /1.0.0/roles:
    parameters: []
    post:
      tags: []
      description: Creates a new role
    get:
      tags: []
      description: Get list of roles for a tenant
  /1.0.0/roles/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Delete specified role
    get:
      tags: []
      description: Get specified role
    put:
      tags: []
      description: Update specified role
  /1.0.0/sddcProxies:
    parameters: []
    post:
      tags: []
      description: Creates an SDDC proxy.
    get:
      tags: []
      description: Gets a paged list of SDDC proxies for a tenant.
  /1.0.0/sddcProxies/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Delete a specific SDDC proxy. Will not delete an enabled proxy
        unless force is specified.
    get:
      tags: []
      description: Retrieves a specific SDDC proxy.
    put:
      tags: []
      description: Update a specific SDDC proxy.
  /1.0.0/sddcProxiesPac:
    parameters: []
    get:
      tags: []
      description: Gets the .pac file for the user's accessible SDDC proxies.
  /1.0.0/sddcProxiesPac/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Gets the tenant-specific .pac file listing proxies accessible to
        the tenant.
  /1.0.0/sddcProxies/{id}/crl:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieve a SDDC proxy certificate revocation list in PEM format.
    put:
      tags: []
      description: Update a SDDC proxy certificate revocation list in PEM format.
  /1.0.0/sddcProxies/{id}/cert:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieve a SDDC proxy SSL certificate chain in PEM format.
    put:
      tags: []
      description: Update a SDDC proxy certificate chain in PEM format.
  /1.0.0/sddcProxies/{id}/thumbprint:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieve a SDDC Proxy SSL certificate thumbprint. The thumbprint
        is the SHA-1 hash of the DER encoding of the certificate.
  /1.0.0/sddcs:
    parameters: []
    post:
      tags: []
      description: Create a Software-Defined Datacenter.
    get:
      tags: []
      description: Get the list of Software-Defined Datacenters accessible to the
        user.
  /1.0.0/sddcs/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: 'Delete a specific Software-Defined Datacenter. Unless force is
        specified, SDDC & its

        proxies must be disabled before they can be deleted.'
    get:
      tags: []
      description: Retrieve a specific Software-Defined Datacenter.
    put:
      tags: []
      description: Update a specific Software-Defined Datacenter.
  /1.0.0/sddcs/{id}/proxies:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieve the proxies for the Software-Defined Datacenter.
  /1.0.0/sddcs/{id}/owner:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieve the owner of the Software-Defined Datacenter.
    put:
      tags: []
      description: Update the owner of the Software-Defined Datacenter.
  /1.0.0/sddcs/{id}/tenants:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieve the list of tenants a Software-Defined Datacenter is published
        to.
    put:
      tags: []
      description: Reset the list of tenants a Software-Defined Datacenter is published
        to.
  /1.0.0/sddcs/{id}/tenants/publish:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Publish a Software-Defined Datacenter to the given tenants.
  /1.0.0/sddcs/{id}/tenants/unpublish:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Revoke publication of the Software-Defined Datacenter for the tenants.
  /1.0.0/serviceApps/{serviceAppId}:
    parameters:
      - name: serviceAppId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Deletes a specific VMware service application.
    get:
      tags: []
      description: Retrieves a specific VMware service application
    put:
      tags: []
      description: Updates a specific VMware service application.
  /1.0.0/serviceApps:
    parameters: []
    post:
      tags: []
      description: Create a VMware service app
    get:
      tags: []
      description: Get all registered VMware service applications
  /serviceLibrary:
    parameters: []
    post:
      tags: []
      description: Creates a new service
    get:
      tags: []
      description: Get list of services
  /serviceLibrary/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Delete specified service
    get:
      tags: []
      description: Get specified service
    put:
      tags: []
      description: Update specified service
  /serviceItem/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Deletes specified service item
    get:
      tags: []
      description: Get the specified item
    put:
      tags: []
      description: Update specified service item
  /serviceItem/{id}/tenants:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieves list of tenants for whom the service item is explicitly
        published
    put:
      tags: []
      description: Resets list of tenants for whom the service item is explicitly
        published
  /serviceLibrary/{id}/workflows:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: This endpoint will not produce results. It is a placeholder to
        enforce code generation of VroWorkflowServiceItem
    post:
      tags: []
      description: Add VRO remote workflows to this service
  /serviceItem/{id}/tenants/publish:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Publishes the service item to the specified tenants
  /serviceItem/{id}/tenants/publishAll:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Publishes the service item to all tenants
  /serviceItem/{id}/tenants/unpublish:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Revokes publication of the service item to the specified tenants
  /serviceItem/{id}/tenants/unpublishAll:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Unpublishes the service item from all tenants
  /serviceItem:
    parameters: []
    get:
      tags: []
      description: Get all items across all services
  /1.0.0/sessions/{id:((?!provider).)*}/accessibleLocations:
    parameters: []
    get:
      tags: []
      description: Get locations accessible to this session.
  /1.0.0/sessions/{id:((?!provider).)*}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Returns the specified session for current user
    delete:
      tags: []
      description: Logs out the current user
  /1.0.0/sessions:
    parameters: []
    get:
      tags: []
      description: List all sessions for current user
    post:
      tags: []
      description: Logs in a user
  /1.0.0/sessions/{id:((?!provider).)*}/token:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Get token associated with this session.
  /1.0.0/sessions/provider:
    parameters: []
    post:
      tags: []
      description: Logs in a user (Provider only)
  /1.0.0/tokens:
    parameters: []
    post:
      tags: []
      description: Creates a new token for the current user.
    get:
      tags: []
      description: Retrieve tokens for accessing proxies.
  /1.0.0/tokens/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Delete a specific proxy token. Use this to revoke the current token
        in case of a leak.
    get:
      tags: []
      description: Retrieves a specific token
  /extensions/ui/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Delete system level logo
    get:
      tags: []
      description: Retrieves extension specific plugin metadata
    put:
      tags: []
      description: Updates extension specific plugin's metadata
  /extensions/ui/extensionPoints:
    parameters: []
    get:
      tags: []
      description: Retrieves a map of extension Points and an ordered list of items
        registered with that extension point
    put:
      tags: []
      description: Customizes the order and enables/disables extension Points
  /extensions/ui/{id}/plugin:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Delete the plugin for this extension
    post:
      tags: []
      description: Upload the plugin for this extension
  /extensions/ui/{id}/tenants:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieves list of tenants for whom the plugin is explicitly published
  /extensions/ui/{id}/tenants/publish:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Publishes the UI plugin to the specified tenants
  /extensions/ui/{id}/tenants/publishAll:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Publishes the UI plugin to all tenants
  /extensions/ui/{id}/tenants/unpublish:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Revokes publication of the UI plugin to the specified tenants
  /extensions/ui/{id}/tenants/unpublishAll:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Unpublishes the UI plugin from all tenants
  /extensions/ui:
    parameters: []
    post:
      tags: []
      description: Adds plugin metadata for a new UI Extension
    get:
      tags: []
      description: Get a list of all UI Extensions
  /1.0.0/universalRouters/{universalRouterId}:
    parameters:
      - name: universalRouterId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Deletes a specific Universal Router
    get:
      tags: []
      description: Retrieves a specific Universal Router
    put:
      tags: []
      description: Updates a specific Universal Router
  /1.0.0/universalRouters/{universalRouterId}/sync:
    parameters:
      - name: universalRouterId
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Sync/repair the Universal Router
  /1.0.0/universalRouters/{universalRouterId}/dhcp:
    parameters:
      - name: universalRouterId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Deletes Dhcp configuration of a specific Universal Router
    get:
      tags: []
      description: Retrieves Dhcp configuration of a specific Universal Router
    put:
      tags: []
      description: Updates Dhcp configuration for a specific Universal Router
  /1.0.0/universalRouters/{universalRouterId}/dns:
    parameters:
      - name: universalRouterId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Deletes dns configuration of a universal router
    get:
      tags: []
      description: Retrieves dns configuration of a universal router
    put:
      tags: []
      description: Updates dns configuration of a universal Router
  /1.0.0/universalRouters/{universalRouterId}/health:
    parameters:
      - name: universalRouterId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Get Health information of a universal router
  /1.0.0/universalRouters:
    parameters: []
    post:
      tags: []
      description: Create a new universal router
  /1.0.0/vdcGroups/{vdcGroupId}/universalRouters:
    parameters:
      - name: vdcGroupId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Get all the universal routers defined for a vDC group
  /1.0.0/universalRouters/{universalRouterId}/routing:
    parameters:
      - name: universalRouterId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieves Universal Egress Points and routing configuration for
        a Universal Router.
    put:
      tags: []
      description: 'Updates the routing configuration using the specified egress points
        in the universal routes. Any egress point that does not exist will be

        created before updating routing. Any egress point that currently exists and
        is not in use by any of the specified routes will be deleted. If the new

        egress points for routing fail to create, routing will not be updated.'
  /1.0.0/universalRouters/{universalRouterId}/routing/routes:
    parameters:
      - name: universalRouterId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieves routing configuration for a Universal Router.
    put:
      tags: []
      description: Updates routing configuration for a Universal Router.
  /1.0.0/universalRouters/{universalRouterId}/routing/routes/sync:
    parameters:
      - name: universalRouterId
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Sync/repair the routing configuration for a Universal Router.
  /1.0.0/virtualCenters/resources/dvSwitches:
    parameters: []
    get:
      tags: []
      description: Retrieves all distributed virtual switches.
  /1.0.0/virtualCenters/resources/importableDvpgs:
    parameters: []
    get:
      tags: []
      description: Get all DVPG network backings that are available.
  /1.0.0/virtualCenters/resources/importablePortgroups:
    parameters: []
    get:
      tags: []
      description: Get all standard porgroups available as backings.
  /vro/servers/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieves service specific metadata for a vRealize Orchestrator
    delete:
      tags: []
      description: Unregisters a vRealize Orchestrator endpoint from vCloud Director
    put:
      tags: []
      description: Updates service specific metadata for a vRealize Orchestrator
  /vro/servers:
    parameters: []
    get:
      tags: []
      description: Get a list of registered vRealize Orchestrator services
    post:
      tags: []
      description: Register a vRealize Orchestrator endpoint with vCloud Director
  /1.0.0/vdcs/{orgVdcId}/computePolicies:
    parameters:
      - name: orgVdcId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieves all compute policies of a vDC
  /1.0.0/vdcs/{orgVdcId}/maxComputePolicy:
    parameters:
      - name: orgVdcId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieves Max Compute Policy of the vDC.
    put:
      tags: []
      description: Updates Max Compute Policy of the vDC.
  /1.0.0/vdcComputePolicies/{vdcComputePolicyId}/vdcs:
    parameters:
      - name: vdcComputePolicyId
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: Assign this organization vDC compute policy to list of vDCs.
    get:
      tags: []
      description: Get organization vDCs associated with this vDC compute policy
  /1.0.0/vdcComputePolicies:
    parameters: []
    post:
      tags: []
      description: Creates a new organization vDC compute policy
    get:
      tags: []
      description: Get list of organization vDC compute policies.
  /1.0.0/vdcComputePolicies/{vdcComputePolicyId}:
    parameters:
      - name: vdcComputePolicyId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Delete specified organization vDC compute policy.
    get:
      tags: []
      description: Get specified organization vDC compute policy
    put:
      tags: []
      description: Update specified organization vDC compute policy
  /1.0.0/vdcComputePolicies/{vdcComputePolicyId}/vms:
    parameters:
      - name: vdcComputePolicyId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Get all VMs associated with this vDC compute policy
  /1.0.0/vdcGroups/{vdcGroupId}:
    parameters:
      - name: vdcGroupId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Deletes a vDC Group
    get:
      tags: []
      description: Retrieves a specific vDC Group.
    put:
      tags: []
      description: Updates a specific vDC Group.  Example is to add/remove a participarting
        vDC.
  /1.0.0/vdcGroups/{vdcGroupId}/sync:
    parameters:
      - name: vdcGroupId
        in: path
        required: true
        schema:
          type: string
    post:
      tags: []
      description: 'Sync/repair the vDC group. An example usage is to detect if a
        vDC still exists/is valid.

        If an Org vDC referenced by the VDC group is deleted or if it is not participating
        in universal networking,

        it''s status will be updated to OBJECT_NOT_FOUND and the vdc group will be
        marked as NOT_REALIZED.

        If the vDC group has universalNetworkingEnabled set to true, this will also
        initiate a sync of associated router, if any.

        The router entities like egress points and universal routes will also be marked
        as NOT_REALIZED

        if they reference the removed Org vDC.'
  /1.0.0/vdcGroups:
    parameters: []
    post:
      tags: []
      description: Creates a vDC Group.
    get:
      tags: []
      description: Get a list of vDC Groups.
  /1.0.0/vdcs/{orgVdcId}/networkProfile:
    parameters:
      - name: orgVdcId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Deletes/Reset a vDC Network Profile.
    get:
      tags: []
      description: Retrieves the vDC Network Profile.
    put:
      tags: []
      description: Updates the vDC Network Profile.
  /1.0.0/virtualCenters/{vcUrn}/resourcePools/browse/{moref}:
    parameters:
      - name: vcUrn
        in: path
        required: true
        schema:
          type: string
      - name: moref
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Get resource pools of a VC
  /1.0.0/virtualCenters/{vcUrn}/resourcePools/browse:
    parameters:
      - name: vcUrn
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Get resource pools of a VC
  /1.0.0/virtualCenters/{vcUrn}/storageProfiles:
    parameters:
      - name: vcUrn
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Get storage profiles of a VC
  /1.0.0/virtualCenters/{vcUrn}/resourcePools/{moref}/hwv:
    parameters:
      - name: vcUrn
        in: path
        required: true
        schema:
          type: string
      - name: moref
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Get supported hardware versions of a resource pool
  /1.0.0/serviceApps/{serviceAppId}/sddcs:
    parameters:
      - name: serviceAppId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Retrieves a list of SDDCs for a specific VMware service application
        that are available
    post:
      tags: []
      description: Register a VMware service application SDDC's components
  /vro/servers/{vroId}/sdkObjects/{target}/{browsePaths:.+}:
    parameters:
      - name: vroId
        in: path
        required: true
        schema:
          type: string
      - name: target
        in: path
        required: true
        schema:
          type: string
      - name: browsePaths
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Browse remote vRealize Orchestrator inventory
  /vro/servers/{vroId}/entityTypes:
    parameters:
      - name: vroId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Browse remote vRealize Orchestrator inventory
  /vro/servers/{vroId}/entityTypes/{pluginName}:
    parameters:
      - name: vroId
        in: path
        required: true
        schema:
          type: string
      - name: pluginName
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Browse remote vRealize Orchestrator inventory
  /vro/servers/{vroId}/inventory{any:.*}:
    parameters:
      - name: vroId
        in: path
        required: true
        schema:
          type: string
      - name: any
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Browse remote vRealize Orchestrator inventory
  /vro/servers/{vroId}/sdkObjects/{target}:
    parameters:
      - name: vroId
        in: path
        required: true
        schema:
          type: string
      - name: target
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Browse remote vRealize Orchestrator inventory
  /vro/servers/{vroServerId}/workflows:
    parameters:
      - name: vroServerId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Browse remote vRealize Orchestrator workflows
  /workflows/{workflowId}/executions/{executionId}/state:
    parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: string
      - name: executionId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Cancel workflow run
    get:
      tags: []
      description: Get workflow execution state
  /workflows/{workflowId}/executions/{executionId}:
    parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: string
      - name: executionId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Delete workflow run
    get:
      tags: []
      description: Get workflow execution
  /workflows/{workflowId}/executions:
    parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Get all executions
    post:
      tags: []
      description: Start workflow execution
  /workflows/parameterTypes:
    parameters: []
    get:
      tags: []
      description: This endpoint will not produce results. It is a placeholder to
        enforce code generation of ParameterTypes.
  /workflows/decorators:
    parameters: []
    get:
      tags: []
      description: This endpoint will not produce results. It is a placeholder to
        enforce code generation of SupportedDecorators.
  /workflows/presentationElements:
    parameters: []
    get:
      tags: []
      description: This endpoint will not produce results. It is a placeholder to
        enforce code generation of SupportedPresentationElements.
  /workflows/constraints:
    parameters: []
    get:
      tags: []
      description: This endpoint will not produce results. It is a placeholder to
        enforce code generation of SupportedConstraints.
  /workflows/{workflowId}/presentation/instances/{presentationExecutionId}:
    parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: string
      - name: presentationExecutionId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: []
      description: Delete workflow presentation execution
    get:
      tags: []
      description: Load Execution
    put:
      tags: []
      description: Update presentation
  /workflows/{workflowId}/presentation/instances:
    parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Get all presentations
    post:
      tags: []
      description: Start presentation
  /workflows/{workflowId}/presentation:
    parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: []
      description: Get presentation
