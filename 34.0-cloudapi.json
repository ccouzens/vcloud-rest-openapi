{
  "openapi": "3.1.0",
  "info": {
    "title": "vCloud Director OpenAPI",
    "version": "2020-04-03T09:06:08.571-07:00"
  },
  "components": {
    "schemas": {
      "AccessibleLocation": {
        "type": "object",
        "description": "A location accessible to this session.",
        "properties": {
          "locationId": {
            "type": "string",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "site": {
            "$ref": "#/components/schemas/EntityReference"
          },
          "org": {
            "$ref": "#/components/schemas/EntityReference"
          },
          "restApiEndpoint": {
            "type": "string",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "uiEndpoint": {
            "type": "string",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "apiVersion": {
            "type": "string",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          }
        }
      },
      "AllocatedIpAddress": {
        "type": "object",
        "description": "Describes an allocated IP address for a network. IP addresses can be allocated\nto a vApp VM, an edge gateway interface or may be used in a NAT routed environment.\nIf the address is allocated to an edge gateway, the name of the entity will be 'Edge Gateway'.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for record. This is to support UI operations."
          },
          "entityId": {
            "type": "string",
            "description": "Id of the entity to which the IP address is allocated such as a VM."
          },
          "entityName": {
            "type": "string",
            "description": "Name of the entity to which the IP address is allocated."
          },
          "vAppName": {
            "type": "string",
            "description": "Name of the vApp whose VM is using allocated IP address."
          },
          "ipAddress": {
            "type": "string",
            "description": "The allocated IP address."
          },
          "deployed": {
            "type": "boolean",
            "description": "Whether the entity using this IP address is currently deployed."
          },
          "allocationType": {
            "$ref": "#/components/schemas/AllocatedIpAddressAllocationType",
            "description": "The possible allocation types for allocated network address like VSM allocated, VM allocated or NAT routed."
          },
          "networkRef": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "The vApp network or Org vDC network to which this entity is connected."
          },
          "orgRef": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "The organization that this entity belongs to."
          }
        }
      },
      "AllocatedIpAddressAllocationType": {
        "type": "string",
        "description": "The possible allocation types for allocated network address.\nVM_ALLOCATED means that the IP address is allocated by a VM,\nNAT_ROUTED means that the IP address is used in a NAT routed environment and\nVSM_ALLOCATED means that the IP address is allocated to an NSX edge gateway interface.",
        "enum": [
          "VM_ALLOCATED",
          "NAT_ROUTED",
          "VSM_ALLOCATED"
        ]
      },
      "ApplicationPortList": {
        "type": "object",
        "description": "A set of ports and the protocol supported by a application port profile.",
        "properties": {
          "name": {
            "type": "string",
            "description": "The display name."
          },
          "protocol": {
            "$ref": "#/components/schemas/ApplicationPortsProtocolType",
            "description": "The protocol this services applies to."
          },
          "destinationPorts": {
            "type": "array",
            "description": "The set of ports on the destination that the profile applies to. Valid values include single ports and a range of ports.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ApplicationPortProfileScopeType": {
        "type": "string",
        "description": "The definition scope of an Application Port Profile.\nSYSTEM profiles are available to all tenants. They are default profiles from the backing networking provider.\nPROVIDER profiles are available to all tenants. They are defined by the provider at a system level.\nTENANT profiles are available only to the specific tenant organization. They are defined by the tenant or by a provider on behalf of a tenant.",
        "enum": [
          "SYSTEM",
          "PROVIDER",
          "TENANT"
        ]
      },
      "ApplicationPortsProtocolType": {
        "type": "string",
        "description": "The supported protocols for an application port profile.",
        "enum": [
          "TCP",
          "UDP",
          "ICMPv4",
          "ICMPv6"
        ]
      },
      "Association": {
        "type": "object",
        "description": "Site association information for an entity",
        "properties": {
          "entityId": {
            "type": "string",
            "description": "ID of the entity."
          },
          "associationId": {
            "type": "string",
            "description": "ID of the association."
          }
        }
      },
      "AuditTrailEvent": {
        "type": "object",
        "description": "AuditTrailEvent",
        "properties": {
          "eventId": {
            "type": "string",
            "x-vcloud-constraints": [
              {
                "constraint": "Urn",
                "args": [
                  {
                    "arg": "audit"
                  }
                ]
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "description": {
            "type": "string"
          },
          "operatingOrg": {
            "$ref": "#/components/schemas/EntityReference"
          },
          "user": {
            "$ref": "#/components/schemas/EntityReference"
          },
          "eventEntity": {
            "$ref": "#/components/schemas/EntityReference"
          },
          "taskId": {
            "type": "string",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "taskCellId": {
            "type": "string",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ],
            "x-vcloud-restricted": "Visible to provider users only"
          },
          "cellId": {
            "type": "string",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ],
            "x-vcloud-restricted": "Visible to provider users only"
          },
          "eventType": {
            "type": "string"
          },
          "serviceNamespace": {
            "type": "string",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "eventStatus": {
            "type": "string",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "external": {
            "type": "boolean",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "additionalProperties": {
            "type": "object",
            "properties": {},
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ],
            "x-vcloud-restricted": "Visible to users with the 'Perform Administrator Queries' right"
          }
        }
      },
      "AvailableIpPoolSubnet": {
        "type": "object",
        "description": "Describes an available IP address.",
        "properties": {
          "gateway": {
            "type": "string",
            "description": "The gateway for the subnet on which IPs are available."
          },
          "prefixLength": {
            "type": "integer",
            "description": "The netmask prefix length of the subnet."
          },
          "enabled": {
            "type": "boolean",
            "description": "Indicates whether the network subnet is currently enabled.",
            "default": false
          },
          "ipRanges": {
            "$ref": "#/components/schemas/IpRanges",
            "description": "Range of IPs which are available for use."
          },
          "totalIpCount": {
            "type": "integer",
            "description": "The total number of available IP addresses."
          }
        }
      },
      "AvailableIpPoolSubnets": {
        "type": "object",
        "description": "List of available IP addresses.",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AvailableIpPoolSubnet"
            }
          }
        }
      },
      "BackingNetworkType": {
        "type": "string",
        "description": "The backing network type.",
        "enum": [
          "DV_PORTGROUP",
          "VIRTUAL_WIRE",
          "IMPORTED_T_LOGICAL_SWITCH",
          "OPAQUE_NETWORK",
          "NSXT_FIXED_SEGMENT",
          "NSXT_FLEXIBLE_SEGMENT"
        ]
      },
      "BackingRef": {
        "type": "object",
        "description": "Backing Id for an entity not owned by VCD.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id/moref of the backing entity."
          },
          "name": {
            "type": "string",
            "description": "The name of backing entity."
          }
        }
      },
      "Capability": {
        "type": "object",
        "description": "Describes a capability of an entity.",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the capability.",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Description of the capability as it relates to the entity.",
            "readOnly": true
          },
          "value": {
            "type": "object",
            "description": "The value of the capability.",
            "properties": {}
          },
          "type": {
            "$ref": "#/components/schemas/CapabilityValueType",
            "description": "The type of the value."
          },
          "category": {
            "$ref": "#/components/schemas/CapabilityCategory",
            "description": "The category of the capabilities listed."
          }
        }
      },
      "CapabilityCategory": {
        "type": "string",
        "description": "Describes the category of the capability.",
        "enum": [
          "EdgeGateway",
          "VAppNetwork",
          "OrgVdcNetwork",
          "Infra",
          "Security",
          "StoragePolicy",
          "QuotaPolicy"
        ]
      },
      "CapabilityValueType": {
        "type": "string",
        "description": "Describes the object type of the capability value.",
        "enum": [
          "Boolean",
          "String",
          "List"
        ]
      },
      "Cell": {
        "type": "object",
        "description": "A vCloud Director cell.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique id of the cell.",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSortable"
              },
              {
                "constraint": "Urn",
                "args": [
                  {
                    "arg": "cell"
                  }
                ]
              },
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "productBuildDate": {
            "type": "string",
            "format": "date-time",
            "description": "The build date for the version of the product installed on this cell.",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSortable"
              },
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "isActive": {
            "type": "boolean",
            "description": "Cell active state.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the cell.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "primaryIP": {
            "type": "string",
            "description": "The primary ip address of the cell.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "productVersion": {
            "type": "string",
            "description": "The product version of the cell.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          }
        }
      },
      "CommonNsxTRouterFields": {
        "type": "object",
        "description": "Common fields that all Tier-0 or Tier-1 routers have.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique id of the router. Field is sortable."
          },
          "description": {
            "type": "string",
            "description": "The description of the router."
          },
          "displayName": {
            "type": "string",
            "description": "Name used in NSX-T's logs or GUI. Field is sortable."
          }
        }
      },
      "Connection": {
        "type": "object",
        "description": "Connection to test.",
        "properties": {
          "host": {
            "type": "string",
            "description": "The host (or IP address) to connect to.",
            "maxLength": 256
          },
          "port": {
            "type": "integer",
            "description": "The port to use when connecting."
          },
          "secure": {
            "type": "boolean",
            "description": "If the connection should use https.",
            "default": true
          },
          "timeout": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum time (in seconds) any step in the test should wait for a response.",
            "default": 10
          },
          "proxyConnection": {
            "$ref": "#/components/schemas/ProxyConnection"
          }
        },
        "required": [
          "host",
          "port"
        ]
      },
      "ConnectorInitiationMode": {
        "type": "string",
        "description": "This is used by a local endpoint to establish ike connection with the remote site.",
        "enum": [
          "INITIATOR",
          "RESPOND_ONLY",
          "ON_DEMAND"
        ]
      },
      "Constraint": {
        "type": "object",
        "properties": {
          "constraintType": {
            "type": "string"
          }
        },
        "required": [
          "constraintType"
        ],
        "discriminator": "constraintType"
      },
      "CreateCustomEntityTypeAction": {
        "type": "object",
        "properties": {
          "workflowId": {
            "type": "string",
            "description": "uuid of workflow.\n"
          },
          "workflowInputParameter": {
            "type": "string",
            "description": "Name of input parameter of given workflow to which this custom entity type should be mapped.\n"
          }
        },
        "required": [
          "workflowId",
          "workflowInputParameter"
        ]
      },
      "CustomEntities": {
        "type": "object",
        "properties": {
          "entities": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CustomEntity"
            }
          }
        }
      },
      "CustomEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID of custom entity\n"
          },
          "name": {
            "type": "string"
          },
          "customEntityTypeId": {
            "type": "string",
            "description": "This refers to UUID of custom entity type\n"
          }
        },
        "required": [
          "name"
        ]
      },
      "CustomEntityType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID for custom entity type. This is immutable.\n"
          },
          "vroId": {
            "type": "string"
          },
          "vroDynamicType": {
            "type": "string",
            "description": "This refers to VRO's dynamic type.\n"
          },
          "name": {
            "type": "string",
            "description": "Display name.\n"
          },
          "nss": {
            "type": "string",
            "description": "This refers to a unique namespace specific string.\n"
          },
          "description": {
            "type": "string",
            "default": ""
          },
          "tenantScoped": {
            "type": "boolean",
            "default": true
          },
          "providerScoped": {
            "type": "boolean",
            "default": true
          },
          "publishAll": {
            "type": "boolean",
            "description": "Read-only value indicating publishAll state\n",
            "default": false
          }
        }
      },
      "CustomEntityTypeAction": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of workflow\n"
          },
          "workflowId": {
            "type": "string",
            "description": "UUID of workflow.\n"
          },
          "workflowInputParameter": {
            "type": "string",
            "description": "Name of input parameter of given workflow to which this custom entity type should be mapped.\n"
          }
        },
        "required": [
          "name",
          "workflowId"
        ]
      },
      "CustomEntityTypeActions": {
        "type": "object",
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CustomEntityTypeAction"
            }
          }
        }
      },
      "Decorator": {
        "type": "object",
        "properties": {
          "decoratorType": {
            "type": "string"
          }
        },
        "required": [
          "decoratorType"
        ],
        "discriminator": "decoratorType"
      },
      "DfPolicyType": {
        "type": "string",
        "description": "Defragmentation Policy helps to handle defragmentation bits present in the inner packet. COPY copies the defragmentation bit from the inner IP packet\ninto the outer packet. CLEAR ignores the defragmentation bit present in the inner packet.",
        "enum": [
          "COPY",
          "CLEAR"
        ]
      },
      "DhGroupType": {
        "type": "string",
        "description": "The type of Diffie-Helman group. Diffie-Helman groups represent the algorithm used to derive shared keys between the IPSec VPN initiator and responder over\nan unsecured network.",
        "enum": [
          "GROUP2",
          "GROUP5",
          "GROUP14",
          "GROUP15",
          "GROUP16",
          "GROUP19",
          "GROUP20",
          "GROUP21"
        ]
      },
      "DistributedPortGroup": {
        "type": "object",
        "description": "Distributed portgroup.",
        "properties": {
          "backingRef": {
            "$ref": "#/components/schemas/BackingRef",
            "description": "Contains the backing id and name of the distributed portgroup."
          },
          "virtualCenter": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "The entity reference for the vCenter that contains this distributed portgroup."
          },
          "vlan": {
            "type": "string",
            "description": "The VLAN associated with this distributed portgroup. This can be a single number or a numerical range(1-10)."
          },
          "dvSwitch": {
            "$ref": "#/components/schemas/DvSwitch",
            "description": "The distributed virtual switch on which this distributed virtual portgroup was created."
          }
        }
      },
      "DpdConfig": {
        "type": "object",
        "description": "Specifies the Dead Peer Detection Profile. This configurations determines the number of seconds to wait in time between probes\nto detect if an IPSec peer is alive or not. The default value for the DPD probe interval is 60 seconds.",
        "properties": {
          "probeInterval": {
            "type": "integer",
            "description": "The value of the probe interval in seconds. This defines a periodic interval for DPD probes. The minimum is 3 seconds and the maximum is 60 seconds.",
            "minimum": 3,
            "maximum": 60
          }
        },
        "required": [
          "probeInterval"
        ]
      },
      "DvSwitch": {
        "type": "object",
        "description": "Distributed virtual switch.",
        "properties": {
          "backingRef": {
            "$ref": "#/components/schemas/BackingRef",
            "description": "Contains the backing id and name of the distributed virtual switch."
          },
          "virtualCenter": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "The entity reference for the vCenter that contains this distributed virtual switch."
          }
        }
      },
      "DvpgProperties": {
        "type": "object",
        "description": "A list of DvpgProperty for all the DVPG's backing a network",
        "properties": {
          "dvpgProperties": {
            "type": "array",
            "description": "List of DvpgProperty for each DVPG backing this network",
            "items": {
              "$ref": "#/definitions/DvpgProperty"
            }
          }
        }
      },
      "DvpgProperty": {
        "type": "object",
        "description": "A set of properties which can be managed on a DVPG",
        "properties": {
          "dvpgMoref": {
            "type": "string",
            "description": "The VC Moref of the DVPG"
          },
          "promiscuousMode": {
            "type": "boolean",
            "description": "Whether promiscuous mode is currently enabled"
          },
          "forgedTransmit": {
            "type": "boolean",
            "description": "Whether forged transmit is currently enabled"
          },
          "dvSwitch": {
            "$ref": "#/components/schemas/DvSwitch",
            "description": "The DVSwitch that this DVPG was created on"
          }
        }
      },
      "EdgeBgpBfdConfig": {
        "type": "object",
        "description": "Describes BFD configuration for failure detection.",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "A flag indicating whether BFD configuration is enabled or not.",
            "default": false
          },
          "bfdInterval": {
            "type": "integer",
            "format": "int32",
            "description": "Specifies the time interval (in milliseconds) between heartbeat packets.",
            "minimum": 300,
            "maximum": 60000,
            "default": 1000
          },
          "declareDeadMultiple": {
            "type": "integer",
            "format": "int32",
            "description": "Number of times heartbeat packet is missed before BFD declares that the neighbor is down.",
            "minimum": 2,
            "maximum": 16,
            "default": 3
          }
        }
      },
      "EdgeBgpConfig": {
        "type": "object",
        "description": "Specifies the Edge Gateway BGP configuration.",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "A flag indicating whether BGP configuration is enabled or not.",
            "default": true
          },
          "ecmp": {
            "type": "boolean",
            "description": "A flag indicating whether ECMP is enabled or not.",
            "default": true
          },
          "localASNumber": {
            "type": "string",
            "example": "65546",
            "description": "BGP AS number to advertise to BGP peers. BGP AS number can be specified in\neither ASPLAIN or ASDOT formats, like ASPLAIN format :- '65546', ASDOT format :- '1.10'\n"
          },
          "gracefulRestart": {
            "$ref": "#/components/schemas/EdgeBgpGracefulRestartConfig",
            "description": "BGP Graceful Restart configuration. Not specifying a value results\nin default bahavior."
          },
          "version": {
            "$ref": "#/components/schemas/ObjectVersion"
          }
        },
        "required": [
          "localASNumber",
          "version"
        ]
      },
      "EdgeBgpGracefulRestartConfig": {
        "type": "object",
        "description": "Describes current graceful restart configuration mode and timer for BGP configuration on an edge gateway.",
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/GracefulRestartModeTypes",
            "description": "Currently configured graceful restart mode. Default is HELPER_ONLY."
          },
          "restartTimer": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum time taken (in seconds) for a BGP session to be established after a restart.\nIf the session is not re-established within this timer, the receiving speaker will\ndelete all the stale routes from that peer.\n",
            "minimum": 1,
            "maximum": 3600,
            "default": 180
          },
          "staleRouteTimer": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum time (in seconds) before stale routes are removed when BGP restarts.",
            "minimum": 1,
            "maximum": 3600,
            "default": 600
          }
        }
      },
      "EdgeBgpNeighbor": {
        "type": "object",
        "description": "A BGP neighbor configuration.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique id of this BGP neighbor. On updates, the id is required for the object, while for create a new id will be generated. This id is not a VCD URN.\n"
          },
          "neighborAddress": {
            "type": "string",
            "example": "10.22.1.100",
            "description": "The IP address of the BGP neighbor. Both IPv4 and IPv6 formats are supported."
          },
          "remoteASNumber": {
            "type": "string",
            "example": "65546",
            "description": "The remote AS number of a BGP neighbor in ASPLAIN format."
          },
          "keepAliveTimer": {
            "type": "integer",
            "format": "int32",
            "description": "Specifies the time interval (in seconds) between keep alive messages sent to peer.",
            "minimum": 1,
            "maximum": 65535,
            "default": 60
          },
          "holdDownTimer": {
            "type": "integer",
            "format": "int32",
            "description": "Specifies the time interval (in seconds) before declaring a peer dead.",
            "minimum": 1,
            "maximum": 65535,
            "default": 180
          },
          "gracefulRestartMode": {
            "$ref": "#/components/schemas/GracefulRestartModeTypes",
            "description": "Currently configured graceful restart configuration mode. Default is HELPER_ONLY."
          },
          "bfd": {
            "$ref": "#/components/schemas/EdgeBgpBfdConfig",
            "description": "Specifies the BFD configuration for failure detection. Not specifying a value results\nin default bahavior."
          },
          "allowASIn": {
            "type": "boolean",
            "description": "A flag indicating whether AllowAS-in is enabled or not. This specifies whether BGP neighbors\ncan receive routes with same AS.\n",
            "default": false
          },
          "neighborPassword": {
            "type": "string",
            "description": "Password for BGP neighbor authentication. Empty string (\"\") clears existing password.\nNot specifying a value will be treated as \"no password\".\n",
            "maxLength": 20
          },
          "ipAddressTypeFiltering": {
            "type": "string",
            "description": "Specifies IP address type based filtering in each direction. Setting the value to\n'DISABLED' will disable address family based filtering.",
            "enum": [
              "IPV4",
              "IPV6",
              "DISABLED"
            ],
            "default": "DISABLED"
          },
          "inRoutesFilterRef": {
            "$ref": "#/components/schemas/ExtObjectReference",
            "description": "Specifies route filtering configuration for the BGP neighbor in IN direction.\nIt is the reference to the prefix list, indicating which routes to filter for IN direction.\nNot specifying a value will be treated as \"no IN route filters\"."
          },
          "outRoutesFilterRef": {
            "$ref": "#/components/schemas/ExtObjectReference",
            "description": "Specifies route filtering configuration for the BGP neighbor in OUT direction.\nIt is the reference to the prefix list, indicating which routes to filter for OUT direction.\nNot specifying a value will be treated as \"no OUT route filters\"."
          },
          "version": {
            "$ref": "#/components/schemas/ObjectVersion"
          }
        },
        "required": [
          "neighborAddress",
          "remoteASNumber"
        ]
      },
      "EdgeBgpNeighbors": {
        "type": "object",
        "description": "List of all configured BGP neighbors for an edge gateway.",
        "properties": {
          "values": {
            "type": "array",
            "description": "All BGP neighbors for an edge gateway.",
            "items": {
              "$ref": "#/definitions/EdgeBgpNeighbor"
            }
          }
        }
      },
      "EdgeCluster": {
        "type": "object",
        "description": "An Edge Cluster object.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the Edge Cluster in URN format."
          },
          "name": {
            "type": "string",
            "description": "The name of the Edge Cluster. Names for Edge Clusters must be unique across the system."
          },
          "description": {
            "type": "string"
          },
          "resourcePool": {
            "$ref": "#/components/schemas/ResourcePool",
            "description": "The Resource Pool in vCenter where the Edge VM will be deployed."
          },
          "storageProfileName": {
            "type": "string",
            "description": "Name of the Storage Profile. This will define the set of datastores where the edge vm will be deployed."
          }
        },
        "required": [
          "name",
          "storageProfileName"
        ]
      },
      "EdgeDnsConfig": {
        "type": "object",
        "description": "Specifies the DNS forwarder configuration for an edge gateway backed by NSX-T.",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "True means that the forwarder is enabled. False means it's disabled.",
            "default": false
          },
          "listenerIp": {
            "type": "string",
            "description": "The IP on which the DNS forwarder listens. If the Edge Gateway has a dedicated external network, this can be changed."
          },
          "defaultForwarderZone": {
            "$ref": "#/components/schemas/NsxtDnsForwarderZoneConfig",
            "description": "The default forwarder zone to use if there's no matching domain in the conditional forwarder zone."
          },
          "conditionalForwarderZones": {
            "type": "array",
            "description": "The list of forwarder zones with its matching DNS domains.",
            "items": {
              "$ref": "#/definitions/NsxtDnsForwarderZoneConfig"
            },
            "maxItems": 5,
            "minItems": 0
          },
          "version": {
            "$ref": "#/components/schemas/ObjectVersion"
          },
          "snatRuleEnabled": {
            "type": "boolean",
            "description": "Whether there is an SNAT rule exists for the DNS forwarder or not. In NAT routed environments, an SNAT rule is required for the Edge DNS forwarder to send\ntraffic to an upstream server. In fully routed environments, this is not needed if the listener IP is on an advertised subnet. If the Edge Gateway has a\ndedicated external network and the listener IP has been changed, there will not be an SNAT rule for the DNS forwarder. In all other cases the SNAT rule will\nexist.\n"
          }
        }
      },
      "EdgeGatewayBacking": {
        "type": "object",
        "description": "The backing details of the edge gateway",
        "properties": {
          "backingId": {
            "type": "string",
            "description": "The identifier of the edge gateways backing router."
          },
          "gatewayType": {
            "$ref": "#/components/schemas/EdgeGatewayType",
            "description": "The type of the gateway. Describes if this is an NSX-T edge gateway or an NSX-V edge gateway."
          },
          "networkProvider": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "The backing network provider, either NSX-T or NSX-V."
          }
        }
      },
      "EdgeGatewaySubnets": {
        "type": "object",
        "description": "List of Subnets of an edge gateway",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/EdgeGatewaySubnet"
            }
          }
        }
      },
      "EdgeGatewayType": {
        "type": "string",
        "description": "The type of the edge gateway.",
        "enum": [
          "NSXV_BACKED",
          "NSXT_BACKED",
          "NSXT_IMPORTED"
        ]
      },
      "EdgeGatewayUplink": {
        "type": "object",
        "description": "The uplink (i.e. external network) that the edge gateway is connected to. This also contains the external network IPs that are allocated to the edge.",
        "properties": {
          "uplinkId": {
            "type": "string",
            "description": "The identifier of the external network this edge gateway is connected to."
          },
          "uplinkName": {
            "type": "string",
            "description": "The name of the external network this edge gateway is connected to."
          },
          "subnets": {
            "$ref": "#/components/schemas/EdgeGatewaySubnets",
            "description": "Set of subnets this edge will have access to."
          },
          "connected": {
            "type": "boolean",
            "description": "Whether or not the gateway is connected to this uplink. This value defaults to true if it is not set. When filtering by this field, if the filter is false, all gateways that have 0 connected uplinks will be returned, while if it is true, all gateways with at least one connected uplink will be returned.",
            "default": true
          },
          "quickAddAllocatedIpCount": {
            "type": "integer",
            "description": "If set on create or update api calls, the specified number of IP addresses will be additionally allocated for this uplink. IPs will be allocated from multiple subnets if needed."
          },
          "dedicated": {
            "type": "boolean",
            "description": "If set to true, then the associated external network is exclusively used by this edge gateway.",
            "default": false
          }
        }
      },
      "EdgeIpSecVpnTunnel": {
        "type": "object",
        "description": "Specifies the IPSec VPN tunnel configuration.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique id of this IPSec VPN tunnel. On updates, the id is required for the tunnel, while for create a new id will be generated.\n"
          },
          "name": {
            "type": "string",
            "description": "Name for the tunnel."
          },
          "description": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean",
            "description": "Described whether the tunnel is enabled or not. The default is true.",
            "default": true
          },
          "localEndpoint": {
            "$ref": "#/components/schemas/LocalEndpoint",
            "description": "The Local Endpoint which corresponds to the Edge Gateway the tunnel is being configured on. Local Endpoint requires an IP. That IP must be suballocated to the\nedge gateway."
          },
          "remoteEndpoint": {
            "$ref": "#/components/schemas/RemoteEndpoint",
            "description": "The Remote Endpoints correspoinds to the device on the remote site terminating the VPN tunnel."
          },
          "preSharedKey": {
            "type": "string",
            "description": "This is the Pre-shared key used for authentication."
          },
          "connectorInitiationMode": {
            "$ref": "#/components/schemas/ConnectorInitiationMode",
            "description": "This is the mode used by the local endpoint to establish an IKE Connection with the remote site. The default is INITIATOR."
          },
          "securityType": {
            "type": "string",
            "description": "This is the security type used for the IPSec Tunnel. If nothing is specified, this will be set to 'DEFAULT' in which the default settings in NSX will be used.\nFor custom settings, one should use the connectionProperties endpoint to specify custom settings. The security type will then appropriately reflect itself as\n'CUSTOM'.\n",
            "default": "DEFAULT"
          },
          "logging": {
            "type": "boolean",
            "description": "Whether logging for the tunnel is enabled or not. The default is false.",
            "default": false
          },
          "version": {
            "$ref": "#/components/schemas/ObjectVersion"
          }
        },
        "required": [
          "localEndpoint",
          "name",
          "preSharedKey",
          "remoteEndpoint"
        ]
      },
      "EdgeIpSecVpnTunnelConnectionProperties": {
        "type": "object",
        "description": "This specifies the given security profile/connection properties of a given IP Sec VPN Tunnel, such as Dead Probe Interval and IKE settings. If a security type\nis set to 'CUSTOM', then ike, tunnel, and/or dpd configurations can be specified. Otherwise, those fields are read only and are set to the values based on the specific\nsecurity type.",
        "properties": {
          "securityType": {
            "type": "string",
            "description": "This is the security type used for the IPSec Tunnel. If nothing is specified, this will be set to 'DEFAULT' in which the default settings in NSX will be used.\nIf 'CUSTOM' is specified, then ike, tunnel, and dpd configurations can be set.\n",
            "default": "DEFAULT"
          },
          "ikeConfiguration": {
            "$ref": "#/components/schemas/IkeConfig",
            "description": "The IKE Configuration to be used for the tunnel. If nothing is explictly set, the system defaults will be used."
          },
          "tunnelConfiguration": {
            "$ref": "#/components/schemas/TunnelConfig",
            "description": "The Tunnel Configuration, which contains parameters such as encryption algorithm to be used. If nothing is explicitly set, the system defaults will be used."
          },
          "dpdConfiguration": {
            "$ref": "#/components/schemas/DpdConfig",
            "description": "The Dead Peer Detection configuration. If nothing is explictly set, the system defaults will be used."
          }
        }
      },
      "EdgeIpSecVpnTunnelStatistics": {
        "type": "object",
        "description": "Specifies the statistics for the given IPSec VPN Tunnel.",
        "properties": {
          "localSubnet": {
            "type": "string",
            "description": "Local subnet to which a tunnel belongs."
          },
          "peerSubnet": {
            "type": "string",
            "description": "Peer subnet to which a tunnel belongs."
          },
          "packetsIn": {
            "type": "integer",
            "format": "int64",
            "description": "Number of packets received."
          },
          "packetsOut": {
            "type": "integer",
            "format": "int64",
            "description": "Number of packets sent."
          },
          "bytesIn": {
            "type": "integer",
            "format": "int64",
            "description": "Number of bytes received."
          },
          "bytesOut": {
            "type": "integer",
            "format": "int64",
            "description": "Number of bytes sent."
          },
          "packetsSentError": {
            "type": "integer",
            "format": "int64",
            "description": "Number of packets sent with errors."
          },
          "packetsReceivedError": {
            "type": "integer",
            "format": "int64",
            "description": "Number of packets reveived with errors."
          },
          "packetsInDropped": {
            "type": "integer",
            "format": "int64",
            "description": "Number of packets dropped while receiving."
          },
          "packetsOutDropped": {
            "type": "integer",
            "format": "int64",
            "description": "Number of packets dropped while sending."
          },
          "encryptionErrors": {
            "type": "integer",
            "format": "int64",
            "description": "Number of encryption errors."
          },
          "decryptionErrors": {
            "type": "integer",
            "format": "int64",
            "description": "Number of decryption errors."
          },
          "overflowErrors": {
            "type": "integer",
            "format": "int64",
            "description": "Number of errors due to overflow."
          },
          "replayErrors": {
            "type": "integer",
            "format": "int64",
            "description": "Number of replay errors."
          },
          "integrityErrors": {
            "type": "integer",
            "format": "int64",
            "description": "Number of integrity check errors."
          },
          "saMismatchInErrors": {
            "type": "integer",
            "format": "int64",
            "description": "Number of SA mismatch errors while receiving."
          },
          "saMismatchOutErrors": {
            "type": "integer",
            "format": "int64",
            "description": "Number of SA mismatch errors while sending."
          },
          "noMatchingPolicyErrors": {
            "type": "integer",
            "format": "int64",
            "description": "Number of packets dropped because of no matching policy is available."
          }
        }
      },
      "EdgeIpSecVpnTunnelStatus": {
        "type": "object",
        "description": "This includes the IPSec Tunnel status such as whether the tunnel is up or down and the IKE Session status.",
        "properties": {
          "tunnelStatus": {
            "$ref": "#/components/schemas/TunnelStatus",
            "description": "Gives the overall IPSec VPN Tunnel Status. If IKE is properly set and the tunnel is up, the tunnel status will be UP."
          },
          "ikeStatus": {
            "$ref": "#/components/schemas/IkeStatus",
            "description": "Status for the actual IKE Session for the given tunnel."
          }
        }
      },
      "EdgeNatRule": {
        "type": "object",
        "description": "The configuration for a given NAT Rule.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique id of the NAT Rule. This must be supplied when updating a given NAT Rule. On creation, an unique id is generated for the NAT Rule.\n"
          },
          "name": {
            "type": "string",
            "description": "User friendly name for the NAT Rule. Name must be provided."
          },
          "description": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean",
            "description": "A flag indicating whether the individual nat rule is enabled or not. The default is true.",
            "default": true
          },
          "ruleType": {
            "$ref": "#/components/schemas/NatRuleType",
            "description": "Represents the type of NAT Rule. SNAT translates an internal IP to an external IP and is used for outbound traffic.\nDNAT translates the external IP to an internal IP and is used for inbound traffic."
          },
          "applicationPortProfile": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "Represents the application ports on which the NAT Rule will be applied. An application port profile id in the form of URN format must be provided.\nIf not provided then the port will be considered as \"ANY\"."
          },
          "externalAddresses": {
            "type": "string",
            "description": "The external addresses for the NAT Rule. This must be supplied as a single IP or Network CIDR. For a DNAT rule, this is the external facing IP Address for incoming traffic.\nFor an SNAT rule, this is the external facing IP Address for outgoing traffic. These ips are typically allocated/suballocated IP Addresses on\nthe Edge Gateway.\n"
          },
          "internalAddresses": {
            "type": "string",
            "description": "The internal addresses for the NAT Rule. This must be supplied as a single IP or Network CIDR. For a DNAT rule, this is the internal IP Address for incoming traffic.\nFor an SNAT rule, this is the internal IP Address for outgoing traffic. These ips are typically the Private IPs that are allocated to workloads.\n"
          },
          "internalPort": {
            "type": "string",
            "description": "Port number or port range for incoming network traffic. If Any Traffic is selected for the Service, the default internal port is \"ANY\".\n"
          },
          "logging": {
            "type": "boolean",
            "description": "A flag indicating whether logging for the individual nat rule is enabled or not. The default is false.",
            "default": false
          },
          "systemRule": {
            "type": "boolean",
            "description": "A flag indicating whether this NAT rule is managed by the system. This is not user editable",
            "default": false
          },
          "snatDestinationAddresses": {
            "type": "string",
            "description": "The destination addresses to match in the SNAT Rule. This must be supplied as a single IP or Network CIDR.\nProviding no value for this field results in match with ANY destination network. These IPs are typically\nthe Private IPs that are allocated to destination workloads.\n"
          },
          "version": {
            "$ref": "#/components/schemas/ObjectVersion"
          }
        },
        "required": [
          "externalAddresses",
          "internalAddresses",
          "name",
          "ruleType"
        ]
      },
      "EdgePrefixList": {
        "type": "object",
        "description": "A list of prefixes for routing purposes. Prefix list contains one or more ordered entries\nwhich are processed sequentially.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique id of this prefix list. On updates, the id is required for the list, while for create a new id will be generated. This id is not a VCD URN.\n"
          },
          "name": {
            "type": "string",
            "description": "Name for the prefix list."
          },
          "description": {
            "type": "string",
            "description": "Description for this prefix list."
          },
          "prefixes": {
            "type": "array",
            "description": "List of network prefixes.",
            "items": {
              "$ref": "#/definitions/EdgePrefixListEntry"
            },
            "minItems": 1
          },
          "version": {
            "$ref": "#/components/schemas/ObjectVersion"
          }
        },
        "required": [
          "name",
          "prefixes"
        ]
      },
      "EdgePrefixListEntry": {
        "type": "object",
        "description": "A network prefix entry used for routing purposes.",
        "properties": {
          "network": {
            "type": "string",
            "example": "10.22.0.0/22",
            "description": "The network prefix in CIDR format. If the value is not specified,\nit will be treated as \"ANY\" which means match all networks.\nBoth IPv4 and IPv6 formats are supported.\n"
          },
          "action": {
            "type": "string",
            "description": "Action for the prefix list. This specifies whether the packet from specified network is advertised\nor not for routing purposes.",
            "enum": [
              "PERMIT",
              "DENY"
            ],
            "default": "PERMIT"
          },
          "greaterThanEqualTo": {
            "type": "integer",
            "format": "int32",
            "description": "The value which the prefix length must be greater than or equal to. Must be less than or equal to 'lessThanEqualTo'",
            "minimum": 1,
            "maximum": 128
          },
          "lessThanEqualTo": {
            "type": "integer",
            "format": "int32",
            "description": "The value which the prefix length must be less than or equal to. Must be greater than or equal to 'greaterThanEqualTo'",
            "minimum": 1,
            "maximum": 128
          }
        }
      },
      "EdgePrefixLists": {
        "type": "object",
        "description": "List of all configured Prefix lists for an edge gateway.",
        "properties": {
          "values": {
            "type": "array",
            "description": "All Prefix lists.",
            "items": {
              "$ref": "#/definitions/EdgePrefixList"
            }
          }
        }
      },
      "EgressPoint": {
        "type": "object",
        "description": "An Egress Point.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID for the Universal Egress Point (read-only)."
          },
          "vdcRef": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "The Org vDC the Universal Egress Point belongs to."
          },
          "gatewayRef": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "The Edge Gateway the Egress Point is referring to."
          },
          "networkProviderScope": {
            "type": "string",
            "description": "Read-only field that specifies the network provider scope of the Universal Egress Point (inherited from the Org vDC)."
          },
          "isUsedForRouting": {
            "type": "boolean",
            "description": "Specifies whether the egress point is being used for Universal Routing. This is a read-only field."
          },
          "status": {
            "$ref": "#/components/schemas/VdcGroupEntityStatus",
            "description": "The status of the Universal Egress Point."
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "EgressPointReference": {
        "type": "object",
        "description": "An EgressPoint reference object for use in universal routing.",
        "properties": {
          "egressPointId": {
            "type": "string",
            "description": "The id of the Universal Egress Point reference."
          },
          "vdcRef": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "The Org vDC of the Universal Egress Point reference."
          },
          "gatewayRef": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "The Edge Gateway of the Universal Egress Point reference."
          }
        }
      },
      "EgressPoints": {
        "type": "object",
        "description": "List of Egress Points.",
        "properties": {
          "values": {
            "type": "array",
            "description": "The list of Universal Egress Points.",
            "items": {
              "$ref": "#/definitions/EgressPoint"
            }
          }
        }
      },
      "EmailSettings": {
        "type": "object",
        "description": "Email related settings for a system",
        "properties": {
          "defaultSmtpServer": {
            "type": "boolean",
            "description": "Flag indicating if the smtp server settings are system default (true) or a particular organization (false)\n"
          },
          "defaultOrgEmail": {
            "type": "boolean",
            "description": "Flag indicating if the email settings are system default (true) or for a particular organization (false)\n"
          },
          "smtpServer": {
            "$ref": "#/components/schemas/SmtpServerSpec"
          },
          "senderEmailAddress": {
            "type": "string",
            "description": "Sender email address in an email notification or alert\n"
          },
          "defaultEmailSubjectPrefix": {
            "type": "string",
            "description": "The prefix used in the email subject line for all email notifications and alerts from the system\n"
          },
          "alertEmailToAllAdmins": {
            "type": "boolean",
            "description": "A flag to indicate the choice between sending alert emails to all system\nadministrators in the system and designated list of email recipients\n"
          },
          "alertEmailTo": {
            "type": "string",
            "description": "A comma separated email addresses to send all alert messages to\n"
          }
        }
      },
      "EntityReference": {
        "type": "object",
        "description": "Entity reference used to describe VCD entities",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "Error": {
        "type": "object",
        "description": "Error type format displayed to users for exceptions emerging from openapi endpoints.",
        "properties": {
          "minorErrorCode": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "stackTrace": {
            "type": "string"
          }
        },
        "required": [
          "message",
          "minorErrorCode"
        ]
      },
      "ExecutionContext": {
        "type": "object",
        "properties": {
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WsParameter"
            }
          }
        }
      },
      "ExecutionState": {
        "type": "string",
        "enum": [
          "canceled",
          "completed",
          "running",
          "suspended",
          "waiting",
          "waiting-signal",
          "failed",
          "initializing"
        ]
      },
      "ExecutionSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          },
          "startedBy": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/ExecutionState"
          }
        }
      },
      "ExtObjectReference": {
        "type": "object",
        "description": "Reference for entities which are external to VCD and do not have a VCD URN identifier.",
        "properties": {
          "id": {
            "type": "string",
            "example": "2a4ba9ad-e8d5-409c-8cae-c06910cd9b47",
            "description": "The id of the entity."
          },
          "name": {
            "type": "string",
            "description": "The name of entity."
          }
        }
      },
      "ExtensionPoint": {
        "type": "object",
        "description": "Extension Point of a UI Plugin",
        "properties": {
          "extensionPointId": {
            "type": "string"
          },
          "pluginId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "required": [
          "enabled",
          "extensionPointId",
          "pluginId"
        ]
      },
      "ExtensionPointSummary": {
        "type": "object",
        "description": "A map of extension Points and an ordered list of items registered with that extension point",
        "properties": {
          "extensionPointRegistrations": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExtensionPoint"
              }
            }
          }
        }
      },
      "ExternalNetworkBacking": {
        "type": "object",
        "description": "Information about an external network backing.",
        "properties": {
          "backingId": {
            "type": "string",
            "description": "Unique identifier for the network backing in NSX/vCenter."
          },
          "backingType": {
            "$ref": "#/components/schemas/ExternalNetworkBackingType",
            "description": "Type of network backing."
          },
          "networkProvider": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "The Network Provider for the backing, either a vCenter Server or NSX-T Manager."
          },
          "name": {
            "type": "string",
            "description": "The name of this external network backing, if it exists.",
            "x-vcloud-added-in": 33
          }
        }
      },
      "ExternalNetworkBackingType": {
        "type": "string",
        "description": "The type of the external network backing.",
        "enum": [
          "PORTGROUP",
          "DV_PORTGROUP",
          "NSXT_TIER0",
          "UNKNOWN"
        ]
      },
      "ExternalNetworkBackings": {
        "type": "object",
        "description": "List of External Network backings.",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExternalNetworkBacking"
            }
          }
        }
      },
      "FirewallGroupAssociatedVM": {
        "type": "object",
        "description": "Represents an associated virtual machine. Contains the VM name and parent vApp name.",
        "properties": {
          "vmRef": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "Reference to the vm associated with this firewall group."
          },
          "vappRef": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "Reference to the vApp of the associated vm."
          },
          "vdcRef": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "Reference to the vDC of the associated vm."
          },
          "orgRef": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "Reference to the organization of the associated vm."
          }
        }
      },
      "FirewallGroupScope": {
        "type": "object",
        "description": "Describes the scope and relationship that this firewall group has with other VCD entities.",
        "properties": {
          "orgRef": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "The organization that this firewall group belongs to. This property is read-only and cannot be updated."
          },
          "edgeGatewayRef": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "The edge gateway that this firewall group is scoped to. This means that this firewall group can be used when configuring firewall rules for the edge gateway.\nThis property is required and cannot be updated."
          },
          "networkProviderScope": {
            "type": "string",
            "description": "The network provider scope that this object belongs to. This is a read-only property and is determined by the input context entity ID during object creation.\n",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          }
        }
      },
      "FirewallGroupType": {
        "type": "string",
        "description": "Defines the type of Firewall Group. These groups can be used in Firewall Rules to define rules that are scoped to the IP Addresses/Members\ndefined in a Firewall Group.\n<ul>\n  <li> <code> IP_SET </code> should be used when using particular IP Addresses of VMs, Networks, etc.\n  <li> <code> SECURITY_GROUP </code> should be used when specifying exact members such as a particular Org vDC Network.\n</ul>\nThe default is IP_SET.",
        "enum": [
          "IP_SET",
          "SECURITY_GROUP"
        ]
      },
      "FirewallRule": {
        "type": "object",
        "description": "Describes a Firewall rule.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique id of this firewall rule. If a rule with the ruleId\nis not already present, a new rule will be created. If it already\nexists, the rule will be updated.\n",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "name": {
            "type": "string",
            "description": "Name for the rule.",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "description": {
            "type": "string",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "sourceFirewallGroups": {
            "type": "array",
            "description": "List of source groups for firewall rule. It specifies the sources of network traffic for the firewall rule.\nNull value or an empty list will be treated as \"ANY\" which means traffic from any source.\n",
            "items": {
              "$ref": "#/definitions/EntityReference"
            },
            "maxItems": 128,
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "destinationFirewallGroups": {
            "type": "array",
            "description": "List of source groups for firewall rule. It specifies the destinations of network traffic for the firewall rule.\nNull value or an empty list will be treated as \"ANY\" which means traffic to any destination.\n",
            "items": {
              "$ref": "#/definitions/EntityReference"
            },
            "maxItems": 128,
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "applicationPortProfiles": {
            "type": "array",
            "description": "The list of application ports where this firewall rule is applicable.\nNull value or an empty list will be treated as \"ANY\" which means rule applies to all ports.\n",
            "items": {
              "$ref": "#/definitions/EntityReference"
            },
            "maxItems": 128
          },
          "ipProtocol": {
            "$ref": "#/components/schemas/FirewallRuleIpProtocol",
            "description": "Type of IP packet that should be matched while enforcing the rule.\nDefault value is IPV4_IPV6."
          },
          "action": {
            "$ref": "#/components/schemas/FirewallRuleAction",
            "description": "The action to be applied to all the traffic that meets the firewall rule criteria.\nIt determines if the rule permits or blocks traffic."
          },
          "direction": {
            "$ref": "#/components/schemas/FirewallRuleDirection",
            "description": "Specifies the direction of the network traffic.\nDefault value is IN_OUT."
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the firewall rule is enabled.",
            "default": true,
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "version": {
            "$ref": "#/components/schemas/ObjectVersion"
          }
        },
        "required": [
          "action",
          "name"
        ]
      },
      "FirewallRuleAction": {
        "type": "string",
        "description": "Defines the firewall rule action to be applied.",
        "enum": [
          "ALLOW",
          "DROP"
        ]
      },
      "FirewallRuleDirection": {
        "type": "string",
        "description": "Defines direction of traffic for firewall rule.",
        "enum": [
          "IN",
          "OUT",
          "IN_OUT"
        ]
      },
      "FirewallRuleIpProtocol": {
        "type": "string",
        "description": "Specifies the IP protocol for the network packet that should be matched while enforcing the rule.\nIPV4_IPV6 means both IPV4 and IPV6 packet type.",
        "enum": [
          "IPV4",
          "IPV6",
          "IPV4_IPV6"
        ]
      },
      "GatewayEdgeClusterConfig": {
        "type": "object",
        "description": "Represents the Edge Cluster Configuration for a given Edge Gateway.",
        "properties": {
          "primaryEdgeCluster": {
            "$ref": "#/components/schemas/GatewayEdgeClusterReference",
            "description": "This represents the Primary Edge Cluster used for the gateway.\nFor NSX-T Edges, this means the Edge Cluster the Tier 1 SR resides on. The user should\nspecify the ID of the NSX-T edge cluster as the value of primaryEdgeCluster's backingId.\nFor NSX-V Edges, this means the primary appliance for the gateway."
          },
          "secondaryEdgeCluster": {
            "$ref": "#/components/schemas/GatewayEdgeClusterReference",
            "description": "This represents the Secondary Edge Cluster used for the gateway.\nIt is only applicable for NSX-V Edges when High Availability is enabled. If HA\nis enabled and no secondary edge cluster is specified, both appliances will be\ndeployed on the primary edge cluster. If there is a specific secondary edge cluster,\nthe standby/secondary appliance will be deployed on the secondary edge cluster.\nFor NSX-T Edges, the value of secondaryEdgeCluster should be set to NULL."
          }
        },
        "required": [
          "primaryEdgeCluster"
        ]
      },
      "GatewayEdgeClusterReference": {
        "type": "object",
        "description": "This represents the reference to an Edge Cluster used for the gateway.",
        "properties": {
          "edgeClusterRef": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "The reference to VCD Edge Cluster."
          },
          "backingId": {
            "type": "string",
            "description": "The Id of the edge cluster in NSX-T manager. The user should\nspecify the id of NSX-T edge cluster during edge gateway create/update.\nVCD will automatically create a corresponding VCD Edge cluster object\nreferencing the specified NSX-T edge cluster.\nFor NSX-V Edges, this is set to NULL.\n"
          }
        }
      },
      "GatewayUsedIpAddress": {
        "type": "object",
        "description": "Describes an IP address currently be used by the edge gateway. The IP belongs to the IPs allocated to the edge.",
        "properties": {
          "networkRef": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "The external network that this IP Address belongs to."
          },
          "ipAddress": {
            "type": "string",
            "description": "The IP address in used."
          },
          "category": {
            "$ref": "#/components/schemas/GatewayUsedIpAddressCategory",
            "description": "The catagory that an IP can be used for."
          }
        }
      },
      "GatewayUsedIpAddressCategory": {
        "type": "string",
        "description": "The categories that an IP can be used for.",
        "enum": [
          "SNAT",
          "DNAT",
          "Load_Balancer",
          "IPsec_VPN",
          "SSL_VPN",
          "L2_VPN",
          "PRIMARY_IP"
        ]
      },
      "GracefulRestartModeTypes": {
        "type": "string",
        "description": "Describes Graceful Restart configuration Modes for BGP configuration on an edge gateway.\nHELPER_ONLY mode is the ability for a BGP speaker to indicate its ability\nto preserve forwarding state during BGP restart.\nGRACEFUL_RESTART mode is the ability of a BGP speaker to advertise its restart\nto its peers.\n<ul>\n  <li> DISABLE - Both graceful restart and helper modes are disabled.\n  <li> HELPER_ONLY - Only helper mode is enabled.\n  <li> GRACEFUL_AND_HELPER - Both graceful restart and helper modes are enabled.\n</ul>",
        "enum": [
          "DISABLE",
          "HELPER_ONLY",
          "GRACEFUL_AND_HELPER"
        ]
      },
      "HardwareVersions": {
        "type": "object",
        "description": "Set of supported ESXi virtual hardware versions.",
        "properties": {
          "versions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IkeConfig": {
        "type": "object",
        "description": "This configuration captures the IKE and phase one negotiation parameters. This configuration can be set for peering properly with remote peers.",
        "properties": {
          "ikeVersion": {
            "$ref": "#/components/schemas/IkeVersionType",
            "description": "IKE Protocol Version to use. The default is IKE_V2."
          },
          "dhGroups": {
            "type": "array",
            "description": "The list of Diffie-Helman groups to be used is PFS is enabled. Default is GROUP14.",
            "items": {
              "$ref": "#/definitions/DhGroupType"
            },
            "minItems": 1
          },
          "digestAlgorithms": {
            "type": "array",
            "description": "The list of Digest algorithms for IKE. This is used during IKE negotiation. Default is SHA2_256.",
            "items": {
              "$ref": "#/definitions/IkeDigestAlgorithmType"
            }
          },
          "encryptionAlgorithms": {
            "type": "array",
            "description": "The list of Encryption algorithms for IKE. This is used during IKE negotiation. Default is AES_128.",
            "items": {
              "$ref": "#/definitions/IkeEncryptionAlgorithmType"
            },
            "minItems": 1
          },
          "saLifeTime": {
            "type": "integer",
            "description": "The Security Association life time in seconds. Default is 86400 seconds (1 day).",
            "minimum": 21600,
            "maximum": 31536000
          }
        },
        "required": [
          "dhGroups",
          "encryptionAlgorithms",
          "ikeVersion"
        ]
      },
      "IkeDigestAlgorithmType": {
        "type": "string",
        "description": "Digest Algorithms are used to verify message integrity during IKE negotiation.",
        "enum": [
          "SHA1",
          "SHA2_256",
          "SHA2_384",
          "SHA2_512"
        ]
      },
      "IkeEncryptionAlgorithmType": {
        "type": "string",
        "description": "Encryption algorithms are used to ensure confidentiality of messages exchanged during IKE negotiations.",
        "enum": [
          "AES_128",
          "AES_256",
          "AES_GCM_128",
          "AES_GCM_192",
          "AES_GCM_256"
        ]
      },
      "IkeServiceStatus": {
        "type": "string",
        "description": "The service status for the IKE Session.",
        "enum": [
          "UP",
          "DOWN",
          "NEGOTIATING"
        ]
      },
      "IkeStatus": {
        "type": "object",
        "description": "The status for the IPSec VPN IKE Session/Tunnel. The values are UP, DOWN, and NEGOTIATING. A fail reason is also provided if the Service Status is down.",
        "properties": {
          "ikeServiceStatus": {
            "$ref": "#/components/schemas/IkeServiceStatus",
            "description": "The overall IKE Session service status."
          },
          "failReason": {
            "type": "string",
            "description": "The reason for the IKE Session establishment failure. This will only be set if the status is DOWN."
          }
        }
      },
      "IkeVersionType": {
        "type": "string",
        "description": "The IKE Protocol version type.",
        "enum": [
          "IKE_V1",
          "IKE_V2",
          "IKE_FLEX"
        ]
      },
      "IpRange": {
        "type": "object",
        "description": "An IpRange",
        "properties": {
          "startAddress": {
            "type": "string",
            "description": "Starting IP address in the range."
          },
          "endAddress": {
            "type": "string",
            "description": "Ending IP address in the range."
          }
        }
      },
      "IpRanges": {
        "type": "object",
        "description": "List of IpRange",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/IpRange"
            }
          }
        }
      },
      "LdapConnectionTestResult": {
        "type": "object",
        "description": "Provides LDAP connection test results",
        "properties": {
          "successful": {
            "type": "boolean",
            "description": "Flag for whether connection test was successful"
          },
          "error": {
            "$ref": "#/components/schemas/Error"
          }
        },
        "required": [
          "successful"
        ]
      },
      "LdapGroupAttributesType": {
        "type": "object",
        "description": "Defines how a group is imported from LDAP.",
        "properties": {
          "objectClass": {
            "type": "string"
          },
          "objectIdentifier": {
            "type": "string"
          },
          "groupName": {
            "type": "string"
          },
          "membership": {
            "type": "string"
          },
          "membershipIdentifier": {
            "type": "string"
          },
          "backLinkIdentifier": {
            "type": "string"
          }
        }
      },
      "LdapSettings": {
        "type": "object",
        "description": "LDAP Settings Specification",
        "properties": {
          "hostName": {
            "type": "string"
          },
          "port": {
            "type": "integer"
          },
          "isSsl": {
            "type": "boolean"
          },
          "isSslAcceptAll": {
            "type": "boolean"
          },
          "realm": {
            "type": "string"
          },
          "pagedSearchDisabled": {
            "type": "boolean"
          },
          "pageSize": {
            "type": "integer"
          },
          "maxResults": {
            "type": "integer"
          },
          "maxUserGroups": {
            "type": "integer"
          },
          "searchBase": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "authenticationMechanism": {
            "type": "string",
            "enum": [
              "SIMPLE",
              "KERBEROS",
              "M5DIGEST",
              "NTLM"
            ]
          },
          "groupSearchBase": {
            "type": "string"
          },
          "isGroupSearchBaseEnabled": {
            "type": "boolean"
          },
          "connectorType": {
            "type": "string",
            "enum": [
              "ACTIVE_DIRECTORY",
              "OPEN_LDAP"
            ]
          },
          "userAttributes": {
            "$ref": "#/components/schemas/LdapUserAttributesType"
          },
          "groupAttributes": {
            "$ref": "#/components/schemas/LdapGroupAttributesType"
          },
          "useExternalKerberos": {
            "type": "boolean"
          }
        }
      },
      "LdapSettingsTestResult": {
        "type": "object",
        "description": "Provides test attribute, result, and success boolean",
        "properties": {
          "attribute": {
            "type": "string",
            "description": "LDAP attribute being tested",
            "enum": [
              "USER_OBJECT_IDENTIFIER",
              "USERNAME",
              "USER_EMAIL",
              "USER_DISPLAY_NAME",
              "USER_GIVEN_NAME",
              "USER_SURNAME",
              "USER_TELEPHONE",
              "GROUP_NAME",
              "GROUP_OBJECT_IDENTIFIER"
            ]
          },
          "attributeValue": {
            "type": "string",
            "description": "Value of LDAP user attribute being tested"
          },
          "result": {
            "type": "string",
            "description": "Result of LADP user attribute being tested (what LDAP server returned)"
          },
          "successful": {
            "type": "boolean",
            "description": "Flag to indicate if the attribute is successful or not"
          }
        },
        "required": [
          "successful"
        ]
      },
      "LdapTestResult": {
        "type": "object",
        "description": "Provides LDAP connection and settings test results",
        "properties": {
          "connectionTest": {
            "$ref": "#/components/schemas/LdapConnectionTestResult"
          },
          "settingsTest": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LdapSettingsTestResult"
            }
          }
        }
      },
      "LdapUserAttributesType": {
        "type": "object",
        "description": "Defines how LDAP attributes are used when importing a user.",
        "properties": {
          "objectClass": {
            "type": "string"
          },
          "objectIdentifier": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "givenName": {
            "type": "string"
          },
          "surname": {
            "type": "string"
          },
          "telephone": {
            "type": "string"
          },
          "groupMembershipIdentifier": {
            "type": "string"
          },
          "groupBackLinkIdentifier": {
            "type": "string"
          }
        }
      },
      "Link": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WsAttribute"
            }
          },
          "href": {
            "type": "string"
          },
          "rel": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "LocalEndpoint": {
        "type": "object",
        "description": "This represents the endpoint/IP Address on the Edge Gateway where the tunnel needs to be terminated.",
        "properties": {
          "localId": {
            "type": "string",
            "description": "The local identifier for the endpoint."
          },
          "localAddress": {
            "type": "string",
            "description": "The IPV4 Address for the endpoint. This has to be a suballocated IP on the Edge Gateway. This is required."
          },
          "localNetworks": {
            "type": "array",
            "description": "List of local networks. These must be specified in normal Network CIDR format. Specifying no value is interpreted as 0.0.0.0/0.",
            "items": {
              "type": "string"
            },
            "maxItems": 128,
            "minItems": 1
          }
        },
        "required": [
          "localAddress",
          "localNetworks"
        ]
      },
      "LogicalVmGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID for LogicalVmGroup. This is immutable.\n"
          },
          "description": {
            "type": "string",
            "default": ""
          },
          "name": {
            "type": "string",
            "description": "Display name.\n"
          },
          "namedVmGroupReferences": {
            "type": "array",
            "description": "List of named vm groups associated with logical vm group.\n",
            "items": {
              "$ref": "#/definitions/EntityReference"
            }
          },
          "pvdcId": {
            "type": "string",
            "description": "URN for Provider vDC.\n",
            "x-vcloud-added-in": 33,
            "x-vcloud-constraints": [
              {
                "constraint": "Urn",
                "args": [
                  {
                    "arg": "providervdc"
                  }
                ]
              }
            ]
          }
        },
        "required": [
          "name"
        ]
      },
      "NatRuleType": {
        "type": "string",
        "description": "The Nat Rule Type for a given NAT rule.",
        "enum": [
          "DNAT",
          "SNAT",
          "NO_DNAT",
          "NO_SNAT"
        ]
      },
      "Network": {
        "type": "object",
        "description": "A network Object.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID for the network. This field is read-only.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the network."
          },
          "description": {
            "type": "string",
            "description": "The description of the network.",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "subnets": {
            "$ref": "#/components/schemas/Subnets",
            "description": "List of subnets configured for the network."
          }
        }
      },
      "NetworkPoolBacking": {
        "type": "object",
        "description": "Describes the backing information for a network pool. A network pool is backed by\nvSphere network resources such as VLAN Ids, portgroups, Transport Zones, etc.",
        "properties": {
          "vlanIdRanges": {
            "$ref": "#/components/schemas/VlanIdRanges",
            "description": "The range of backing VLAN Id's. This information is available\nonly for VLAN backed network pools."
          },
          "vdsRefs": {
            "type": "array",
            "description": "The information about virtual distributed switches. This information is\navailable only for VLAN, VXLAN and Universal VXLAN backed network pools.\n",
            "items": {
              "$ref": "#/definitions/BackingRef"
            }
          },
          "portGroupRefs": {
            "type": "array",
            "description": "All the vSphere port groups that will be used by this network pool. This information is\navailable only for Portgroup backed network pools.\n",
            "items": {
              "$ref": "#/definitions/BackingRef"
            }
          },
          "transportZoneRef": {
            "$ref": "#/components/schemas/BackingRef",
            "description": "The Id of the backing transport zone in NSX."
          },
          "providerRef": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "The Id of vCenter server or the NSX-T manager that owns this backing entity."
          }
        }
      },
      "NetworkPoolBackingType": {
        "type": "string",
        "description": "Represents the network pool's backing type.",
        "enum": [
          "VLAN",
          "VXLAN",
          "GENEVE",
          "PORTGROUP_BACKED",
          "UNIVERSAL_VXLAN",
          "UNKNOWN"
        ]
      },
      "NetworkProviderContext": {
        "type": "object",
        "description": "Describes the network provider context of the network object.",
        "properties": {
          "orgRef": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "The organization that this object belongs to. This property is required during creation and cannot be updated."
          },
          "contextEntityId": {
            "type": "string",
            "description": "The context under which this object is created. The context can the id of either the organization vDC or the network provider.\nThis field is required on object creation and is unset on object reads. This same context ID can be used in the context filter field\nwhen querying for the list of objects.\n",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "networkProviderScope": {
            "type": "string",
            "description": "The network provider scope that this object belongs to. This is a read-only property and is determined by the input context entity ID during object creation.\n",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          }
        }
      },
      "NetworkingObjectStatus": {
        "type": "object",
        "description": "Represents status of a networking entity.",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/NetworkingObjectStatusType",
            "description": "Represents current status of the networking object."
          }
        }
      },
      "NetworkingObjectStatusType": {
        "type": "string",
        "description": "Represents status type of a networking entity.\n<ul>\n  <li> PENDING - Desired entity configuration has been received by system and is pending realization.\n  <li> CONFIGURING - The system is in process of realizing the entity.\n  <li> REALIZED - The entity is successfully realized in the system.\n  <li> REALIZATION_FAILED - There are some issues and the system is not able to realize the entity.\n  <li> UNKNOWN - Current state of entity is unknown.\n</ul>",
        "enum": [
          "PENDING",
          "CONFIGURING",
          "REALIZED",
          "REALIZATION_FAILED",
          "UNKNOWN"
        ]
      },
      "NsxTEdgeCluster": {
        "type": "object",
        "description": "Information about a configured edge cluster on an NSX-T manager.\nAn Edge cluster is a group of edge transport nodes.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique id of the edge cluster on the NSX-T manager."
          },
          "name": {
            "type": "string",
            "description": "Name of edge cluster."
          },
          "description": {
            "type": "string",
            "description": "Description of the edge cluster."
          },
          "nodeCount": {
            "type": "integer",
            "description": "Number of edge transport nodes in the edge cluster."
          },
          "nodeType": {
            "$ref": "#/components/schemas/NsxTEdgeClusterNodeType",
            "description": "Type of transport nodes in the edge cluster. All the nodes in the edge\ncluster are of same type."
          },
          "deploymentType": {
            "$ref": "#/components/schemas/NsxTEdgeClusterDeploymentType",
            "description": "Deployment type for transport nodes in the edge cluster. The nodes in the edge\ncluster may have different deployment types."
          }
        }
      },
      "NsxTEdgeClusterDeploymentType": {
        "type": "string",
        "description": "Represents the deployment type for an edge cluster. This is derived\nfrom the deplyment type of the nodes in an edge cluster. If all the edge\nnodes are of same type then that type is returned, otherwise if the cluster\ncontains nodes with different deployment types then HYBRID is returned.",
        "enum": [
          "VIRTUAL_MACHINE",
          "PHYSICAL_MACHINE",
          "HYBRID",
          "UNKNOWN"
        ]
      },
      "NsxTEdgeClusterNodeType": {
        "type": "string",
        "description": "Represents the type of transport nodes in an edge cluster.\nAll of the transport nodes in an edge cluster must belong to the same type.",
        "enum": [
          "EDGE_NODE",
          "PUBLIC_CLOUD_GATEWAY_NODE",
          "UNKNOWN"
        ]
      },
      "NsxTEdgeClusters": {
        "type": "object",
        "description": "List of edge clusters configured on an NSX-T manager.",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/NsxTEdgeCluster"
            }
          }
        }
      },
      "NsxTTransportZone": {
        "type": "object",
        "description": "Information about a configured transport zone on an NSX-T manager.\nNSX uses transport zones to provide connectivity between hypervisors.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique id of the transport zone on the NSX-T manager."
          },
          "name": {
            "type": "string",
            "description": "Name of Transport Zone in NSX-T Manager."
          },
          "type": {
            "$ref": "#/components/schemas/NsxTTransportZoneType",
            "description": "Type of a transport zone."
          }
        }
      },
      "NsxTTransportZoneType": {
        "type": "string",
        "description": "Represents an NSX-T transport zone's traffic type.",
        "enum": [
          "GENEVE"
        ]
      },
      "NsxTTransportZones": {
        "type": "object",
        "description": "List of transport zones configured on an NSX-T manager.",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/NsxTTransportZone"
            }
          }
        }
      },
      "NsxVManager": {
        "type": "object",
        "description": "An object representing an NSX-V server.",
        "properties": {
          "username": {
            "type": "string",
            "description": "User name to connect to the NSX-V server.",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "password": {
            "type": "string",
            "description": "Cleartext password to connect to the NSX-V server.",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ],
            "x-vcloud-password": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://sampleVsm.vmware.com",
            "description": "URL of the server.",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "softwareVersion": {
            "type": "string",
            "description": "Version of the NSX-V Manager",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          }
        },
        "required": [
          "url",
          "username"
        ]
      },
      "NsxVManagerSettings": {
        "type": "object",
        "description": "An object representing networking configuration of a vCenter server.",
        "properties": {
          "vcId": {
            "type": "string",
            "example": "urn:vcloud:vimserver:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
            "description": "URN of the associated vCenter server.",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSortable"
              },
              {
                "constraint": "ReadOnly"
              },
              {
                "constraint": "Urn",
                "args": [
                  {
                    "arg": "vimserver"
                  }
                ]
              }
            ]
          },
          "networkProviderScope": {
            "type": "string",
            "description": "Public label of this NSX server visible to all tenants.",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "controlVmResourcePoolVcPath": {
            "type": "string",
            "description": "Path to the resource pool to use for creating Control VM for Cross-VDC Networking.",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "controlVmDatastoreName": {
            "type": "string",
            "description": "Name of the Datastore to use for creating Control VM for Cross-VDC Networking.",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "controlVmManagementInterfaceName": {
            "type": "string",
            "description": "Name of the management interface to use for creating Control VM for Cross-VDC Networking.",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          }
        },
        "required": [
          "controlVmDatastoreName",
          "controlVmManagementInterfaceName",
          "controlVmResourcePoolVcPath",
          "networkProviderScope",
          "vcId"
        ]
      },
      "NsxVTransportZone": {
        "type": "object",
        "description": "Information about a configured transport zone on an NSX-V manager.\nNSX uses transport zones to provide connectivity between hypervisors.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique id of the transport zone on the NSX manager."
          },
          "name": {
            "type": "string",
            "description": "Name of Transport Zone in NSX Manager."
          },
          "type": {
            "$ref": "#/components/schemas/NsxVTransportZoneType",
            "description": "Type of a transport zone."
          }
        }
      },
      "NsxVTransportZoneType": {
        "type": "string",
        "description": "Represents an NSX-V transport zone's traffic type.",
        "enum": [
          "VXLAN",
          "UNIVERSAL_VXLAN"
        ]
      },
      "NsxVTransportZones": {
        "type": "object",
        "description": "List of transport zones configured on an NSX-V manager.",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/NsxVTransportZone"
            }
          }
        }
      },
      "NsxtDnsForwarderZoneConfig": {
        "type": "object",
        "description": "Specifies the list of domains and the DNS servers that handle those domains.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique id of the DNS forwarder zone. If value is unset, a new zone is created.\nIf value is set, an update is done on the zone.\n"
          },
          "displayName": {
            "type": "string",
            "description": "User friendly name for the zone."
          },
          "dnsDomainNames": {
            "type": "array",
            "description": "List of domain names on which conditional forwarding is based. This field is required if the DNS Zone is\nbeing used for a conditional forwarder. This field will also be used for conditional reverse lookup.\nThis field should not be set if the zone is used as default forwarder zone.\n",
            "items": {
              "type": "string"
            }
          },
          "upstreamServers": {
            "type": "array",
            "description": "DNS servers to which the DNS request needs to be forwarded.",
            "items": {
              "type": "string"
            },
            "maxItems": 3,
            "minItems": 0
          }
        }
      },
      "ObjectVersion": {
        "type": "object",
        "description": "This property describes the current version of the entity. To prevent clients from overwriting each other's changes, update operations must include\nthe version which can be obtained by issuing a GET operation. If the version number on an update call is missing, the operation will be rejected. This is only needed\non update calls.",
        "properties": {
          "version": {
            "type": "integer",
            "description": "version number for the given entity."
          }
        },
        "required": [
          "version"
        ]
      },
      "OrgVdcNetworkStatus": {
        "type": "string",
        "description": "Represents status of a Org Vdc network. This value will be PENDING if the network has been recorded by VCD but has not been fully configured,\nCONFIGURING if the network is in transition, REALIZED if the existing state of the network has been fully realized, or REALIZED_FAILED if there\nwas an error creating the network.",
        "enum": [
          "PENDING",
          "CONFIGURING",
          "REALIZED",
          "REALIZATION_FAILED"
        ]
      },
      "OverallStatus": {
        "type": "string",
        "description": "Overall status of the entity",
        "enum": [
          "GRAY",
          "RED",
          "YELLOW",
          "GREEN"
        ]
      },
      "Page": {
        "type": "object",
        "description": "Collection of paging-related metadata to be included by composition via allOf. This type\nshould be included in pageable responses to avoid duplicating these common properties. It\nis intended to be included by composition rather than inheritance. Because of this, it has\nno discriminator and should be embedded via allOf. See QueryResults for a reference usage.",
        "properties": {
          "resultTotal": {
            "type": "integer",
            "description": "How many results there are in total (i.e., considering all pages)."
          },
          "pageCount": {
            "type": "integer",
            "description": "How many pages there are in total."
          },
          "page": {
            "type": "integer",
            "description": "The page that was fetched, 1-indexed."
          },
          "pageSize": {
            "type": "integer",
            "description": "Result count for page that was fetched."
          },
          "associations": {
            "type": "array",
            "description": "Association info for each result.",
            "items": {
              "$ref": "#/definitions/Association"
            },
            "x-vcloud-added-in": 33
          }
        }
      },
      "Parameter": {
        "type": "object",
        "properties": {
          "inputType": {
            "type": "string"
          }
        },
        "required": [
          "inputType"
        ],
        "discriminator": "inputType"
      },
      "ParameterTypes": {
        "type": "object",
        "properties": {
          "sdkObject": {
            "$ref": "#/components/schemas/SdkObject"
          },
          "string": {
            "$ref": "#/components/schemas/StringParam"
          },
          "secureString": {
            "$ref": "#/components/schemas/SecureString"
          },
          "number": {
            "$ref": "#/components/schemas/NumberParam"
          },
          "mimeAttachment": {
            "$ref": "#/components/schemas/MimeAttachment"
          },
          "properties": {
            "$ref": "#/components/schemas/Properties"
          },
          "date": {
            "$ref": "#/components/schemas/DateParam"
          },
          "boolean": {
            "$ref": "#/components/schemas/BooleanParam"
          },
          "composite": {
            "$ref": "#/components/schemas/CompositeType"
          },
          "regex": {
            "$ref": "#/components/schemas/Regex"
          },
          "encryptedString": {
            "$ref": "#/components/schemas/EncryptedString"
          },
          "keyValuePair": {
            "$ref": "#/components/schemas/KeyValuePair"
          },
          "compositeValue": {
            "$ref": "#/components/schemas/CompositeValue"
          },
          "array": {
            "$ref": "#/components/schemas/ArrayParam"
          }
        }
      },
      "ParticipatingVdcReference": {
        "type": "object",
        "description": "A participating vDC",
        "properties": {
          "vdcRef": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "The reference to the vDC that is part of this a vDC group."
          },
          "orgRef": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "Read-only field that specifies what organization this vDC is in."
          },
          "siteRef": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "The site ID that this vDC belongs to. Required for universal vDC groups."
          },
          "networkProviderScope": {
            "type": "string",
            "description": "Read-only field that specifies the network provider scope of the vDC."
          },
          "remoteOrg": {
            "type": "boolean",
            "description": "Read-only field that specifies whether the vDC is local to this VCD cell cluster."
          },
          "status": {
            "$ref": "#/components/schemas/VdcGroupEntityStatus",
            "description": "The status that the vDC can be in. An example is if the vDC has been deleted from the system but is still part of the group."
          }
        },
        "required": [
          "vdcRef"
        ]
      },
      "PortGroup": {
        "type": "object",
        "description": "Standard portgroup.",
        "properties": {
          "backingRef": {
            "$ref": "#/components/schemas/BackingRef",
            "description": "Contains the backing id and name of the standard portgroup."
          },
          "virtualCenter": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "The entity reference for the vCenter that contains this portgroup."
          }
        }
      },
      "Preference": {
        "type": "object",
        "properties": {
          "classifier": {
            "type": "string",
            "description": "unique indetifier for this preference definition. It will be of type <scope>:<name>.\ne.g vrops:myworkflow. This is immutable\n"
          },
          "name": {
            "type": "string",
            "description": "Display name. This is same as preference definition name and is immutable.\n"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "classifier",
          "name",
          "value"
        ]
      },
      "PreferenceDefinition": {
        "type": "object",
        "description": "The Preference Definition is immutable.",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID for preference definition. This is immutable.\n"
          },
          "name": {
            "type": "string",
            "description": "Display name.\n"
          },
          "description": {
            "type": "string",
            "description": "Description for user preference\n",
            "default": ""
          },
          "classifier": {
            "type": "string",
            "description": "unique indetifier for this preference definition. It should be of type <scope>:<name>.\ne.g vrops:myworkflow. This is immutable.\n"
          },
          "dataType": {
            "type": "string",
            "description": "user preference value data type. This is immutable.",
            "enum": [
              "BOOLEAN",
              "INTEGER",
              "STRING"
            ]
          },
          "constrained": {
            "type": "boolean",
            "description": "true if user preference is selected from list of values (dataType should be number or string), false otherwise. This is immutable.\n"
          },
          "minValue": {
            "type": "number",
            "description": "minimum value for user preference. Only valid if user preference type is number. This is immutable.\n"
          },
          "maxValue": {
            "type": "number",
            "description": "maximum value for user preference. Only valid if user preference type is number. This is immutable.\n"
          },
          "defaultValue": {
            "type": "string"
          },
          "allowedValues": {
            "type": "array",
            "description": "array of allowed values to select from when constrained is true.. This is immutable after creation.",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "classifier",
          "constrained",
          "dataType",
          "defaultValue",
          "name"
        ]
      },
      "Presentation": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "vroId": {
            "type": "string"
          },
          "inputParameters": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WsParameter"
            }
          },
          "name": {
            "type": "string"
          },
          "outputParameters": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WsParameter"
            }
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/StepInfo"
            }
          }
        }
      },
      "PresentationElement": {
        "type": "object",
        "properties": {
          "elementType": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PresentationMessageInfo"
            }
          }
        },
        "required": [
          "elementType"
        ],
        "discriminator": "elementType"
      },
      "PresentationExecution": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "objectId": {
            "type": "string"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WsParameter"
            }
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "startedBy": {
            "type": "string"
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/StepInfo"
            }
          },
          "valid": {
            "type": "boolean"
          }
        }
      },
      "PresentationExecutionsList": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "executions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExecutionSummary"
            }
          },
          "start": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PresentationMessageInfo": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "details": {
            "type": "string"
          },
          "severity": {
            "type": "string",
            "enum": [
              "INFO",
              "WARNING",
              "ERROR"
            ]
          },
          "summary": {
            "type": "string"
          }
        }
      },
      "ProbeResult": {
        "type": "object",
        "description": "Results of a connection test to a specific endpoint.",
        "properties": {
          "result": {
            "type": "string",
            "description": "If the connection test succeeded, if an error was encountered a brief summary will be included.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "resolvedIp": {
            "type": "string",
            "description": "The IP address the host was resolved to.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "canConnect": {
            "type": "boolean",
            "description": "If vCD can establish a connection on the specified port.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "sslHandshake": {
            "type": "boolean",
            "description": "If an SSL Handshake succeeded (secure requests only).",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "certificateChain": {
            "type": "string",
            "description": "The SSL certificate chain presented by the server if a secure connection was made.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          }
        }
      },
      "ProviderVdc": {
        "type": "object",
        "description": "A provider vdc.",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the pvdc."
          },
          "name": {
            "type": "string",
            "description": "The name of the pvdc."
          },
          "description": {
            "type": "string",
            "description": "The description of the pvdc."
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Whether the pvdc is enabled or not."
          },
          "maxSupportedHwVersion": {
            "type": "string",
            "description": "The maximum hardware version this pvdc supports."
          },
          "nsxTManager": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "The NSX-T manager of the pvdc, if any."
          },
          "vimServer": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "The vCenter server the pvdc belongs to."
          }
        }
      },
      "Proxy": {
        "type": "object",
        "description": "proxy configuration. This configures the vCD proxying capability for one specific server within the vSphere/NSX/ESX estate known to vCD.",
        "properties": {
          "name": {
            "type": "string",
            "example": "Proxy Sample Name",
            "pattern": ".*[\\S].*"
          },
          "id": {
            "type": "string",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSortable"
              },
              {
                "constraint": "ReadOnly"
              },
              {
                "constraint": "Urn",
                "args": [
                  {
                    "arg": "proxy"
                  }
                ]
              }
            ]
          },
          "parent": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "The EntityReference of the parent entity (e.g. vCenter Server, SDDC) . This is not editable once the proxy has been created."
          },
          "proxyType": {
            "type": "string",
            "enum": [
              "VC",
              "SSO",
              "NSX",
              "ESX",
              "GENERIC"
            ]
          },
          "enabled": {
            "type": "boolean",
            "description": "True if the proxy is enabled. Proxy can only be enabled/disabled by privileged users.\nA disabled proxy cannot be activated and thus, cannot be used.\nWhen a proxy is disabled, all active sessions are terminated.\n",
            "default": true
          },
          "tenantVisible": {
            "type": "boolean",
            "description": "Whether this proxy has been published to tenants.",
            "default": false
          },
          "active": {
            "type": "boolean",
            "description": "True if the proxy is currently active for the user session associated with the\nrequest made to get the proxy. An inactive proxy cannot be used.\n",
            "default": false,
            "x-vcloud-constraints": [
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "token": {
            "type": "string",
            "description": "The generated read-only token that should be used as the password when using this proxy.\nTo generate a new token, activate the proxy. The token is tied to the user session that activated the proxy.\nIf the proxy is inactive, this value will be null.\n",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              },
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "parentProxy": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "The EntityReference of the parent proxy. If a proxy has a parent, the proxy is activated along with\nits parent and shares the token with its parent. Each proxy may only have one parent.\nA parent proxy cannot have a parent of its own."
          },
          "targetHost": {
            "type": "string",
            "example": "sampleVc.vmware.com",
            "description": "IP address or FQDN of the host being proxied. This is not editable once the proxy has been created."
          },
          "uiUrl": {
            "type": "string",
            "format": "uri",
            "example": "https://sampleVc.vmware.com",
            "description": "The URL of the proxied component's UI endpoint. This is the URL that the browser tab\n will be pointed to when the proxy is launched via the H5 UI of VCD.\n",
            "default": ""
          }
        },
        "required": [
          "name",
          "parent",
          "proxyType",
          "targetHost"
        ]
      },
      "ProxyConfiguration": {
        "type": "object",
        "description": "A Proxy Configuration. This configuration object declares a backend proxy that sits between vCD and the vSphere/NSX/ESX estate.",
        "properties": {
          "name": {
            "type": "string",
            "example": "Proxy Sample Name",
            "pattern": ".*[\\S].*"
          },
          "id": {
            "type": "string",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSortable"
              },
              {
                "constraint": "ReadOnly"
              },
              {
                "constraint": "Urn",
                "args": [
                  {
                    "arg": "proxyConfiguration"
                  }
                ]
              }
            ]
          },
          "description": {
            "type": "string",
            "example": "Configuration to connect to VC-1",
            "description": "Optional description.",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "authType": {
            "type": "string",
            "enum": [
              "BASIC",
              "BEARER"
            ]
          },
          "username": {
            "type": "string",
            "description": "username to connect to the proxy server.",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "password": {
            "type": "string",
            "description": "password to connect to the proxy server, when auth type is Basic.",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ],
            "x-vcloud-password": true
          },
          "token": {
            "type": "string",
            "description": "authentication token to connect to the proxy server, when auth type is Bearer.",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ],
            "x-vcloud-password": true
          },
          "host": {
            "type": "string",
            "example": "sampleProxy.vmware.com",
            "description": "hostname of the proxy server."
          },
          "port": {
            "type": "integer",
            "description": "port of the proxy server."
          }
        },
        "required": [
          "authType",
          "host",
          "name",
          "password",
          "port"
        ]
      },
      "ProxyConnection": {
        "type": "object",
        "description": "Proxy connection to use for test. If none is specified, then no proxy is used to test the connection.",
        "properties": {
          "proxyHost": {
            "type": "string",
            "description": "The host (or IP address) of the proxy.",
            "maxLength": 256
          },
          "proxyPort": {
            "type": "integer",
            "description": "The port to use when connecting to the proxy."
          },
          "proxyUsername": {
            "type": "string",
            "description": "Username to authenticate to the proxy.",
            "maxLength": 256
          },
          "proxyPassword": {
            "type": "string",
            "description": "Password to authenticate to the proxy.",
            "maxLength": 256
          },
          "proxySecure": {
            "type": "boolean",
            "description": "If the connection to the proxy should use https.",
            "default": true
          }
        },
        "required": [
          "proxyHost",
          "proxyPort"
        ]
      },
      "PvdcComputePolicy": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID for pVDC compute policy. This is immutable.\n"
          },
          "name": {
            "type": "string",
            "description": "Display name.\n",
            "minLength": 1,
            "maxLength": 128
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 256,
            "default": ""
          },
          "pvdcId": {
            "type": "string",
            "description": "URN for Provider VDC.\n",
            "x-vcloud-constraints": [
              {
                "constraint": "Urn",
                "args": [
                  {
                    "arg": "providervdc"
                  }
                ]
              }
            ]
          },
          "namedVmGroupReferences": {
            "type": "array",
            "description": "This field cannot be updated and is a read-only field in the client after creation.\nDeprecated in Api 33.0, this property will be removed in future release.\n",
            "items": {
              "$ref": "#/definitions/EntityReference"
            },
            "x-vcloud-added-in": 31,
            "x-vcloud-deprecated-in": 33,
            "x-vcloud-removed-in": 33,
            "x-vcloud-deprecated-alternative": "namedVmGroups"
          },
          "namedVmGroups": {
            "type": "array",
            "description": "List of list of vmGroups grouped together in a meaningful manner.\nA group of vmGroups would consist of one functionally equal vmGroup picked from each cluster of the pvdc.\n",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EntityReference"
              }
            },
            "x-vcloud-added-in": 33
          },
          "logicalVmGroupReferences": {
            "type": "array",
            "description": "This field cannot be updated and is a read-only field after creation.\n",
            "items": {
              "$ref": "#/definitions/EntityReference"
            },
            "x-vcloud-added-in": 32
          }
        },
        "required": [
          "name",
          "pvdcId"
        ]
      },
      "Relations": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "link": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Link"
            }
          },
          "start": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RemoteEndpoint": {
        "type": "object",
        "description": "This represents the remote endpoint i.e. the endpoint which the tunnel from the Edge Gateway will connect to.",
        "properties": {
          "remoteId": {
            "type": "string",
            "description": "This Remote ID is needed to uniquely identify the peer site. The Remote ID is the public IP Address of the remote device terminating the VPN Tunnel.\nWhen NAT is configured on the Remote ID, enter the private IP Address of the Remote Site. If remote ID is not set, VCD will set the remote Id to the\nremote address.\n"
          },
          "remoteAddress": {
            "type": "string",
            "description": "IPV4 Address of the remote endpoint on the remote site. This is the Public IPv4 Address of the remote device terminating the VPN connection."
          },
          "remoteNetworks": {
            "type": "array",
            "description": "List of remote networks. These must be specified in normal Network CIDR format. Specifying no value is interpreted as 0.0.0.0/0",
            "items": {
              "type": "string"
            },
            "maxItems": 128,
            "minItems": 0
          }
        },
        "required": [
          "remoteAddress"
        ]
      },
      "ResourcePool": {
        "type": "object",
        "description": "A vCenter Resource Pool.",
        "properties": {
          "moref": {
            "type": "string",
            "description": "The vCenter Id of the Resource Pool. It must be in the format (resgroup-#)."
          },
          "name": {
            "type": "string",
            "description": "The name of the Resource Pool."
          },
          "vcId": {
            "type": "string",
            "description": "The vCenter the Resource Pool belongs to."
          },
          "eligible": {
            "type": "boolean",
            "description": "Used in resource pool tree navigation.\nIndicates whether the resource pool is eligible or not.\n"
          }
        }
      },
      "Right": {
        "type": "object",
        "description": "Right",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 128
          },
          "id": {
            "type": "string",
            "maxLength": 128,
            "x-vcloud-constraints": [
              {
                "constraint": "Urn",
                "args": [
                  {
                    "arg": "right"
                  }
                ]
              },
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "bundleKey": {
            "type": "string",
            "minLength": 1,
            "maxLength": 128
          },
          "category": {
            "type": "string",
            "minLength": 1,
            "maxLength": 128,
            "x-vcloud-constraints": [
              {
                "constraint": "Urn",
                "args": [
                  {
                    "arg": "rightsCategory"
                  }
                ]
              }
            ]
          },
          "serviceNamespace": {
            "type": "string",
            "minLength": 1,
            "maxLength": 128,
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "rightType": {
            "type": "string",
            "enum": [
              "VIEW",
              "MODIFY"
            ]
          },
          "impliedRights": {
            "type": "array",
            "description": "The set of implied rights.",
            "items": {
              "$ref": "#/definitions/EntityReference"
            },
            "x-vcloud-added-in": 32,
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          }
        },
        "required": [
          "name"
        ]
      },
      "RightsCategoryNode": {
        "type": "object",
        "description": "RightsCategoryNode",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 128
          },
          "id": {
            "type": "string",
            "x-vcloud-constraints": [
              {
                "constraint": "Urn",
                "args": [
                  {
                    "arg": "rightsCategory"
                  }
                ]
              },
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "bundleKey": {
            "type": "string",
            "minLength": 1,
            "maxLength": 128
          },
          "parent": {
            "type": "string",
            "x-vcloud-constraints": [
              {
                "constraint": "Urn",
                "args": [
                  {
                    "arg": "rightsCategory"
                  }
                ]
              }
            ]
          },
          "rightsCount": {
            "$ref": "#/components/schemas/RightsCount"
          },
          "subCategories": {
            "type": "array",
            "items": {
              "type": "string",
              "x-vcloud-constraints": [
                {
                  "constraint": "Urn",
                  "args": [
                    {
                      "arg": "rightsCategory"
                    }
                  ]
                }
              ]
            }
          }
        },
        "required": [
          "bundleKey",
          "name"
        ]
      },
      "RightsCount": {
        "type": "object",
        "description": "RightsCount - A count of rights in a given category by type",
        "properties": {
          "view": {
            "type": "integer",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "modify": {
            "type": "integer",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          }
        }
      },
      "RightsMapping": {
        "type": "object",
        "description": "RightsMapping",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 128
          },
          "id": {
            "type": "string",
            "maxLength": 128,
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "description": {
            "type": "string",
            "maxLength": 256
          },
          "bundleKey": {
            "type": "string",
            "minLength": 1,
            "maxLength": 128,
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "readOnly": {
            "type": "boolean",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          }
        },
        "required": [
          "name"
        ]
      },
      "RouteAdvertisement": {
        "type": "object",
        "description": "List of subnets that will be advertised so that the Edge Gateway can route out to the connected external network.",
        "properties": {
          "enable": {
            "type": "boolean",
            "description": "True means that the subnets will be advertised. The default is true.",
            "default": true
          },
          "subnets": {
            "type": "array",
            "example": [
              "100.64.1.0/24",
              "fc7e:f206:db42::/48"
            ],
            "description": "List of subnets that will be advertised so that the Edge Gateway can route out to the connected external network.\nEach value is in CIDR format. Note that the CIDR value will automatically be converted to its network definition based on the prefix length.\n",
            "items": {
              "type": "string"
            },
            "maxItems": 100,
            "minItems": 0
          }
        }
      },
      "RouterComponentHealth": {
        "type": "object",
        "description": "A ComponentHealth object",
        "properties": {
          "component": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/RouterComponentStatus"
          },
          "message": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "code": {
            "type": "integer"
          }
        }
      },
      "RouterComponentStatus": {
        "type": "string",
        "description": "Status of a router component.",
        "enum": [
          "UP",
          "DOWN"
        ]
      },
      "RouterConnection": {
        "type": "object",
        "description": "Describes the connection between a routed network and an edge gateway. This must be set if converting from an isolated to a routed network.",
        "properties": {
          "routerRef": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "The edge gateway that this network is attached to."
          },
          "connectionType": {
            "$ref": "#/components/schemas/VdcNetworkConnectionType",
            "description": "How the network is connected to the edge gateway. This field is updatable to allow conversions between different types."
          },
          "connected": {
            "type": "boolean",
            "description": "Whether network is marked as connected in NSX.",
            "default": true
          }
        }
      },
      "RouterDnsConfig": {
        "type": "object",
        "description": "A RouterDnsConfig object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "nameServers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RouterHealthReport": {
        "type": "object",
        "description": "Health Report of a Router",
        "properties": {
          "nsxManagersHealth": {
            "type": "array",
            "description": "Status of all the nsx managers spanned by the universal router.\n",
            "items": {
              "$ref": "#/definitions/RouterComponentHealth"
            }
          },
          "controlVmHealth": {
            "type": "array",
            "description": "Status of all the universal router control VMs within each network provider scope.\nThis also includes status of egress points and routes configured for the universal router.\n",
            "items": {
              "$ref": "#/definitions/RouterComponentHealth"
            }
          },
          "controlPlaneHealth": {
            "$ref": "#/components/schemas/RouterComponentHealth",
            "description": "Status of the nsx controller cluster associated with the nsx managers."
          },
          "vdcReachabilityStatus": {
            "type": "array",
            "description": "Reachability status for local and remote participating vDC's of referenced vDC group.\nStates whether a vDC is reachable from this local site.\n",
            "items": {
              "$ref": "#/definitions/RouterComponentHealth"
            }
          }
        }
      },
      "Sddc": {
        "type": "object",
        "description": "Software-defined data center",
        "properties": {
          "name": {
            "type": "string",
            "example": "SDDC Sample Name"
          },
          "id": {
            "type": "string",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSortable"
              },
              {
                "constraint": "ReadOnly"
              },
              {
                "constraint": "Urn",
                "args": [
                  {
                    "arg": "sddc"
                  }
                ]
              }
            ]
          },
          "description": {
            "type": "string",
            "example": "SDDC Sample Description",
            "default": "",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "enabled": {
            "type": "boolean",
            "default": false
          },
          "vcId": {
            "type": "string",
            "example": "urn:vcloud:vimserver:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
            "description": "URN of the associated vCenter. This is not editable once the SDDC has been created.",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "version": {
            "type": "string",
            "example": "6.7.0",
            "description": "Version of the associated vCenter. This is not editable.",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSortable"
              },
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "overallStatus": {
            "$ref": "#/components/schemas/OverallStatus",
            "description": "Overall status of the associated vCenter. This is not editable."
          },
          "stats": {
            "$ref": "#/components/schemas/SddcStats",
            "description": "Associated read-only statistics."
          },
          "defaultProxy": {
            "$ref": "#/components/schemas/SddcProxy",
            "description": "Default proxy for the SDDC. This field is read-only. To set a new default, edit the proxy\nyou wish to make the new default by modifying its defaultProxy flag.\nDeprecated in Api 34.0."
          },
          "defaultEndpoint": {
            "$ref": "#/components/schemas/SddcEndpoint",
            "description": "Default endpoint for the SDDC. There is an endpoint available for an SDDC even if there are\nno proxies configured for the SDDC. This indicates that an endpoint is available that doesn't\nrequire proxying, either because it is publicly accessible or because it assumes an established\nVPM connection. The field is read-only."
          }
        },
        "required": [
          "name",
          "vcId"
        ]
      },
      "SddcEndpoint": {
        "type": "object",
        "description": "An available network connections exposed by the SDDC",
        "properties": {
          "endpoint": {
            "type": "string",
            "format": "uri",
            "description": "A network endpoint that the SDDC exposes for communication"
          },
          "proxyId": {
            "type": "string",
            "description": "An optional identifier to a Proxy that can be used to establish a connection to the endpoint",
            "x-vcloud-constraints": [
              {
                "constraint": "Urn",
                "args": [
                  {
                    "arg": "proxy"
                  }
                ]
              }
            ]
          }
        }
      },
      "SddcProxy": {
        "type": "object",
        "description": "SDDC proxy configuration",
        "properties": {
          "name": {
            "type": "string",
            "example": "SDDC Proxy Sample Name",
            "pattern": ".*[\\S].*"
          },
          "id": {
            "type": "string",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSortable"
              },
              {
                "constraint": "ReadOnly"
              },
              {
                "constraint": "Urn",
                "args": [
                  {
                    "arg": "sddcProxy"
                  }
                ]
              }
            ]
          },
          "sddcId": {
            "type": "string",
            "example": "urn:vcloud:sddc:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
            "description": "URN of the parent SDDC. This is not editable once the proxy has been created.",
            "x-vcloud-constraints": [
              {
                "constraint": "Urn",
                "args": [
                  {
                    "arg": "sddc"
                  }
                ]
              }
            ]
          },
          "enabled": {
            "type": "boolean",
            "description": "True if the proxy is enabled. Proxy can only be enabled/disabled by privileged users.\nA disabled proxy cannot be activated and thus, cannot be used.\nWhen a proxy is disabled, all active sessions are terminated.\n",
            "default": true
          },
          "tenantVisible": {
            "type": "boolean",
            "description": "Whether this proxy has been published to tenants.",
            "default": false
          },
          "targetHost": {
            "type": "string",
            "example": "sampleVc.vmware.com",
            "description": "IP address or FQDN of the host being proxied. This is not editable once the proxy has been created."
          },
          "active": {
            "type": "boolean",
            "description": "True if the proxy is currently active for the user session associated with the\nrequest made to get the proxy. An inactive proxy cannot be used.\n",
            "default": false,
            "x-vcloud-constraints": [
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "token": {
            "type": "string",
            "description": "The generated read-only token that should be used as the password when using this proxy.\nTo generate a new token, activate the proxy. The token is tied to the user session that activated the proxy.\nIf the proxy is inactive, this value will be null.\n",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              },
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "defaultProxy": {
            "type": "boolean",
            "description": "True if this is the default proxy for the parent SDDC. A proxy being the default for the\nSDDC means that this proxy's UI will be launched when the SDDC tile is clicked in the\nH5 Tenant UI of VCD. If no default proxy is set, clicking the SDDC tile will be a no-op.\n",
            "default": false
          },
          "parentProxyId": {
            "type": "string",
            "example": "urn:vcloud:sddcProxy:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
            "description": "The URN of the parent proxy. If a proxy has a parent, the proxy is activated along with\nits parent and shares the token with its parent. Each proxy may only have one parent.\nA parent proxy cannot have a parent of its own.\n",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSortable"
              },
              {
                "constraint": "Urn",
                "args": [
                  {
                    "arg": "sddcProxy"
                  }
                ]
              }
            ]
          },
          "uiUrl": {
            "type": "string",
            "format": "uri",
            "example": "https://sampleVc.vmware.com",
            "description": "The URL of the proxied component's UI endpoint. This is the URL that the browser tab\n will be pointed to when the proxy is launched via the H5 UI of VCD.\n",
            "default": ""
          }
        },
        "required": [
          "name",
          "sddcId",
          "targetHost"
        ]
      },
      "SddcStat": {
        "type": "object",
        "description": "A collection of measurements for the SDDC resource",
        "properties": {
          "numTotal": {
            "type": "integer",
            "format": "int64",
            "description": "Total resource allocation.",
            "minimum": 0
          },
          "numUsed": {
            "type": "integer",
            "format": "int64",
            "description": "Used resource allocation.",
            "minimum": 0
          },
          "numReserved": {
            "type": "integer",
            "format": "int64",
            "description": "Reserved resource allocation.",
            "minimum": 0
          }
        }
      },
      "SddcStats": {
        "type": "object",
        "description": "A read-only list of resource allocations for the associated SDDC",
        "properties": {
          "totalVMs": {
            "type": "integer",
            "description": "Number of VMs within the SDDC."
          },
          "poweredOnVMs": {
            "type": "integer",
            "description": "Number of powered on VMs within the SDDC."
          },
          "cpu": {
            "$ref": "#/components/schemas/SddcStat",
            "description": "CPUs statistics of the SDDC (values in MHz)."
          },
          "memory": {
            "$ref": "#/components/schemas/SddcStat",
            "description": "Memory statistics of the SDDC (values in MB)."
          },
          "storage": {
            "$ref": "#/components/schemas/SddcStat",
            "description": "Storage statistics of the SDDC (values in MB)."
          }
        }
      },
      "Service": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "default": ""
          },
          "iconMimeType": {
            "type": "string"
          },
          "iconData": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "ServiceApp": {
        "type": "object",
        "description": "A VMware service application",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID for the service application. This field is read-only."
          },
          "name": {
            "type": "string",
            "description": "The name of the service application"
          },
          "clientId": {
            "type": "string",
            "description": "The client ID"
          },
          "clientSecret": {
            "type": "string",
            "description": "The client secret"
          },
          "orgId": {
            "type": "string",
            "description": "The external organization id of the service application"
          },
          "serviceScope": {
            "$ref": "#/components/schemas/ServiceAppScope",
            "description": "The scope of the service application"
          },
          "accessTokenTTL": {
            "type": "integer",
            "description": "The read-only time-to-live of the access token in seconds."
          },
          "accessTokenExpiration": {
            "type": "string",
            "format": "date-time",
            "description": "The read-only expiration date of the access token."
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the application is currently enabled.",
            "default": true
          }
        },
        "required": [
          "clientId",
          "clientSecret",
          "name",
          "serviceScope"
        ]
      },
      "ServiceAppScope": {
        "type": "string",
        "description": "Describes the type of service application.\nVMC_REFRESH_TOKEN: The application authtenticates to VMC via a refresh token\nVMC_CLIENT_CREDENTIAL: The application authenticates to VMC using client credentials\nVMC: Deprecated. Defaults to VMC_REFRESH_TOKEN.",
        "enum": [
          "VMC",
          "VMC_REFRESH_TOKEN",
          "VMC_CLIENT_CREDENTIAL"
        ]
      },
      "ServiceItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "serviceItemType": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "canExecute": {
            "type": "boolean"
          },
          "serviceName": {
            "type": "string"
          },
          "serviceId": {
            "type": "string"
          },
          "iconMimeType": {
            "type": "string"
          },
          "iconData": {
            "type": "string"
          },
          "tenantScoped": {
            "type": "boolean",
            "default": true
          },
          "providerScoped": {
            "type": "boolean",
            "default": true
          },
          "publishAll": {
            "type": "boolean",
            "description": "Read-only value indicating publishAll state\n",
            "default": false
          }
        },
        "required": [
          "serviceItemType"
        ],
        "discriminator": "serviceItemType"
      },
      "Session": {
        "type": "object",
        "description": "Session",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 128,
            "x-vcloud-constraints": [
              {
                "constraint": "Urn",
                "args": [
                  {
                    "arg": "session"
                  }
                ]
              },
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "user": {
            "$ref": "#/components/schemas/EntityReference"
          },
          "org": {
            "$ref": "#/components/schemas/EntityReference"
          },
          "location": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SmtpServerSpec": {
        "type": "object",
        "description": "Represent the settings of an SMTP Server which the system uses to send email notifications and alerts",
        "properties": {
          "useAuthentication": {
            "type": "boolean",
            "description": "A flag to indicate if the SMTP requires login authentication. If this\nflag is set to true, caller must provide user name and password\n"
          },
          "secureMode": {
            "type": "string",
            "description": "Security mode used to connect to the SMTP server",
            "enum": [
              "NONE",
              "START_TLS",
              "SSL"
            ]
          },
          "url": {
            "$ref": "#/components/schemas/Url"
          },
          "sslTrustStore": {
            "type": "string",
            "description": "The custom ssl trust certs if ssl is enabled\n"
          },
          "userName": {
            "type": "string",
            "description": "Username to login to server\n"
          },
          "password": {
            "type": "string",
            "description": "Password to login to the server\n"
          },
          "description": {
            "type": "string",
            "description": "A human readable description of the entity\n"
          },
          "name": {
            "type": "string",
            "description": "A human readable name of the entity"
          }
        }
      },
      "SslSettings": {
        "type": "object",
        "description": "The VCD SSL settings",
        "properties": {
          "enabledSslProtocols": {
            "type": "array",
            "description": "SSL protocols",
            "items": {
              "type": "string"
            }
          },
          "enabledSslCiphers": {
            "type": "array",
            "description": "SSL ciphers",
            "items": {
              "type": "string"
            }
          },
          "keySize": {
            "type": "integer",
            "description": "Size of keys generated"
          },
          "certificateValidityDays": {
            "type": "integer",
            "description": "Number of days generated certificates are valid for"
          },
          "certificateSignatureAlgorithm": {
            "type": "string",
            "description": "Algorithm used to sign generated certificates"
          }
        }
      },
      "StorageProfile": {
        "type": "object",
        "description": "A Storage Profile.",
        "properties": {
          "moref": {
            "type": "string",
            "description": "The Moref of the Storage Profile."
          },
          "name": {
            "type": "string",
            "description": "The name of the Storage Profile."
          }
        }
      },
      "Subnet": {
        "type": "object",
        "description": "A network subnet defined by its gateway,",
        "properties": {
          "gateway": {
            "type": "string",
            "description": "The gateway for the subnet."
          },
          "prefixLength": {
            "type": "integer",
            "description": "The prefix length of the subnet."
          },
          "dnsSuffix": {
            "type": "string",
            "description": "The DNS suffix that VMs attached to this network will use."
          },
          "dnsServer1": {
            "type": "string",
            "description": "The first DNS server that VMs attached to this network will use."
          },
          "dnsServer2": {
            "type": "string",
            "description": "The second DNS server that VMs attached to this network will use."
          },
          "ipRanges": {
            "$ref": "#/components/schemas/IpRanges",
            "description": "Range of IPs within the subnet that can be used in this network. A VM attached to this network is assigned one of these IPs."
          },
          "enabled": {
            "type": "boolean",
            "description": "Indicates whether the external network subnet is currently enabled.",
            "default": true
          },
          "totalIpCount": {
            "type": "integer",
            "description": "The number of IP addresses defined by the static IP ranges."
          },
          "usedIpCount": {
            "type": "integer",
            "description": "The number of IP address used from the static IP ranges."
          }
        },
        "required": [
          "gateway",
          "prefixLength"
        ]
      },
      "Subnets": {
        "type": "object",
        "description": "List of Subnets of a network",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Subnet"
            }
          }
        }
      },
      "SupportedConstraints": {
        "type": "object",
        "properties": {
          "constraint": {
            "$ref": "#/components/schemas/Constraint"
          },
          "mandatory": {
            "$ref": "#/components/schemas/Mandatory"
          },
          "restrictDuplicates": {
            "$ref": "#/components/schemas/RestrictDuplicates"
          },
          "customValidator": {
            "$ref": "#/components/schemas/CustomValidator"
          },
          "numberRange": {
            "$ref": "#/components/schemas/NumberRange"
          },
          "regexp": {
            "$ref": "#/components/schemas/Regexp"
          },
          "numberFormat": {
            "$ref": "#/components/schemas/NumberFormat"
          }
        }
      },
      "SupportedDecorators": {
        "type": "object",
        "properties": {
          "decorator": {
            "$ref": "#/components/schemas/Decorator"
          },
          "refreshOnChange": {
            "$ref": "#/components/schemas/RefreshOnChange"
          },
          "multiLine": {
            "$ref": "#/components/schemas/MultiLine"
          },
          "chooser": {
            "$ref": "#/components/schemas/Chooser"
          },
          "dropDown": {
            "$ref": "#/components/schemas/DropDown"
          }
        }
      },
      "SupportedPresentationElements": {
        "type": "object",
        "properties": {
          "presentationElement": {
            "$ref": "#/components/schemas/PresentationElement"
          },
          "stepInfo": {
            "$ref": "#/components/schemas/StepInfo"
          },
          "group": {
            "$ref": "#/components/schemas/Group"
          },
          "field": {
            "$ref": "#/components/schemas/Field"
          },
          "primaryField": {
            "$ref": "#/components/schemas/PrimaryField"
          }
        }
      },
      "TestEmailRequest": {
        "type": "object",
        "properties": {
          "emailSettings": {
            "$ref": "#/components/schemas/EmailSettings"
          },
          "destination": {
            "type": "string"
          }
        }
      },
      "TestResult": {
        "type": "object",
        "description": "Results of a connection test.",
        "properties": {
          "targetProbe": {
            "$ref": "#/components/schemas/ProbeResult"
          },
          "proxyProbe": {
            "$ref": "#/components/schemas/ProbeResult"
          }
        }
      },
      "ThumbprintAndAlgorithm": {
        "type": "object",
        "description": "Specifies a SSL certificate thumbprint and the algorithm used for calculation.",
        "properties": {
          "thumbprint": {
            "type": "string",
            "example": "00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00",
            "description": "The SDDC Proxy SSL certificate thumbprint."
          },
          "algorithm": {
            "type": "string",
            "example": "SHA-256",
            "description": "Algorithm used for the thumbprint calculation."
          }
        }
      },
      "Tier0Routers": {
        "type": "object",
        "description": "List of NSX-T's Tier-0 routers.",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Tier0Router"
            }
          }
        }
      },
      "Token": {
        "type": "object",
        "description": "Specifies a user, the user's organization, and the user assigned token that can be used to\n access proxies as well as the expiration timestamp of the token (in UTC). Parameters cannot\n be edited once a token is created.",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of this token. Sorting on this field is not supported.",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSortable"
              },
              {
                "constraint": "ReadOnly"
              },
              {
                "constraint": "Urn",
                "args": [
                  {
                    "arg": "token"
                  }
                ]
              }
            ]
          },
          "token": {
            "type": "string",
            "description": "User specific token that can be used to access proxies. Sorting on this field is not supported.",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSortable"
              },
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "expirationTimeUtc": {
            "type": "string",
            "format": "date-time",
            "description": "Time stamp representing when the token will expire (in UTC).",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "username": {
            "type": "string",
            "description": "Name of the user that this token is assigned to.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "userId": {
            "type": "string",
            "description": "ID of the user that this token is assigned to. Sorting on this field is not supported.\n Can not be updated.\n",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSortable"
              },
              {
                "constraint": "ReadOnly"
              },
              {
                "constraint": "Urn",
                "args": [
                  {
                    "arg": "user"
                  }
                ]
              }
            ]
          },
          "orgName": {
            "type": "string",
            "description": "Name of the organization that the assigned user belongs to. Sorting and filtering on this field is not supported.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              },
              {
                "constraint": "NonSortable"
              },
              {
                "constraint": "NonSearchable"
              }
            ]
          }
        },
        "required": [
          "id",
          "userId"
        ]
      },
      "TrustedCertificate": {
        "type": "object",
        "description": "SSL certificate in PEM format.",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 128,
            "x-vcloud-constraints": [
              {
                "constraint": "Urn",
                "args": [
                  {
                    "arg": "trustedCertificate"
                  }
                ]
              },
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "alias": {
            "type": "string",
            "maxLength": 255
          },
          "certificate": {
            "type": "string",
            "example": "-----BEGIN CERTIFICATE----- <sample certificate contents> -----END CERTIFICATE-----",
            "description": "PEM encoded certificate",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSortable"
              },
              {
                "constraint": "Certificate"
              }
            ]
          }
        },
        "required": [
          "alias",
          "certificate"
        ]
      },
      "TunnelConfig": {
        "type": "object",
        "description": "This configuration captures phase two negotiation parameters and tunnel properties.",
        "properties": {
          "perfectForwardSecrecyEnabled": {
            "type": "boolean",
            "description": "If true, perfect forward secrecy is enabled. The default value is true.",
            "default": true
          },
          "dfPolicy": {
            "$ref": "#/components/schemas/DfPolicyType",
            "description": "Policy for handling degragmentation bit. The default is COPY."
          },
          "dhGroups": {
            "type": "array",
            "description": "The list of Diffie-Helman groups to be used is PFS is enabled. Default is GROUP14.",
            "items": {
              "$ref": "#/definitions/DhGroupType"
            },
            "minItems": 1
          },
          "digestAlgorithms": {
            "type": "array",
            "description": "The list of Digest algorithms to be used for message digest. The default digest algorithm is implictly covered by default encrpyption algorithm AES_GCM_128.\n",
            "items": {
              "$ref": "#/definitions/TunnelDigestAlgorithmType"
            }
          },
          "encryptionAlgorithms": {
            "type": "array",
            "description": "The list of Encryption algorithms to use in IPSec tunnel establishment. Default is AES_GCM_128. NO_ENCRYPTION_AUTH_AES_GMAC_* enables authentication on input\ndata without encryption. If one of these options is used, digest algorithm should be empty.\n",
            "items": {
              "$ref": "#/definitions/TunnelEncryptionAlgorithmType"
            },
            "minItems": 1
          },
          "saLifeTime": {
            "type": "integer",
            "description": "The Security Association life time in seconds. Default is 3600 seconds.",
            "minimum": 900,
            "maximum": 31536000
          }
        },
        "required": [
          "dhGroups",
          "encryptionAlgorithms"
        ]
      },
      "TunnelDigestAlgorithmType": {
        "type": "string",
        "description": "This is the algorithm used to verify message integruty during tunnel establishment.",
        "enum": [
          "SHA1",
          "SHA2_256",
          "SHA2_384",
          "SHA2_512"
        ]
      },
      "TunnelEncryptionAlgorithmType": {
        "type": "string",
        "description": "Encryption algorithm to use in IPSec tunnel establishment.",
        "enum": [
          "AES_128",
          "AES_256",
          "AES_GCM_128",
          "AES_GCM_192",
          "AES_GCM_256",
          "NO_ENCRYPTION_AUTH_AES_GMAC_128",
          "NO_ENCRYPTION_AUTH_AES_GMAC_192",
          "NO_ENCRYPTION_AUTH_AES_GMAC_256",
          "NO_ENCRYPTION"
        ]
      },
      "TunnelStatus": {
        "type": "string",
        "description": "The overall tunnel status which is consolidated using the Tunnel Status and IKE Status. If the tunnel is up, the status is UP. If the tunnel\nis down, the status is DOWN. The tunnel may also be in a DEGRADED state due to other issues.",
        "enum": [
          "UP",
          "DOWN",
          "DEGRADED"
        ]
      },
      "UiBranding": {
        "type": "object",
        "description": "A branding object with the portal name, portal color, selected theme and custom URLs.",
        "properties": {
          "portalName": {
            "type": "string"
          },
          "portalColor": {
            "type": "string",
            "description": "A custom color defined by the administrator and used to theme the site.\nThe color should be in rgb hex color format such as \"FFFFFF\" all capitalized.\nCan be set to an empty string to use the selected theme's default colors.\n"
          },
          "selectedTheme": {
            "$ref": "#/components/schemas/UiTheme"
          },
          "customLinks": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/UiBrandingMenuItem"
            }
          }
        },
        "required": [
          "customLinks",
          "portalName"
        ]
      },
      "UiBrandingMenuItem": {
        "type": "object",
        "description": "An ordered list of menu items which can be customized and used in the application. Can be defined as a\nlink,\noverride (well known links that can be overridden, Default values are About, Help, VMRC),\nsection,\nseparator(section without a name) of the drop down menu.",
        "properties": {
          "name": {
            "type": "string"
          },
          "menuItemType": {
            "type": "string",
            "enum": [
              "link",
              "section",
              "override",
              "separator"
            ]
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "menuItemType"
        ]
      },
      "UiPluginMetadata": {
        "type": "object",
        "description": "Meta information about a UI Plugin",
        "properties": {
          "pluginName": {
            "type": "string"
          },
          "vendor": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "license": {
            "type": "string"
          },
          "link": {
            "type": "string"
          },
          "tenant_scoped": {
            "type": "boolean"
          },
          "provider_scoped": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "required": [
          "license",
          "link",
          "pluginName",
          "vendor",
          "version"
        ]
      },
      "UiTheme": {
        "type": "object",
        "description": "A theme supported by vCloud Director.",
        "properties": {
          "themeType": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "themeType"
        ]
      },
      "UniversalEgressRoutes": {
        "type": "object",
        "description": "Object consisting of Egress Points and Universal Routes for a Universal Router.",
        "properties": {
          "egressPoints": {
            "$ref": "#/components/schemas/EgressPoints",
            "description": "The list of Egress Points for routing configuration. This is read-only."
          },
          "universalRoutes": {
            "$ref": "#/components/schemas/UniversalRoutes",
            "description": "The list of Universal Routes for routing configuration."
          }
        }
      },
      "UniversalRoute": {
        "type": "object",
        "description": "A Route for a Universal Router.",
        "properties": {
          "defaultEgress": {
            "$ref": "#/components/schemas/EgressPointReference",
            "description": "For a given route, routing by default will go through the default egress point. Every valid/configured route will have a default egress point."
          },
          "standbyEgress": {
            "$ref": "#/components/schemas/EgressPointReference",
            "description": "A standby egress point can be configured for failover of routes in case there is an issue routign to the default egress point."
          },
          "networkProviderScope": {
            "type": "string",
            "description": "The network provider scope for the given route. There can only be one route per fault domain for a Universal Route."
          },
          "status": {
            "$ref": "#/components/schemas/UniversalRoutingStatus",
            "description": "The status of the route (whether it's realized, failed, etc.)."
          },
          "errorMessage": {
            "type": "string"
          }
        },
        "required": [
          "networkProviderScope"
        ]
      },
      "UniversalRouter": {
        "type": "object",
        "description": "A UniversalRouter object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "vdcGroupRef": {
            "$ref": "#/components/schemas/EntityReference"
          },
          "localEgress": {
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/VdcGroupEntityStatus"
          },
          "errorMessage": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "vdcGroupRef"
        ]
      },
      "UniversalRouterDhcpConfig": {
        "type": "object",
        "description": "A UniversalRouterDhcpConfig object.",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "servers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/UniversalRouterDhcpServer"
            }
          }
        }
      },
      "UniversalRouterDhcpServer": {
        "type": "object",
        "description": "List of Dhcp servers for universal router.\nEither egressRef or serverAddress is required to identify Dhcp server.",
        "properties": {
          "egressRef": {
            "$ref": "#/components/schemas/EntityReference"
          },
          "serverAddress": {
            "type": "string"
          }
        }
      },
      "UniversalRouters": {
        "type": "object",
        "description": "List of Universal Routers",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/UniversalRouter"
            }
          }
        }
      },
      "UniversalRoutes": {
        "type": "object",
        "description": "List of routes associated with a Universal Router.",
        "properties": {
          "keepAliveTimer": {
            "type": "integer",
            "description": "The Keep Alive Timer is the frequency (in seconds) at which the Universal Router seeds Keep Alive messages to its egress peers."
          },
          "values": {
            "type": "array",
            "description": "The list of Universal Routes.",
            "items": {
              "$ref": "#/definitions/UniversalRoute"
            }
          },
          "providerScopesToForceUnconfigure": {
            "type": "array",
            "description": "The list network provider scopes whose route will be unconfigure forcefully. This means that a route that is in state that normally shouldn't be\nunconfigurable (i.e. NSX or remote vCD site is down) will still be unconfigured. Errors may be ignored. Note that this force option also affects any route\nupdate where a network provider's egress point is modified/changed. vCD will first unconfigure any existing egress point before configuring the new egress\npoint.\n",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UniversalRoutingStatus": {
        "type": "string",
        "description": "Represents status of given routing configuration, such as realized, universal router routing configuration failed, egress routing configuration failed, etc.",
        "enum": [
          "SAVING",
          "SAVED",
          "CONFIGURING",
          "REALIZED",
          "REALIZATION_FAILED",
          "CONFIGURATION_FAILED_UNIVERSAL_ROUTER",
          "CONFIGURATION_FAILED_UNIVERSAL_EGRESS_POINT",
          "UNCONFIGURED",
          "DELETING",
          "DELETION_FAILED_UNIVERSAL_ROUTER",
          "DELETION_FAILED_UNIVERSAL_EGRESS_POINT"
        ]
      },
      "UnmanagedVirtualMachine": {
        "type": "object",
        "description": "An unmanaged Virtual Machine is a Virtual Machine that is not managed by Cloud Director but is present in vCenter.",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the virtual machine.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "memory": {
            "type": "integer",
            "format": "int64",
            "description": "The total memory (in MB) of the virtual machine.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "cpuCount": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of CPUs of the virtual machine.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "storage": {
            "type": "integer",
            "format": "int64",
            "description": "The total storage (in KB) of the virtual machine.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "path": {
            "type": "string",
            "description": "The absolute path of the virtual machine in the vCenter's datastore.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "virtualHardwareVersion": {
            "type": "integer",
            "description": "The virtual hardware version of the virtual machine.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "state": {
            "type": "string",
            "description": "The following strings are valid states of the virtual machine. <ul> <li>INVALID</li> <li>OFF</li> <li>ON</li> <li>SUSPENDED</li> <li>UNKNOWN</li> <li>STUCK</li> </ul>",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "moRef": {
            "type": "string",
            "description": "The vSphere Managed Object Reference.",
            "x-vcloud-constraint": [
              {
                "constraint": "NonSortable"
              },
              {
                "constraint": "ReadOnly"
              }
            ]
          }
        }
      },
      "UploadMetadataResponse": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "plugin_status": {
                "type": "string",
                "enum": [
                  "unavailable",
                  "ready"
                ]
              },
              "resourcePath": {
                "type": "string"
              }
            }
          }
        ],
        "description": "Description of an upload (in progress or complete)"
      },
      "UploadSpec": {
        "type": "object",
        "description": "Information about upload",
        "properties": {
          "fileName": {
            "type": "string"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "checksum": {
            "type": "string"
          },
          "checksumAlgo": {
            "type": "string",
            "enum": [
              "sha1",
              "sha256"
            ],
            "default": "sha1"
          }
        },
        "required": [
          "fileName",
          "size"
        ]
      },
      "Url": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string"
          },
          "port": {
            "type": "integer",
            "minimum": 0,
            "maximum": 65535
          },
          "ssl": {
            "type": "boolean"
          }
        }
      },
      "UsedIpAddress": {
        "type": "object",
        "description": "Describes a used IP address for a network.",
        "properties": {
          "entityId": {
            "type": "string",
            "description": "Id of the entity using the IP address, such as a VM."
          },
          "entityName": {
            "type": "string",
            "description": "Name of the entity using the IP address."
          },
          "vAppName": {
            "type": "string",
            "description": "Name of the vApp whose VM is using this IP address."
          },
          "ipAddress": {
            "type": "string",
            "description": "The IP address in use."
          },
          "deployed": {
            "type": "boolean",
            "description": "Whether the entity using this IP address is currently deployed."
          },
          "allocationType": {
            "$ref": "#/components/schemas/UsedIpAddressAllocationType",
            "description": "The possible allocation types for network address like VSM allocated, VM allocated or NAT routed."
          },
          "networkRef": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "The vApp network or Org vDC network to which this entity is connected."
          },
          "orgRef": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "The organization that this entity belongs to."
          }
        }
      },
      "UsedIpAddressAllocationType": {
        "type": "string",
        "description": "The possible allocation types for allocated network IP address.\nVM_ALLOCATED means that the IP address is used by a VM,\nEDGE means that the IP address is in use by an NSX edge gateway interface.",
        "enum": [
          "VM_ALLOCATED",
          "EDGE"
        ]
      },
      "User": {
        "type": "object",
        "description": "LDAP User Spec object.",
        "properties": {
          "username": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "orgEntityRef": {
            "$ref": "#/components/schemas/EntityReference"
          },
          "fullname": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "im": {
            "type": "string"
          },
          "external": {
            "type": "boolean"
          },
          "nameInSource": {
            "type": "string"
          },
          "sourceEntityRef": {
            "$ref": "#/components/schemas/EntityReference"
          },
          "enabled": {
            "type": "boolean"
          },
          "locked": {
            "type": "boolean"
          },
          "alertEmailPrefix": {
            "type": "string"
          },
          "alertEmail": {
            "type": "string"
          },
          "roleEntityRef": {
            "$ref": "#/components/schemas/EntityReference"
          },
          "roleInherited": {
            "type": "boolean"
          },
          "delayAfterPowerOnSeconds": {
            "type": "integer"
          },
          "storedVMQuota": {
            "type": "integer"
          },
          "deployedVMQuota": {
            "type": "integer"
          },
          "inSync": {
            "type": "boolean"
          }
        }
      },
      "UserGroup": {
        "type": "object",
        "description": "Group Spec object.",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "x-vcloud-added-in": 34
          },
          "description": {
            "type": "string"
          },
          "orgEntityRef": {
            "$ref": "#/components/schemas/EntityReference"
          },
          "sourceEntityRef": {
            "$ref": "#/components/schemas/EntityReference"
          },
          "roleEntityRef": {
            "$ref": "#/components/schemas/EntityReference"
          },
          "nameInSource": {
            "type": "string"
          },
          "providerType": {
            "type": "string"
          }
        }
      },
      "VCenterServer": {
        "type": "object",
        "description": "An object representing a vCenter server.",
        "properties": {
          "vcId": {
            "type": "string",
            "example": "urn:vcloud:vimserver:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
            "description": "URN of the associated vCenter server.",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSortable"
              },
              {
                "constraint": "ReadOnly"
              },
              {
                "constraint": "Urn",
                "args": [
                  {
                    "arg": "vimserver"
                  }
                ]
              }
            ]
          },
          "name": {
            "type": "string",
            "example": "vCenter Sample Name",
            "description": "The name of the vCenter server."
          },
          "description": {
            "type": "string",
            "example": "vCenter Sample Description",
            "description": "Optional description.",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "username": {
            "type": "string",
            "description": "User name to connect to the server."
          },
          "password": {
            "type": "string",
            "description": "Cleartext password to connect to the server.",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ],
            "x-vcloud-password": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://sampleVc.vmware.com",
            "description": "URL of the server."
          },
          "isEnabled": {
            "type": "boolean",
            "description": "True if the vCenter server is enabled for use with vCloud Director.",
            "default": false
          },
          "vsphereWebClientServerUrl": {
            "type": "string",
            "format": "uri",
            "description": "The URL of vCenter web client server."
          },
          "hasProxy": {
            "type": "boolean",
            "description": "When present, indicates that a proxy exists within vCloud Director that proxies this vCenter server for access by authorized end-users. Setting this field to true when registering a vCenter server will result in a proxy being created for the vCenter server, and another for the corresponding SSO endpoint (if different from the vCenter server's endpoint). This field is immutable after the vCenter Server is registered, and will be updated by the system when/if the proxy is removed.",
            "default": false
          },
          "rootFolder": {
            "type": "string",
            "description": "vCenter root folder in which the vCloud Director system folder will be created. This parameter only takes the folder name and not directory structure.",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              },
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "vcNoneNetwork": {
            "type": "string",
            "description": "Network in Vcenter to be used as 'NONE' network by vCD.",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              },
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "tenantVisibleName": {
            "type": "string",
            "description": "Public label of this vCenter server visible to all tenants.",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "isConnected": {
            "type": "boolean",
            "description": "True if the vCenter server is connected.",
            "default": false,
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "mode": {
            "type": "string",
            "description": "The vcenter mode. One of <ul> <li>NONE - undetermined</li> <li>IAAS - provider scoped</li> <li>SDDC - tenant scoped</li> <li>MIXED</li> </ul> IAAS indicates this vCenter server is scoped to the provider. SDDC indicates that this vCenter server is scoped to tenants, while MIXED indicates mixed mode, where both uses are allowed in this vCenter server.",
            "enum": [
              "NONE",
              "IAAS",
              "SDDC",
              "MIXED"
            ]
          },
          "listenerState": {
            "type": "string",
            "description": "The vcenter listener state. One of <ul> <li>INITIAL</li> <li>INVALID_SETTINGS</li> <li>UNSUPPORTED</li> <li>DISCONNECTED</li> <li>CONNECTING</li> <li>CONNECTED_SYNCING</li> <li>CONNECTED</li> <li>STOP_REQ</li> <li>STOP_AND_PURGE_REQ</li> <li>STOP_ACK</li> </ul>",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "clusterHealthStatus": {
            "type": "string",
            "description": "The overall health status of clusters in this vCenter server. One of <ul> <li>GRAY</li> <li>RED</li> <li>YELLOW</li> <li>GREEN</li> </ul>",
            "enum": [
              "GRAY",
              "RED",
              "YELLOW",
              "GREEN"
            ]
          },
          "vcVersion": {
            "type": "string",
            "example": "6.7.0",
            "description": "The version of the VIM server.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "uuid": {
            "type": "string",
            "description": "The instance UUID property of the vCenter server.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              },
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "nsxVManager": {
            "$ref": "#/components/schemas/NsxVManager",
            "description": "the NSX-V attached to this Virtual Center server, when present."
          },
          "proxyConfigurationUrn": {
            "type": "string",
            "x-vcloud-constraints": [
              {
                "constraint": "Urn",
                "args": [
                  {
                    "arg": "proxyConfiguration"
                  }
                ]
              }
            ]
          }
        },
        "required": [
          "name",
          "url",
          "username",
          "vsphereWebClientServerUrl"
        ]
      },
      "VCenterServerMetrics": {
        "type": "object",
        "description": "An object representing metrics of a vCenter server.",
        "properties": {
          "vcId": {
            "type": "string",
            "example": "urn:vcloud:vimserver:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
            "description": "URN of the associated vCenter server.",
            "x-vcloud-constraints": [
              {
                "constraint": "NonSortable"
              },
              {
                "constraint": "ReadOnly"
              },
              {
                "constraint": "Urn",
                "args": [
                  {
                    "arg": "vimserver"
                  }
                ]
              }
            ]
          },
          "clustersCount": {
            "type": "integer",
            "description": "The number of clusters in this vCenter server.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ]
          },
          "totalVmCount": {
            "type": "integer",
            "description": "The number of VMs in this vCenter server.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              },
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "poweredOnVmCount": {
            "type": "integer",
            "description": "The number of powered-on VMs in this vCenter server.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              },
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "totalMemMb": {
            "type": "integer",
            "description": "The total memory (in MB) in this vCenter server.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              },
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "reservedMemMb": {
            "type": "integer",
            "description": "The reserved memory (in MB) in this vCenter server.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              },
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "demandedMemMb": {
            "type": "integer",
            "description": "The demanded memory (in MB) in this vCenter server.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              },
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "totalCpuMhz": {
            "type": "integer",
            "description": "The total CPU (in MHz) in this vCenter server.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              },
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "reservedCpuMhz": {
            "type": "integer",
            "description": "The reserved CPU (in MHz) in this vCenter server.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              },
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "demandedCpuMhz": {
            "type": "integer",
            "description": "The demanded CPU (in MHz) in this vCenter server.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              },
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "totalStorageMb": {
            "type": "integer",
            "description": "The size (in MB) of all datastores in this vCenter server.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              },
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "freeStorageMb": {
            "type": "integer",
            "description": "The size of free storage (in MB) of all datastores in this vCenter server.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              },
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "uncommittedStorageMb": {
            "type": "integer",
            "description": "The size of uncommitted storage (in MB) of all datastores in this vCenter server.",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              },
              {
                "constraint": "NonSearchable"
              },
              {
                "constraint": "NonSortable"
              }
            ]
          }
        }
      },
      "VROServiceInfo": {
        "type": "object",
        "description": "Response type with meta information about a vRealize Orchestrator Service",
        "properties": {
          "id": {
            "type": "string",
            "description": "This is a read-only field in the client. Values set on this field will be ignored by the server.\n"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "vroEndpoint": {
            "type": "string",
            "format": "uri"
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password is hidden using a Password Mask represented by a series of 6 asterisks (\"******\") in the response.\nThe Password Mask is not an acceptable password during VRO Server registration.\nDuring an update, the Password Mask set for the 'password' field is interpreted as no change to the field and is ignored.\n"
          },
          "version": {
            "type": "string"
          },
          "trustAnchor": {
            "type": "string",
            "description": "SSL Certificate chain for the VRO endpoint\n"
          }
        }
      },
      "VdcComputePolicy": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID for vDC compute policy. This is immutable.\n"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 256,
            "default": "A vDC compute policy.",
            "x-vcloud-constraint": [
              {
                "constraint": "NonSortable"
              }
            ]
          },
          "name": {
            "type": "string",
            "description": "Display name.\n",
            "minLength": 1,
            "maxLength": 128
          },
          "cpuSpeed": {
            "type": "integer",
            "format": "int64",
            "description": "The CPU speed in MHz of this VM. This is optional. When provided,\nVMs with this policy cannot have more than CPU speed defined by this field.\n",
            "x-vcloud-added-in": 32
          },
          "memory": {
            "type": "integer",
            "format": "int64",
            "description": "The maximum memory in MB allowed for a VM. This is optional. When provided, VMs with\nthis policy cannot have configured memory more than defined by this field.\n",
            "x-vcloud-added-in": 32
          },
          "cpuCount": {
            "type": "integer",
            "format": "int32",
            "description": "The maximum number of CPUs allowed for a VM. This is optional. When provided,\nVMs with this policy cannot have more than number of CPUs defined by this field.\n",
            "x-vcloud-added-in": 32
          },
          "coresPerSocket": {
            "type": "integer",
            "format": "int32",
            "description": "The cores per socket to be configured for the VM where this policy is applied.\n",
            "x-vcloud-added-in": 32
          },
          "memoryReservationGuarantee": {
            "type": "number",
            "format": "double",
            "description": "The factor of the configured memory reserved for the VM on which this policy is applied.\n",
            "minimum": 0,
            "maximum": 1,
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "x-vcloud-added-in": 32,
            "x-vcloud-restricted": "Restricted field, requires 'View Alternate Admin version of Compute Policies for an Organization VDC' right to access this field.\n"
          },
          "cpuReservationGuarantee": {
            "type": "number",
            "format": "double",
            "description": "The factor of the configured CPU reserved for the VM on which this policy is applied.\n",
            "minimum": 0,
            "maximum": 1,
            "exclusiveMinimum": false,
            "x-vcloud-added-in": 32,
            "x-vcloud-restricted": "Restricted field, requires 'View Alternate Admin version of Compute Policies for an Organization VDC' right to access this field.\n"
          },
          "cpuLimit": {
            "type": "integer",
            "format": "int64",
            "description": "The limit of CPU in MHz for the VM on which this policy is applied. -1 means unlimited. This\nis optional. If not provided, limit would be equal to the vCPUSpeed multiplied by numCPU.\n",
            "x-vcloud-added-in": 32,
            "x-vcloud-restricted": "Restricted field, requires 'View Alternate Admin version of Compute Policies for an Organization VDC' right to access this field.\n"
          },
          "memoryLimit": {
            "type": "integer",
            "format": "int64",
            "description": "The limit of memory in MB for the VM on which this policy is applied. -1 means unlimited. This\nis optional. If not provided, limit would be equal to the configured memory of the VM.\n",
            "x-vcloud-added-in": 32,
            "x-vcloud-restricted": "Restricted field, requires 'View Alternate Admin version of Compute Policies for an Organization VDC' right to access this field.\n"
          },
          "cpuShares": {
            "type": "integer",
            "format": "int32",
            "description": "The number of CPU shares for the VM on which this policy is applied. This is optional. If\nnot provided, Normal shares would be applied to the VM.\n",
            "x-vcloud-added-in": 32,
            "x-vcloud-restricted": "Restricted field, requires 'View Alternate Admin version of Compute Policies for an Organization VDC' right to access this field.\n"
          },
          "memoryShares": {
            "type": "integer",
            "format": "int32",
            "description": "The number of memory shares for the VM on which this policy is applied. This is optional. If\nnot provided, Normal shares would be applied to the VM.\n",
            "x-vcloud-added-in": 32,
            "x-vcloud-restricted": "Restricted field, requires 'View Alternate Admin version of Compute Policies for an Organization VDC' right to access this field.\n"
          },
          "extraConfigs": {
            "type": "object",
            "description": "Map of extra configs to be set on the VM with this policy.\n",
            "additionalProperties": {
              "type": "string"
            },
            "x-vcloud-added-in": 32,
            "x-vcloud-constraints": [
              {
                "constraint": "NonSortable"
              }
            ],
            "x-vcloud-restricted": "Restricted field, requires 'View Alternate Admin version of Compute Policies for an Organization VDC' right to access this field.\n"
          },
          "pvdcComputePolicyRef": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "Deprecated in Api 32.0, this property will be removed in future release."
          },
          "pvdcComputePolicy": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "This field cannot be updated and is a read-only field in the client after creation."
          },
          "compatibleVdcTypes": {
            "type": "array",
            "description": "A list of read-only compatible vDC types for this policy.",
            "items": {
              "type": "string"
            },
            "x-vcloud-added-in": 32,
            "x-vcloud-restricted": "Restricted field, requires 'View Alternate Admin version of Compute Policies for an Organization VDC' right to access this field.\n"
          },
          "isSizingOnly": {
            "type": "boolean",
            "description": "This field cannot be updated and is a read-only field in the client after creation. It defines whether\nthe policy is SIZING_ONLY or if it also contains affinity information.\n",
            "readOnly": true,
            "x-vcloud-added-in": 33
          },
          "pvdcId": {
            "type": "string",
            "description": "URN for Provider VDC.\n",
            "x-vcloud-added-in": 33,
            "x-vcloud-constraints": [
              {
                "constraint": "NonSortable"
              },
              {
                "constraint": "Urn",
                "args": [
                  {
                    "arg": "providervdc"
                  }
                ]
              }
            ],
            "x-vcloud-restricted": "Restricted field, requires 'View Alternate Admin version of Compute Policies for an Organization VDC' right to access this field.\n"
          },
          "namedVmGroups": {
            "type": "array",
            "description": "List of list of vmGroups grouped together in a meaningful manner.\nA group of vmGroups would consist of one functionally equal vmGroup picked from each cluster of the pvdc.\n",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EntityReference"
              }
            },
            "x-vcloud-added-in": 33,
            "x-vcloud-restricted": "Restricted field, requires 'View Alternate Admin version of Compute Policies for an Organization VDC' right to access this field.\n"
          },
          "logicalVmGroupReferences": {
            "type": "array",
            "description": "List of logical vm group references. This value is set at creation time and cannot be edited later.\n",
            "items": {
              "$ref": "#/definitions/EntityReference"
            },
            "x-vcloud-added-in": 33,
            "x-vcloud-restricted": "Restricted field, requires 'View Alternate Admin version of Compute Policies for an Organization VDC' right to access this field.\n"
          },
          "isAutoGenerated": {
            "type": "boolean",
            "description": "This field cannot be updated and is a read-only field in the client. It defines if the policy\nis auto-generated.\n",
            "x-vcloud-constraints": [
              {
                "constraint": "ReadOnly"
              }
            ],
            "x-vcloud-added-in": 33
          }
        },
        "required": [
          "name"
        ]
      },
      "VdcGroup": {
        "type": "object",
        "description": "A vCD Group.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID for the vDC Group (read-only)."
          },
          "orgId": {
            "type": "string",
            "description": "The organization that this group belongs to."
          },
          "name": {
            "type": "string",
            "description": "The name of this group. The name must be unique."
          },
          "description": {
            "type": "string",
            "description": "The description of this group."
          },
          "localEgress": {
            "type": "boolean",
            "description": "Determines whether local egress is enabled for a universal router belonging to a universal vDC group.\nThis value is used on create if universalNetworkingEnabled is set to true.\nThis cannot be updated. This value is always false for local vDC groups.\n",
            "default": false
          },
          "participatingOrgVdcs": {
            "type": "array",
            "description": "The list of organization vDCs that are participating in this group.",
            "items": {
              "$ref": "#/definitions/ParticipatingVdcReference"
            }
          },
          "universalNetworkingEnabled": {
            "type": "boolean",
            "description": "True means that a vDC group router has been created. If set to true for vdc group creation, a universal router will also be created."
          },
          "networkPoolUniversalId": {
            "type": "string",
            "description": "The network provider's universal id that is backing the universal network pool.\nThis field is read-only and is derived from the list of participating vDCs if a universal vDC group is created.\nFor universal vDC groups, each participating vDC should have a universal network pool that is backed by this same id.\n"
          },
          "networkPoolId": {
            "type": "string",
            "description": "ID of network pool to use if creating a local vDC group router.\nMust be set if creating a local group. Ignored if creating a\nuniversal group.\n"
          },
          "status": {
            "$ref": "#/components/schemas/VdcGroupEntityStatus",
            "description": "The status that the group can be in."
          },
          "type": {
            "type": "string",
            "description": "Defines the group as LOCAL or UNIVERSAL. Cannot be changed after a router is assigned to the group.\nA universal network pool will be used if set to UNIVERSAL. The given network pool will be used if\nset to LOCAL. If the type is not set, the group will default to UNIVERSAL. LOCAL vDC groups consist of\nvDCs with the same network provider, sharing the same network pool for cross-vDC networking.  UNIVERSAL\nvDC groups have vDCs with different network provider scopes with a single shared universal network pool\nfor cross-vDC networking.",
            "enum": [
              "LOCAL",
              "UNIVERSAL"
            ],
            "default": "UNIVERSAL"
          },
          "errorMessage": {
            "type": "string",
            "description": "If the group has an error status, a more detailed error message is set here."
          }
        },
        "required": [
          "name",
          "orgId",
          "participatingOrgVdcs"
        ]
      },
      "VdcGroupEntityStatus": {
        "type": "string",
        "description": "Represents status of vDC group components such as participating vdc's\nconfigured routing, egress points, etc.",
        "enum": [
          "SAVING",
          "SAVED",
          "CONFIGURING",
          "REALIZED",
          "REALIZATION_FAILED",
          "DELETING",
          "DELETE_FAILED",
          "OBJECT_NOT_FOUND",
          "UNCONFIGURED"
        ]
      },
      "VdcNetworkConnectionType": {
        "type": "string",
        "description": "Describes how a network is connected to a gateway.",
        "enum": [
          "DISTRIBUTED",
          "INTERNAL",
          "SUBINTERFACE"
        ]
      },
      "VdcNetworkDhcpConfig": {
        "type": "object",
        "description": "Configuration for the DHCP service that runs on the network.",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether the DHCP service is currently enabled on network"
          },
          "dhcpPools": {
            "type": "array",
            "description": "Range of DHCP IP addresses",
            "items": {
              "$ref": "#/definitions/VdcNetworkDhcpPool"
            }
          }
        }
      },
      "VdcNetworkDhcpPool": {
        "type": "object",
        "description": "A range of DHCP ip addresses and its lease time configuration.",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether the DHCP address pool is currently enabled"
          },
          "ipRange": {
            "$ref": "#/components/schemas/IpRange"
          },
          "maxLeaseTime": {
            "type": "integer",
            "description": "Max lease time in seconds",
            "minimum": 0
          },
          "defaultLeaseTime": {
            "type": "integer",
            "description": "Default lease time in seconds",
            "minimum": 0
          }
        }
      },
      "VdcNetworkFenceType": {
        "type": "string",
        "description": "The network type.",
        "enum": [
          "DIRECT",
          "DIRECT_UPLINK",
          "ISOLATED",
          "OPAQUE",
          "NAT_ROUTED",
          "CROSS_VDC"
        ]
      },
      "VdcNetworkProfile": {
        "type": "object",
        "description": "A vDC Network Profile object.",
        "properties": {
          "primaryEdgeCluster": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "The Edge Cluster where the primary appliance for an NSX-V Edge Gateway will be deployed."
          },
          "secondaryEdgeCluster": {
            "$ref": "#/components/schemas/EntityReference",
            "description": "The Edge Cluster where the secondary appliance for an NSX-V Edge Gateway will be deployed if HA is enabled on the Edge."
          }
        }
      },
      "VlanIdRange": {
        "type": "object",
        "description": "An object representing VLAN Id range.",
        "properties": {
          "startId": {
            "type": "integer",
            "description": "Starting VLAN Id in the range."
          },
          "endId": {
            "type": "integer",
            "description": "Ending VLAN Id in the range."
          }
        }
      },
      "VlanIdRanges": {
        "type": "object",
        "description": "List of IpRange",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/VlanIdRange"
            }
          }
        }
      },
      "VmcSddc": {
        "type": "object",
        "description": "A VMware Cloud on AWS SDDC",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID for the VMC SDDC."
          },
          "name": {
            "type": "string",
            "description": "The name of the VMC SDDC. This field is read-only."
          }
        }
      },
      "VroRemoteInventoryItem": {
        "type": "object",
        "description": "Meta information about an inventory item on a vRealize Orchestrator server",
        "properties": {
          "href": {
            "type": "string"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WsAttribute"
            }
          },
          "relations": {
            "$ref": "#/components/schemas/Relations"
          }
        }
      },
      "VroRemoteItem": {
        "type": "object",
        "description": "Information about various objects in vRealize Orchestrator server",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "vroServerId": {
            "type": "string"
          },
          "dunesId": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "selectable": {
            "type": "boolean"
          },
          "canHaveChildren": {
            "type": "boolean"
          },
          "href": {
            "type": "string"
          },
          "rel": {
            "type": "string"
          }
        }
      },
      "VroRemoteItems": {
        "type": "object",
        "description": "A list of objects in vRealize orchestrator server",
        "properties": {
          "remoteItems": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/VroRemoteItem"
            }
          },
          "resultTotal": {
            "type": "integer"
          },
          "pageCount": {
            "type": "integer"
          }
        }
      },
      "VroRemotePluginItem": {
        "type": "object",
        "description": "A plugin namespaces for whom type information can be retrieved",
        "properties": {
          "name": {
            "type": "string"
          },
          "typeHref": {
            "type": "string"
          },
          "selectable": {
            "type": "boolean"
          },
          "canHaveChildren": {
            "type": "boolean"
          }
        }
      },
      "VroRemotePluginItems": {
        "type": "object",
        "description": "List of plugin namespaces",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/VroRemotePluginItem"
            }
          }
        }
      },
      "VroRemotePluginType": {
        "type": "object",
        "description": "Type definition for a plugin namespace",
        "properties": {
          "name": {
            "type": "string"
          },
          "selectable": {
            "type": "boolean"
          },
          "canHaveChildren": {
            "type": "boolean"
          }
        }
      },
      "VroRemotePluginTypes": {
        "type": "object",
        "description": "A list of defined types for a particular plugin namespace",
        "properties": {
          "types": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/VroRemotePluginType"
            }
          },
          "namespace": {
            "type": "string"
          }
        }
      },
      "VroRemoteWorkflowItem": {
        "type": "object",
        "description": "Meta information about a workflow on a vRealize Orchestrator server",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "categoryName": {
            "type": "string"
          },
          "canExecute": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "vroServerId": {
            "type": "string"
          }
        }
      },
      "WsAttribute": {
        "type": "object",
        "properties": {
          "displayValue": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "WsParameter": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "encryptValue": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "scope": {
            "type": "string",
            "enum": [
              "local",
              "token"
            ]
          },
          "type": {
            "type": "string"
          },
          "updated": {
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/Parameter"
          }
        }
      },
      "WsWorkflowExecution": {
        "type": "object",
        "properties": {
          "businessState": {
            "type": "string"
          },
          "contentException": {
            "type": "string"
          },
          "currentItemDisplayName": {
            "type": "string"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          },
          "inputParameters": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WsParameter"
            }
          },
          "name": {
            "type": "string"
          },
          "outputParameters": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WsParameter"
            }
          },
          "relations": {
            "$ref": "#/components/schemas/Relations"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "startedBy": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/ExecutionState"
          }
        }
      },
      "AccessibleLocations": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "description": "The current page of accessible locations.",
                "items": {
                  "$ref": "#/definitions/AccessibleLocation"
                }
              }
            }
          }
        ],
        "description": "A list of locations accessible to this session."
      },
      "AllocatedIpAddresses": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AllocatedIpAddress"
                }
              }
            }
          }
        ],
        "description": "List of allocated IP addresses."
      },
      "ApplicationPortProfile": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NetworkProviderContext"
          },
          {
            "$ref": "#/components/schemas/NetworkingObjectStatus"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The id of the Application Port Profile in URN format."
              },
              "name": {
                "type": "string",
                "description": "The name of the Application Port Profile."
              },
              "description": {
                "type": "string"
              },
              "scope": {
                "$ref": "#/components/schemas/ApplicationPortProfileScopeType",
                "description": "The scope of the application port profile definition."
              },
              "applicationPorts": {
                "type": "array",
                "description": "A list of protocol and ports supported by this application port profile.",
                "items": {
                  "$ref": "#/definitions/ApplicationPortList"
                }
              },
              "usableForNAT": {
                "type": "boolean",
                "description": "True means that the port profile can be used for NAT configuration.  A port profile can be used for NAT if there is only 1 application port\nwith at most 1 destination port.\n"
              }
            }
          }
        ],
        "description": "An Application Port Profile object. The application port profile represents a set of ports and protocols that can be used when defining network service rules."
      },
      "ApplicationPortProfiles": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ApplicationPortProfile"
                }
              }
            }
          }
        ],
        "description": "List of Application Port Profiles."
      },
      "ArrayParam": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Parameter"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Parameter"
                }
              }
            }
          }
        ]
      },
      "AuditTrailEvents": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "description": "The current page of audit trail events.",
                "items": {
                  "$ref": "#/definitions/AuditTrailEvent"
                }
              }
            }
          }
        ],
        "description": "A list of audit trail events."
      },
      "BooleanParam": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Parameter"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "Capabilities": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Capability"
                }
              }
            }
          }
        ],
        "description": "List of read-only capabilities."
      },
      "Cells": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Cell"
                }
              }
            }
          }
        ],
        "description": "A paginated list of vCloud Director cells."
      },
      "Certificates": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "description": "The current page of certificates.",
                "items": {
                  "$ref": "#/definitions/TrustedCertificate"
                }
              }
            }
          }
        ],
        "description": "A list of certificates."
      },
      "Chooser": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Decorator"
          },
          {
            "type": "object",
            "properties": {
              "sdkObject": {
                "$ref": "#/components/schemas/SdkObject"
              },
              "type": {
                "type": "string"
              }
            }
          }
        ]
      },
      "CompositeType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Parameter"
          },
          {
            "type": "object",
            "properties": {
              "property": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CompositeValue"
                }
              },
              "type": {
                "type": "string"
              }
            }
          }
        ]
      },
      "CompositeValue": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Parameter"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "property": {
                "$ref": "#/components/schemas/Parameter"
              }
            }
          }
        ]
      },
      "CrossVdcNetwork": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Network"
          },
          {
            "type": "object",
            "properties": {
              "vdcGroupRef": {
                "$ref": "#/components/schemas/EntityReference",
                "description": "The vDC group that this network belongs to."
              },
              "routerRef": {
                "$ref": "#/components/schemas/EntityReference",
                "description": "The router that this network is attached to."
              },
              "status": {
                "$ref": "#/components/schemas/VdcGroupEntityStatus",
                "description": "The status of the network."
              },
              "errorMessage": {
                "type": "string",
                "description": "If the network has an error status, a more detailed error message is set here."
              }
            }
          }
        ],
        "description": "A CrossVdcNetwork object"
      },
      "CrossVdcNetworks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CrossVdcNetwork"
                }
              }
            }
          }
        ],
        "description": "List of cross vDC networks"
      },
      "CustomEntityTypes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "description": "The current page of custom entity types.",
                "items": {
                  "$ref": "#/definitions/CustomEntityType"
                }
              }
            }
          }
        ],
        "description": "A list of custom entity types."
      },
      "CustomValidator": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Constraint"
          }
        ]
      },
      "DateParam": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Parameter"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "DistributedPortGroups": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DistributedPortGroup"
                }
              }
            }
          }
        ],
        "description": "List of distributed portgroups."
      },
      "DropDown": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Decorator"
          },
          {
            "type": "object",
            "properties": {
              "array": {
                "$ref": "#/components/schemas/ArrayParam"
              }
            }
          }
        ]
      },
      "DvSwitches": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DvSwitch"
                }
              }
            }
          }
        ],
        "description": "List of distributed virtual switches."
      },
      "EdgeClusters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EdgeCluster"
                }
              }
            }
          }
        ],
        "description": "List of Edge Clusters."
      },
      "EdgeFirewallRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FirewallRule"
          },
          {
            "type": "object",
            "properties": {
              "logging": {
                "type": "boolean",
                "description": "Whether packet logging is enabled for firewall rule.",
                "default": false
              }
            }
          }
        ],
        "description": "Describes a Firewall rule for an edge gateway backed by NSX-T."
      },
      "EdgeFirewallRules": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NetworkingObjectStatus"
          },
          {
            "type": "object",
            "properties": {
              "systemRules": {
                "type": "array",
                "description": "The ordered list of system defined edge firewall rules. System rules are\napplied before user defined rules in the order in which they are returned.\n",
                "items": {
                  "$ref": "#/definitions/EdgeFirewallRule"
                }
              },
              "userDefinedRules": {
                "type": "array",
                "description": "The ordered list of user defined edge firewall rules.\nUsers are allowed to add/modify/delete rules only to this list.\n",
                "items": {
                  "$ref": "#/definitions/EdgeFirewallRule"
                },
                "maxItems": 1000
              },
              "defaultRules": {
                "type": "array",
                "description": "The ordered list of default edge firewall rules. Default rules are\napplied after the user defined rules in the order in which they are returned.\n",
                "items": {
                  "$ref": "#/definitions/EdgeFirewallRule"
                }
              }
            }
          }
        ],
        "description": "Firewall rules for an edge gateway. This contains an ordered list of system,\nuser defined and default firewall rules. All the rules are returned in the order of type and precedence."
      },
      "EdgeGateway": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NetworkingObjectStatus"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique identifier of the edge gateway."
              },
              "name": {
                "type": "string",
                "description": "The name of the edge gateway."
              },
              "description": {
                "type": "string",
                "description": "The description of the edge gateway(optional)."
              },
              "edgeGatewayUplinks": {
                "type": "array",
                "description": "The uplink connections for the edge gateway.",
                "items": {
                  "$ref": "#/definitions/EdgeGatewayUplink"
                }
              },
              "distributedRoutingEnabled": {
                "type": "boolean",
                "description": "A flag indicating whether distributed routing is enabled or not. The default is false.",
                "default": false
              },
              "orgVdcNetworkCount": {
                "type": "integer",
                "description": "The number of Org vDC networks connected to the gateway."
              },
              "gatewayBacking": {
                "$ref": "#/components/schemas/EdgeGatewayBacking",
                "description": "The backing details of the edge gateway; only required if importing an NSX-T router."
              },
              "orgVdc": {
                "$ref": "#/components/schemas/EntityReference",
                "description": "The organization vDC which the gateway belongs to."
              },
              "orgRef": {
                "$ref": "#/components/schemas/EntityReference",
                "description": "The organization to which the gateway belongs."
              },
              "serviceNetworkDefinition": {
                "type": "string",
                "description": "The network definition in CDIR form that DNS and DHCP service on an NSX-T edge will run on. The subnet prefix length must be 27.\nThis property applies to creating or importing an NSX-T Edge. This is not supported for VMC.\nIf nothing is set, the default is 192.168.255.225/27.  The DHCP listener IP network is on 192.168.255.225/30.\nThe DNS listener IP network is on 192.168.255.228/32.  This field cannot be updated.\n"
              },
              "edgeClusterConfig": {
                "$ref": "#/components/schemas/GatewayEdgeClusterConfig",
                "description": "Edge Cluster Configuration for the Edge Gateway. Can be specified if a gateway needs to be placed on a specific set of Edge Clusters.\nFor NSX-T Edges, user should specify the ID of the NSX-T edge cluster as the value of primaryEdgeCluster's backingId. The gateway\ndefaults to the Edge Cluster of the connected External Network's backing Tier-0 router, if nothing is specified. The value of secondaryEdgeCluster\nwill be set to NULL for NSX-T edge gateways.\nFor NSX-V Edges, this is read-only and the legacy API must be used for edge specific placement."
              }
            }
          }
        ],
        "description": "An edge gateway object"
      },
      "EdgeGatewaySubnet": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Subnet"
          },
          {
            "type": "object",
            "properties": {
              "primaryIp": {
                "type": "string",
                "description": "The primary IP address allocated for this subnet. If not specified, this IP is auto-allocated.  This IP belongs to the external network\nand can be used for system-configured NAT rules such as DNS forwarder configuration.\n"
              },
              "autoAllocateIpRanges": {
                "type": "boolean",
                "description": "Used for create and update api calls. If set to true, IP Ranges are automatically generated based on totalIpCount.",
                "default": false
              }
            }
          }
        ],
        "description": "Subnet for edge gateway that contains the IPs from the external network that are allocated to the edge."
      },
      "EdgeGateways": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "description": "A list of EdgeGateways.",
                "items": {
                  "$ref": "#/definitions/EdgeGateway"
                }
              }
            }
          }
        ],
        "description": "List of edge gateways"
      },
      "EdgeIpSecVpnTunnels": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NetworkingObjectStatus"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "description": "The list of IPSec VPN tunnels.",
                "items": {
                  "$ref": "#/definitions/EdgeIpSecVpnTunnel"
                },
                "maxItems": 1000
              }
            }
          }
        ],
        "description": "List of configured IPSec VPN tunnels."
      },
      "EdgeNatRules": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NetworkingObjectStatus"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "description": "The list of NAT Rules.",
                "items": {
                  "$ref": "#/definitions/EdgeNatRule"
                }
              }
            }
          }
        ],
        "description": "List of configured NAT Rules."
      },
      "EncryptedString": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Parameter"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string"
              }
            }
          }
        ]
      },
      "EntityReferences": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "description": "The current page of entity references.",
                "items": {
                  "$ref": "#/definitions/EntityReference"
                }
              }
            }
          }
        ],
        "description": "A list of entity references."
      },
      "ExternalNetwork": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Network"
          },
          {
            "$ref": "#/components/schemas/NetworkingObjectStatus"
          },
          {
            "type": "object",
            "properties": {
              "networkBackings": {
                "$ref": "#/components/schemas/ExternalNetworkBackings",
                "description": "Backings for this external network. Describes if this external network\nis backed by port groups, vCenter standard switch or an NSX-T Tier-0 router."
              },
              "totalIpCount": {
                "type": "integer",
                "description": "The number of IP addresses defined by the static ip pools. If the network contains any IpV6 subnets, the total ip count will be null."
              },
              "usedIpCount": {
                "type": "integer",
                "description": "The number of IP address used from the static ip pools."
              },
              "dedicatedOrg": {
                "$ref": "#/components/schemas/EntityReference",
                "description": "The Organization that this external network is dedicated to. This is null if this is not a dedicated external network."
              },
              "dedicatedEdgeGateway": {
                "$ref": "#/components/schemas/EntityReference",
                "description": "The Edge Gateway that this external network is dedicated to. This is null if this is not a dedicated external network."
              }
            }
          }
        ],
        "description": "An external network."
      },
      "ExternalNetworks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ExternalNetwork"
                }
              }
            }
          }
        ],
        "description": "List of External Networks"
      },
      "Field": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PresentationElement"
          },
          {
            "type": "object",
            "properties": {
              "decorators": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Decorator"
                }
              },
              "constraints": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Constraint"
                }
              },
              "type": {
                "type": "string"
              },
              "affectedFieldsIds": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "FirewallGroupAssociatedVMs": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/FirewallGroupAssociatedVM"
                }
              }
            }
          }
        ],
        "description": "List of associated VMs for firewall group"
      },
      "FirewallGroupSummary": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The id of the firewall group."
              },
              "name": {
                "type": "string",
                "description": "The name of the firewall group."
              },
              "description": {
                "type": "string",
                "description": "The description of the firewall group"
              },
              "type": {
                "$ref": "#/components/schemas/FirewallGroupType",
                "description": "Defines the type of Firewall Group. These groups can be used in Firewall Rules to define rules that are scoped to the IP Addresses/Members\ndefined in a Firewall Group.\n<ul>\n  <li> <code> IP_SET </code> should be used when using particular IP Addresses of VMs, Networks, etc.\n  <li> <code> SECURITY_GROUP </code> should be used when specifying exact members such as a particular Org vDC Network.\n</ul>"
              }
            }
          },
          {
            "$ref": "#/components/schemas/FirewallGroupScope"
          },
          {
            "$ref": "#/components/schemas/NetworkingObjectStatus"
          }
        ],
        "description": "A Firewall Group object."
      },
      "FirewallGroups": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/FirewallGroupSummary"
                }
              }
            }
          }
        ],
        "description": "List of Firewall Groups"
      },
      "GatewayUsedIpAddresses": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GatewayUsedIpAddress"
                }
              }
            }
          }
        ],
        "description": "List of IP addresses used by an edge gateway."
      },
      "GlobalRoles": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "description": "The current page of global roles.",
                "items": {
                  "$ref": "#/definitions/GlobalRole"
                }
              }
            }
          }
        ],
        "description": "A list of global roles."
      },
      "Group": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PresentationElement"
          },
          {
            "type": "object",
            "properties": {
              "fields": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/PrimaryField"
                }
              }
            }
          }
        ]
      },
      "KeyValuePair": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Parameter"
          },
          {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "value": {
                "$ref": "#/components/schemas/Parameter"
              }
            }
          }
        ]
      },
      "LogicalVmGroups": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "description": "The current page of LogicalVmGroups.",
                "items": {
                  "$ref": "#/definitions/LogicalVmGroup"
                }
              }
            }
          }
        ],
        "description": "A list of LogicalVmGroups."
      },
      "Mandatory": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Constraint"
          }
        ]
      },
      "MimeAttachment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Parameter"
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "type": "string",
                "format": "binary"
              },
              "name": {
                "type": "string"
              },
              "mimeType": {
                "type": "string"
              }
            }
          }
        ]
      },
      "MultiLine": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Decorator"
          }
        ]
      },
      "NetworkPoolSummary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NetworkingObjectStatus"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The id of the Network Pool in URN format.",
                "x-vcloud-constraints": [
                  {
                    "constraint": "Urn",
                    "args": [
                      {
                        "arg": "networkpool"
                      }
                    ]
                  },
                  {
                    "constraint": "NonSortable"
                  },
                  {
                    "constraint": "ReadOnly"
                  }
                ]
              },
              "name": {
                "type": "string",
                "description": "The name of the Network Pool. Names for Network Pools must be unique across the system."
              },
              "description": {
                "type": "string",
                "x-vcloud-constraints": [
                  {
                    "constraint": "NonSearchable"
                  },
                  {
                    "constraint": "NonSortable"
                  }
                ]
              },
              "poolType": {
                "$ref": "#/components/schemas/NetworkPoolBackingType",
                "description": "The network pool backing type."
              },
              "promiscuousMode": {
                "type": "boolean",
                "description": "Whether promiscuous mode is enabled on the network pool. This is only applicable for VLAN network pools."
              },
              "totalBackingsCount": {
                "type": "integer",
                "description": "The number of backings available for use.",
                "readOnly": true,
                "x-vcloud-constraints": [
                  {
                    "constraint": "NonSearchable"
                  },
                  {
                    "constraint": "NonSortable"
                  },
                  {
                    "constraint": "ReadOnly"
                  }
                ]
              },
              "usedBackingsCount": {
                "type": "integer",
                "description": "The number of network pool backings in use.",
                "readOnly": true,
                "x-vcloud-constraints": [
                  {
                    "constraint": "NonSearchable"
                  },
                  {
                    "constraint": "NonSortable"
                  },
                  {
                    "constraint": "ReadOnly"
                  }
                ]
              },
              "managingOwnerRef": {
                "$ref": "#/components/schemas/EntityReference",
                "description": "The Id of vCenter server or the NSX-T manager that manages backings for this network pool."
              }
            }
          }
        ],
        "description": "Common fields that NetworkPoolSummary and NetworkPool have."
      },
      "NetworkPoolsSummary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/NetworkPoolSummary"
                }
              }
            }
          }
        ],
        "description": "List of Network Pool Summary Objects."
      },
      "NumberFormat": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Constraint"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string"
              }
            }
          }
        ]
      },
      "NumberParam": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Parameter"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "number"
              }
            }
          }
        ]
      },
      "NumberRange": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Constraint"
          },
          {
            "type": "object",
            "properties": {
              "min": {
                "type": "number"
              },
              "max": {
                "type": "number"
              }
            }
          }
        ]
      },
      "PortGroups": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/PortGroup"
                }
              }
            }
          }
        ],
        "description": "List of standard portgroups."
      },
      "PreferenceDefinitions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "description": "The current page for preference definitions.",
                "items": {
                  "$ref": "#/definitions/PreferenceDefinition"
                }
              }
            }
          }
        ],
        "description": "A list of preference definitions"
      },
      "Preferences": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "description": "The list of user preferences.",
                "items": {
                  "$ref": "#/definitions/Preference"
                }
              }
            }
          }
        ],
        "description": "A list of user preferences"
      },
      "Properties": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Parameter"
          },
          {
            "type": "object",
            "properties": {
              "property": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/KeyValuePair"
                }
              }
            }
          }
        ]
      },
      "ProviderVdcs": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ProviderVdc"
                }
              }
            }
          }
        ],
        "description": "List of Provider VDCs."
      },
      "Proxies": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Proxy"
                }
              }
            }
          }
        ],
        "description": "A paginated list of proxies"
      },
      "ProxyConfigurations": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ProxyConfiguration"
                }
              }
            }
          }
        ],
        "description": "A paginated list of proxy configurations"
      },
      "PublishableRightsMapping": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RightsMapping"
          },
          {
            "type": "object",
            "properties": {
              "publishAll": {
                "type": "boolean",
                "description": "Read-only value indicating publishAll state\n",
                "default": false,
                "x-vcloud-constraints": [
                  {
                    "constraint": "ReadOnly"
                  }
                ]
              }
            }
          }
        ],
        "description": "RightsMapping that can be published to tenants"
      },
      "PvdcComputePolicies": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "description": "The current page of provider VDC compute policies.",
                "items": {
                  "$ref": "#/definitions/PvdcComputePolicy"
                }
              }
            }
          }
        ],
        "description": "A list of provider VDC compute policies."
      },
      "RefreshOnChange": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Decorator"
          }
        ]
      },
      "Regex": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Parameter"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string"
              }
            }
          }
        ]
      },
      "Regexp": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Constraint"
          },
          {
            "type": "object",
            "properties": {
              "expression": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ResourcePools": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ResourcePool"
                }
              }
            }
          }
        ],
        "description": "A list of Resource Pools"
      },
      "RestrictDuplicates": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Constraint"
          }
        ]
      },
      "Rights": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "description": "The current page of rights.",
                "items": {
                  "$ref": "#/definitions/Right"
                }
              }
            }
          }
        ],
        "description": "A list of rights."
      },
      "RightsBundles": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "description": "The current page of rights bundles.",
                "items": {
                  "$ref": "#/definitions/RightsBundle"
                }
              }
            }
          }
        ]
      },
      "RightsCategoryNodes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "description": "The current page of rights category nodes.",
                "items": {
                  "$ref": "#/definitions/RightsCategoryNode"
                }
              }
            }
          }
        ],
        "description": "A list of rights category nodes."
      },
      "Role": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RightsMapping"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "maxLength": 128,
                "x-vcloud-constraints": [
                  {
                    "constraint": "Urn",
                    "args": [
                      {
                        "arg": "role"
                      }
                    ]
                  }
                ]
              }
            }
          }
        ]
      },
      "Roles": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "description": "The current page of roles.",
                "items": {
                  "$ref": "#/definitions/Role"
                }
              }
            }
          }
        ],
        "description": "A list of roles."
      },
      "SddcProxies": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SddcProxy"
                }
              }
            }
          }
        ],
        "description": "A paginated list of SDDC proxies"
      },
      "Sddcs": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Sddc"
                }
              }
            }
          }
        ],
        "description": "A paginated list of software-defined data centers"
      },
      "SdkObject": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Parameter"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "href": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "displayValue": {
                "type": "string"
              }
            }
          }
        ]
      },
      "SecureString": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Parameter"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string"
              },
              "isPlainText": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "ServiceApps": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ServiceApp"
                }
              }
            }
          }
        ],
        "description": "List of VMware service applications"
      },
      "ServiceItems": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "description": "The current page of service items.",
                "items": {
                  "$ref": "#/definitions/ServiceItem"
                }
              }
            }
          }
        ],
        "description": "A list of service items."
      },
      "Services": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "description": "The current page of services.",
                "items": {
                  "$ref": "#/definitions/Service"
                }
              }
            }
          }
        ],
        "description": "A list of services."
      },
      "Sessions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "description": "The current page of sessions.",
                "items": {
                  "$ref": "#/definitions/Session"
                }
              }
            }
          }
        ],
        "description": "A list of sessions."
      },
      "StepInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PresentationElement"
          },
          {
            "type": "object",
            "properties": {
              "readOnly": {
                "type": "boolean"
              },
              "elements": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/PresentationElement"
                }
              }
            }
          }
        ]
      },
      "StorageProfiles": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/StorageProfile"
                }
              }
            }
          }
        ],
        "description": "A list of Storage Profiles"
      },
      "StringParam": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Parameter"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string"
              }
            }
          }
        ]
      },
      "Tier0Router": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonNsxTRouterFields"
          }
        ],
        "description": "An NSX-T's Tier-0 router."
      },
      "Tokens": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Token"
                }
              }
            }
          }
        ],
        "description": "A paginated list of user specific tokens used for accessing proxies."
      },
      "UiPluginMetadataResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UiPluginMetadata"
          },
          {
            "$ref": "#/components/schemas/UploadMetadataResponse"
          }
        ]
      },
      "UnmanagedVirtualMachines": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/UnmanagedVirtualMachine"
                }
              }
            }
          }
        ],
        "description": "A list of unmanaged Virtual Machines"
      },
      "UsedIpAddresses": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/UsedIpAddress"
                }
              }
            }
          }
        ],
        "description": "List of used IP addresses."
      },
      "VCenterServers": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "description": "The current page of vCenter server.",
                "items": {
                  "$ref": "#/definitions/VCenterServer"
                }
              }
            }
          }
        ],
        "description": "A list of vCenter servers."
      },
      "VdcComputePolicies": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "description": "The current page of VDC compute policies.",
                "items": {
                  "$ref": "#/definitions/VdcComputePolicy"
                }
              }
            }
          }
        ],
        "description": "A list of VDC compute policies."
      },
      "VdcGroups": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/VdcGroup"
                }
              }
            }
          }
        ],
        "description": "List of vDC Groups."
      },
      "VdcNetwork": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Network"
          },
          {
            "type": "object",
            "properties": {
              "backingNetworkId": {
                "type": "string",
                "description": "The NSX id of the backing network."
              },
              "backingNetworkType": {
                "$ref": "#/components/schemas/BackingNetworkType",
                "description": "The object type of the backing network."
              },
              "parentNetworkId": {
                "$ref": "#/components/schemas/EntityReference",
                "description": "The parent network if the network is a direct network, otherwise it will be null."
              },
              "networkType": {
                "$ref": "#/components/schemas/VdcNetworkFenceType",
                "description": "The type of network. Changing the network type allows converting between an isolated and routed network.\nNote that the \"connection\" field must also be set if converting from isolated to routed network."
              },
              "orgVdc": {
                "$ref": "#/components/schemas/EntityReference",
                "description": "The organization vDC the network belongs to."
              },
              "connection": {
                "$ref": "#/components/schemas/RouterConnection",
                "description": "The edge gateway that the network is attached to."
              },
              "isDefaultNetwork": {
                "type": "boolean",
                "description": "Deprecated unused field, this property will be removed in future release.\n"
              },
              "shared": {
                "type": "boolean",
                "description": "Whether this network is shared with other organization vDCs."
              },
              "status": {
                "$ref": "#/components/schemas/OrgVdcNetworkStatus",
                "description": "Description of the network's status."
              },
              "lastTaskFailureMessage": {
                "type": "string",
                "description": "Brief failure message if the last configuration task failed.\nDeprecated in Api 33.0, this property will be removed in next release.\n",
                "readOnly": true
              },
              "guestVlanTaggingAllowed": {
                "type": "boolean",
                "description": "Whether guest VLAN tagging is allowed."
              },
              "retainNicResources": {
                "type": "boolean",
                "description": "Whether network resources such as IP/MAC Addresses are to be retained."
              },
              "crossVdcNetworkId": {
                "type": "string",
                "description": "The id of the cross vdc network if this is a stretched network, otherwise it will be null.",
                "readOnly": true
              },
              "crossVdcNetworkLocationId": {
                "type": "string",
                "description": "The id of the org from which this network can be managed if this is a stretched network, otherwise it will be null.",
                "readOnly": true
              },
              "totalIpCount": {
                "type": "integer",
                "description": "The number of IP addresses defined by the static ip pools. If the network contains any IpV6 subnets, the total ip count will be null.",
                "readOnly": true
              },
              "usedIpCount": {
                "type": "integer",
                "description": "The number of IP address used from the static ip pools.",
                "readOnly": true
              },
              "routeAdvertised": {
                "type": "boolean",
                "description": "Whether this network is advertised so that it can be routed out to the external networks. This applies only to\nnetwork backed by NSX-T. Value will be unset if route advertisement is not applicable.\n",
                "readOnly": true
              },
              "securityGroups": {
                "type": "array",
                "description": "The list of firewall groups of type SECURITY_GROUP that are assigned to the Org VDC Network. These groups can then be used\nin firewall rules to protect the Org VDC Network and allow/deny traffic.\n",
                "items": {
                  "$ref": "#/definitions/EntityReference"
                }
              }
            }
          }
        ],
        "description": "An organization vDC network."
      },
      "VdcNetworks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/VdcNetwork"
                }
              }
            }
          }
        ],
        "description": "List of Org vDC networks"
      },
      "VmcSddcs": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/VmcSddc"
                }
              }
            }
          }
        ],
        "description": "List of VMware Cloud on AWS SDDCs"
      },
      "VroRemoteWorkflowItems": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Page"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "type": "array",
                "description": "The current page of remove VRO workflows.",
                "items": {
                  "$ref": "#/definitions/VroRemoteWorkflowItem"
                }
              }
            }
          }
        ],
        "description": "A list of remote VRO workflows."
      },
      "VroWorkflowServiceItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServiceItem"
          },
          {
            "type": "object",
            "properties": {
              "vroWorkflowId": {
                "type": "string"
              },
              "vroServerId": {
                "type": "string"
              }
            }
          }
        ]
      },
      "FirewallGroupDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FirewallGroupSummary"
          },
          {
            "type": "object",
            "properties": {
              "ipAddresses": {
                "type": "array",
                "description": "IP Addresses included in the group. This is only applicable for IP_SET Firewall Groups. This can support IPv4 and IPv6 addresses in single, range, and CIDR formats.\n",
                "items": {
                  "type": "string"
                }
              },
              "members": {
                "type": "array",
                "description": "The list of static member entities such as Org vDC Networks to be used. This is only applicable for SECURITY_GROUP Firewall Groups. The objects used\nmust be scoped to the particular Edge Gateway specified.\n",
                "items": {
                  "$ref": "#/definitions/EntityReference"
                },
                "x-vcloud-added-in": 34,
                "x-vcloud-constraints": [
                  {
                    "constraint": "NonSearchable"
                  },
                  {
                    "constraint": "NonSortable"
                  }
                ]
              }
            }
          }
        ],
        "description": "A Firewall Group object."
      },
      "GlobalRole": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PublishableRightsMapping"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "maxLength": 128,
                "x-vcloud-constraints": [
                  {
                    "constraint": "Urn",
                    "args": [
                      {
                        "arg": "globalRole"
                      }
                    ]
                  }
                ]
              }
            }
          }
        ]
      },
      "NetworkPool": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NetworkPoolSummary"
          },
          {
            "type": "object",
            "properties": {
              "backing": {
                "$ref": "#/components/schemas/NetworkPoolBacking",
                "description": "The network pool backing information."
              }
            }
          }
        ],
        "description": "A network pool is a group of undifferentiated networks that is available\nfor use within an organization vDC to create certain type of vDC networks\nsuch as Organization vDC and Cross vDC networks."
      },
      "PrimaryField": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Field"
          },
          {
            "type": "object",
            "properties": {
              "fields": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Field"
                }
              },
              "value": {
                "$ref": "#/components/schemas/Parameter"
              }
            }
          }
        ]
      },
      "RightsBundle": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PublishableRightsMapping"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "maxLength": 128,
                "x-vcloud-constraints": [
                  {
                    "constraint": "Urn",
                    "args": [
                      {
                        "arg": "rightsBundle"
                      }
                    ]
                  }
                ]
              }
            }
          }
        ]
      }
    }
  }
}
